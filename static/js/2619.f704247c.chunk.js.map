{"version":3,"file":"static/js/2619.f704247c.chunk.js","mappings":";4PAAc,mDAARA,CAAAA,CAAQ,yuOCsBRC,GAH6B,oBAAhBC,aAA6B,IAAIA,YACjB,oBAAhBC,aAA6B,IAAIA,YAErCC,MAAMC,UAAUC,MAAMC,KADvB,sEAEC,CAAEC,IACb,IAAIC,EAAM,CAAC,EACXD,EAAEE,SAAQ,CAACC,EAAGC,IAAMH,EAAIE,GAAKC,GAEhC,EAJc,CAIZX,GAEaY,OAAOC,aAAaC,KAAKF,QACG,oBAApBG,WAAWC,MAC7BD,WAAWC,KAAKF,KAAKC,qBC/BQ,+gDCAkB,mwNCAV,+cDAU,6CCAV,g3MCAa,04LAgBpDE,EAAM,m/DChBG,29CCAA,qrGCAA,miGCAA,gxGCAA,gs/BCAA,0zHCAA,4ICAA,molBCAA,qyFCAA,y7ECAA,yuOCAA,+pDCAA,0rFCAA,8rDCAA,66DCAA,ioDCAA,y8aCAA,mWCAA,4yFCAA,knBCAA,gnKCAA,m/HCAbC,EAAOC,QAAO,SAAG,GAASC,IAAAA,IAAY,2GCApC,SAAUC,EAAK,EAAQ,GAAO,6lEAA9B,0BCA8B,mjICAP,s6GCAA,04BCAvB,SAAUA,EAAK,GAAQ,6sBAAvB,0BCA8B,klBCAA,8QCAP,qpBCAvB,SAAUA,EAAK,EAAQ,GAAO,0TAA9B,2BCAA,SAAUA,EAAK,GAAQ,ipBAAvB,2BCAA,SAAUA,EAAK,GAAQ,69FAAvB,2BCAA,SAAUA,EAAK,EAAQ,GAAO,oiBAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,uCAOvB,sjBAPuB,CAA9B,0BCA8B,mZCAA,8SCAA,qXCA9B,SAAUA,EAAK,EAAQ,GAAO,yPAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,yQAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,gOAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,4GAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,sPAA9B,0BCA8B,wrBCA9B,SAAUA,EAAK,EAAQ,GAAO,mmEAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,kqEAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,+yBAA9B,2BCAA,SAAUA,EAAK,GAAQ,qCAWfA,GAAKC,IAAAA,EAAQ,29EAXE,CAAvB,wBCAuB,whCCAO,mbCA9B,SAAUD,EAAK,GAAQ,q1CAAvB,2BCAA,SAAUA,EAAK,EAAQ,GAAO,4rEAA9B,0BCA8B,qoBCA9B,SAAUA,EAAK,EAAQ,GAAO,6hJAA9B,2BCAA,SAAUA,EAAK,EAAQ,GAAO,w1TAA9B,0BCAuB,sjBCAZ,+hFCAA,svHCAA,kqJCAA,2uECAA,44ZCAA,woBCAb,SAASE,IAAAA,OAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,GAAAA,IAAAA,IAAAA,KAAAA,EAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,GAAAA,GAAAA,OAAAA,sBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,sBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,GAAAA,OAAAA,UAAAA,qBAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,GAAAA,EAAAA,EAAAA,aAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,IAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EAAAA,KAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,QAAAA,SAAAA,OAAAA,EAAAA,cAAAA,MAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,6BAAAA,MAAAA,EAAAA,OAAAA,EAAAA,QAAAA,YAAAA,KAAAA,OAAAA,OAAAA,EAAAA,YAAAA,IAAAA,cAAAA,QAAAA,eAAAA,SAAAA,GAAAA,EAAAA,cAAAA,OAAAA,CAAAA,EAAAA,gEAAAA,EAAAA,cAAAA,OAAAA,CAAAA,EAAAA,iEAAAA,IAAAA,EAAAA,UAAAA,CAAAA,MAAAA,IAAAA,OAAAA,KAAAA,IAAAA,UAAAA,CAAAA,IAAAA,OAAAA,IAAAA,UAAAA,EAAAA,YAAAA,OAAAA,EAAAA,EAAAA,yECAT,SAASA,IAAAA,OAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,GAAAA,IAAAA,IAAAA,KAAAA,EAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,GAAAA,GAAAA,OAAAA,sBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,sBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,GAAAA,OAAAA,UAAAA,qBAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,GAAAA,EAAAA,EAAAA,aAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,IAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EAAAA,KAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,QAAAA,SAAAA,OAAAA,EAAAA,cAAAA,MAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,6BAAAA,MAAAA,EAAAA,OAAAA,EAAAA,QAAAA,YAAAA,KAAAA,OAAAA,OAAAA,EAAAA,YAAAA,IAAAA,cAAAA,QAAAA,eAAAA,SAAAA,GAAAA,EAAAA,cAAAA,WAAAA,CAAAA,OAAAA,iBAAAA,EAAAA,cAAAA,OAAAA,CAAAA,EAAAA,mFAAAA,EAAAA,cAAAA,OAAAA,CAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,OAAAA,EAAAA,cAAAA,OAAAA,CAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,OAAAA,IAAAA,EAAAA,UAAAA,CAAAA,MAAAA,IAAAA,OAAAA,KAAAA,IAAAA,UAAAA,CAAAA,IAAAA,OAAAA,IAAAA,UAAAA,EAAAA,YAAAA,SAAAA,EAAAA,EAAAA,yECAT,SAASA,IAAAA,OAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,GAAAA,IAAAA,IAAAA,KAAAA,EAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,GAAAA,GAAAA,OAAAA,sBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,sBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,GAAAA,OAAAA,UAAAA,qBAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,GAAAA,EAAAA,EAAAA,aAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,IAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EAAAA,KAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,QAAAA,SAAAA,OAAAA,EAAAA,cAAAA,MAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,6BAAAA,MAAAA,EAAAA,OAAAA,EAAAA,QAAAA,YAAAA,KAAAA,OAAAA,OAAAA,EAAAA,YAAAA,IAAAA,cAAAA,QAAAA,eAAAA,SAAAA,GAAAA,EAAAA,cAAAA,OAAAA,CAAAA,EAAAA,gLAAAA,IAAAA,EAAAA,UAAAA,CAAAA,MAAAA,IAAAA,OAAAA,KAAAA,IAAAA,UAAAA,CAAAA,IAAAA,OAAAA,IAAAA,UAAAA,EAAAA,YAAAA,UAAAA,EAAAA,EAAAA,yECAT,SAASA,IAAAA,OAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,GAAAA,IAAAA,IAAAA,KAAAA,EAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,OAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,GAAAA,GAAAA,OAAAA,sBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,sBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,GAAAA,OAAAA,UAAAA,qBAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,GAAAA,EAAAA,EAAAA,aAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,IAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EAAAA,KAAAA,OAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,QAAAA,SAAAA,OAAAA,EAAAA,cAAAA,MAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,6BAAAA,MAAAA,EAAAA,OAAAA,EAAAA,QAAAA,YAAAA,KAAAA,OAAAA,OAAAA,EAAAA,YAAAA,IAAAA,cAAAA,QAAAA,eAAAA,SAAAA,GAAAA,EAAAA,cAAAA,UAAAA,CAAAA,OAAAA,2EAAAA,EAAAA,cAAAA,OAAAA,CAAAA,GAAAA,KAAAA,GAAAA,IAAAA,GAAAA,IAAAA,GAAAA,OAAAA,EAAAA,cAAAA,OAAAA,CAAAA,GAAAA,IAAAA,GAAAA,IAAAA,GAAAA,KAAAA,GAAAA,OAAAA,IAAAA,EAAAA,UAAAA,CAAAA,MAAAA,IAAAA,OAAAA,KAAAA,IAAAA,UAAAA,CAAAA,IAAAA,OAAAA,IAAAA,UAAAA,EAAAA,YAAAA,WAAAA,EAAAA,EAAAA,qDCA6B,usGCArB","sources":["../node_modules/@0xsequence/abi/dist/0xsequence-abi.esm.js","../node_modules/js-base64/base64.mjs","../node_modules/@0xsequence/utils/dist/0xsequence-utils.esm.js","../node_modules/@0xsequence/network/dist/0xsequence-network.esm.js","../node_modules/@0xsequence/multicall/dist/0xsequence-multicall.esm.js","../node_modules/@looksrare/sdk/dist/index.esm.js","../node_modules/@opensea/seaport-js/lib/abi/DomainRegistry.js","../node_modules/@opensea/seaport-js/lib/abi/ERC1155.js","../node_modules/@opensea/seaport-js/lib/abi/ERC20.js","../node_modules/@opensea/seaport-js/lib/abi/ERC721.js","../node_modules/@opensea/seaport-js/lib/abi/Seaport_v1_4.js","../node_modules/@opensea/seaport-js/lib/constants.js","../node_modules/@opensea/seaport-js/lib/index.js","../node_modules/@opensea/seaport-js/lib/seaport.js","../node_modules/@opensea/seaport-js/lib/utils/approval.js","../node_modules/@opensea/seaport-js/lib/utils/balance.js","../node_modules/@opensea/seaport-js/lib/utils/balanceAndApprovalCheck.js","../node_modules/@opensea/seaport-js/lib/utils/criteria.js","../node_modules/@opensea/seaport-js/lib/utils/eip712/Eip712MerkleTree.js","../node_modules/@opensea/seaport-js/lib/utils/eip712/bulk-orders.js","../node_modules/@opensea/seaport-js/lib/utils/eip712/defaults.js","../node_modules/@opensea/seaport-js/lib/utils/eip712/utils.js","../node_modules/@opensea/seaport-js/lib/utils/fulfill.js","../node_modules/@opensea/seaport-js/lib/utils/gcd.js","../node_modules/@opensea/seaport-js/lib/utils/item.js","../node_modules/@opensea/seaport-js/lib/utils/merkletree.js","../node_modules/@opensea/seaport-js/lib/utils/order.js","../node_modules/@opensea/seaport-js/lib/utils/usecase.js","../node_modules/buffer-reverse/index.js","../node_modules/crypto-js/aes.js","../node_modules/crypto-js/cipher-core.js","../node_modules/crypto-js/core.js","../node_modules/crypto-js/enc-base64.js","../node_modules/crypto-js/enc-utf16.js","../node_modules/crypto-js/evpkdf.js","../node_modules/crypto-js/format-hex.js","../node_modules/crypto-js/hmac.js","../node_modules/crypto-js/index.js","../node_modules/crypto-js/lib-typedarrays.js","../node_modules/crypto-js/md5.js","../node_modules/crypto-js/mode-cfb.js","../node_modules/crypto-js/mode-ctr-gladman.js","../node_modules/crypto-js/mode-ctr.js","../node_modules/crypto-js/mode-ecb.js","../node_modules/crypto-js/mode-ofb.js","../node_modules/crypto-js/pad-ansix923.js","../node_modules/crypto-js/pad-iso10126.js","../node_modules/crypto-js/pad-iso97971.js","../node_modules/crypto-js/pad-nopadding.js","../node_modules/crypto-js/pad-zeropadding.js","../node_modules/crypto-js/pbkdf2.js","../node_modules/crypto-js/rabbit-legacy.js","../node_modules/crypto-js/rabbit.js","../node_modules/crypto-js/rc4.js","../node_modules/crypto-js/ripemd160.js","../node_modules/crypto-js/sha1.js","../node_modules/crypto-js/sha224.js","../node_modules/crypto-js/sha256.js","../node_modules/crypto-js/sha3.js","../node_modules/crypto-js/sha384.js","../node_modules/crypto-js/sha512.js","../node_modules/crypto-js/tripledes.js","../node_modules/crypto-js/x64-core.js","../node_modules/merkletreejs/dist/Base.js","../node_modules/merkletreejs/dist/IncrementalMerkleTree.js","../node_modules/merkletreejs/dist/MerkleMountainRange.js","../node_modules/merkletreejs/dist/MerkleSumTree.js","../node_modules/merkletreejs/dist/MerkleTree.js","../node_modules/merkletreejs/dist/index.js","../node_modules/react-feather/dist/icons/link.js","../node_modules/react-feather/dist/icons/trash-2.js","../node_modules/react-feather/dist/icons/twitter.js","../node_modules/react-feather/dist/icons/x-octagon.js","../node_modules/react-window-infinite-loader/dist/index.esm.js","../node_modules/treeify/treeify.js"],"sourcesContent":["const abi$5 = [{\n  type: 'function',\n  name: 'isValidSignature',\n  constant: true,\n  inputs: [{\n    type: 'bytes32'\n  }, {\n    type: 'bytes'\n  }],\n  outputs: [{\n    type: 'bytes4'\n  }],\n  payable: false,\n  stateMutability: 'view'\n}];\nconst returns = {\n  isValidSignatureBytes32: '0x1626ba7e'\n};\n\nvar erc1271 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abi: abi$5,\n  returns: returns\n});\n\nconst abi$4 = [{\n  type: 'function',\n  name: 'deploy',\n  constant: false,\n  inputs: [{\n    type: 'address'\n  }, {\n    type: 'bytes32'\n  }],\n  outputs: [],\n  payable: true,\n  stateMutability: 'payable'\n}];\n\nvar factory = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abi: abi$4\n});\n\nconst abi$3 = [{\n  type: 'function',\n  name: 'nonce',\n  constant: true,\n  inputs: [],\n  outputs: [{\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view'\n}, {\n  type: 'function',\n  name: 'readNonce',\n  constant: true,\n  inputs: [{\n    type: 'uint256'\n  }],\n  outputs: [{\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view'\n}, {\n  type: 'function',\n  name: 'updateImplementation',\n  constant: false,\n  inputs: [{\n    type: 'address'\n  }],\n  outputs: [],\n  payable: false,\n  stateMutability: 'nonpayable'\n}, {\n  type: 'function',\n  name: 'selfExecute',\n  constant: false,\n  inputs: [{\n    components: [{\n      type: 'bool',\n      name: 'delegateCall'\n    }, {\n      type: 'bool',\n      name: 'revertOnError'\n    }, {\n      type: 'uint256',\n      name: 'gasLimit'\n    }, {\n      type: 'address',\n      name: 'target'\n    }, {\n      type: 'uint256',\n      name: 'value'\n    }, {\n      type: 'bytes',\n      name: 'data'\n    }],\n    type: 'tuple[]'\n  }],\n  outputs: [],\n  payable: false,\n  stateMutability: 'nonpayable'\n}, {\n  type: 'function',\n  name: 'execute',\n  constant: false,\n  inputs: [{\n    components: [{\n      type: 'bool',\n      name: 'delegateCall'\n    }, {\n      type: 'bool',\n      name: 'revertOnError'\n    }, {\n      type: 'uint256',\n      name: 'gasLimit'\n    }, {\n      type: 'address',\n      name: 'target'\n    }, {\n      type: 'uint256',\n      name: 'value'\n    }, {\n      type: 'bytes',\n      name: 'data'\n    }],\n    type: 'tuple[]'\n  }, {\n    type: 'uint256'\n  }, {\n    type: 'bytes'\n  }],\n  outputs: [],\n  payable: false,\n  stateMutability: 'nonpayable'\n}, {\n  type: 'function',\n  name: 'createContract',\n  inputs: [{\n    type: 'bytes'\n  }],\n  payable: true,\n  stateMutability: 'payable'\n}];\n\nvar mainModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abi: abi$3\n});\n\nconst abi$2 = [{\n  type: 'function',\n  name: 'updateImageHash',\n  constant: true,\n  inputs: [{\n    type: 'bytes32'\n  }],\n  outputs: [],\n  payable: false,\n  stateMutability: 'view'\n}, {\n  type: 'function',\n  name: 'imageHash',\n  constant: true,\n  inputs: [],\n  outputs: [{\n    type: 'bytes32'\n  }],\n  payable: false,\n  stateMutability: 'view'\n}];\n\nvar mainModuleUpgradable = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abi: abi$2\n});\n\nconst abi$1 = [{\n  inputs: [{\n    internalType: 'address',\n    name: '_factory',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: '_mainModule',\n    type: 'address'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'constructor'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: 'address',\n    name: '_wallet',\n    type: 'address'\n  }, {\n    indexed: true,\n    internalType: 'bytes32',\n    name: '_imageHash',\n    type: 'bytes32'\n  }, {\n    indexed: false,\n    internalType: 'uint256',\n    name: '_threshold',\n    type: 'uint256'\n  }, {\n    indexed: false,\n    internalType: 'bytes',\n    name: '_signers',\n    type: 'bytes'\n  }],\n  name: 'RequiredConfig',\n  type: 'event'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: 'address',\n    name: '_wallet',\n    type: 'address'\n  }, {\n    indexed: true,\n    internalType: 'address',\n    name: '_signer',\n    type: 'address'\n  }],\n  name: 'RequiredSigner',\n  type: 'event'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_addr',\n    type: 'address'\n  }],\n  name: 'callBalanceOf',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callBlockNumber',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'uint256',\n    name: '_i',\n    type: 'uint256'\n  }],\n  name: 'callBlockhash',\n  outputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callChainId',\n  outputs: [{\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }],\n  stateMutability: 'pure',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_addr',\n    type: 'address'\n  }],\n  name: 'callCode',\n  outputs: [{\n    internalType: 'bytes',\n    name: 'code',\n    type: 'bytes'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_addr',\n    type: 'address'\n  }],\n  name: 'callCodeHash',\n  outputs: [{\n    internalType: 'bytes32',\n    name: 'codeHash',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_addr',\n    type: 'address'\n  }],\n  name: 'callCodeSize',\n  outputs: [{\n    internalType: 'uint256',\n    name: 'size',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callCoinbase',\n  outputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callDifficulty',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callGasLeft',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callGasLimit',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callGasPrice',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callOrigin',\n  outputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'callTimestamp',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }],\n  name: 'knownImageHashes',\n  outputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  name: 'lastImageHashUpdate',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }],\n  name: 'lastSignerUpdate',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '',\n    type: 'address'\n  }],\n  name: 'lastWalletUpdate',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    components: [{\n      internalType: 'bool',\n      name: 'delegateCall',\n      type: 'bool'\n    }, {\n      internalType: 'bool',\n      name: 'revertOnError',\n      type: 'bool'\n    }, {\n      internalType: 'uint256',\n      name: 'gasLimit',\n      type: 'uint256'\n    }, {\n      internalType: 'address',\n      name: 'target',\n      type: 'address'\n    }, {\n      internalType: 'uint256',\n      name: 'value',\n      type: 'uint256'\n    }, {\n      internalType: 'bytes',\n      name: 'data',\n      type: 'bytes'\n    }],\n    internalType: 'struct IModuleCalls.Transaction[]',\n    name: '_txs',\n    type: 'tuple[]'\n  }],\n  name: 'multiCall',\n  outputs: [{\n    internalType: 'bool[]',\n    name: '_successes',\n    type: 'bool[]'\n  }, {\n    internalType: 'bytes[]',\n    name: '_results',\n    type: 'bytes[]'\n  }],\n  stateMutability: 'payable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_wallet',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: '_threshold',\n    type: 'uint256'\n  }, {\n    components: [{\n      internalType: 'uint256',\n      name: 'weight',\n      type: 'uint256'\n    }, {\n      internalType: 'address',\n      name: 'signer',\n      type: 'address'\n    }],\n    internalType: 'struct RequireUtils.Member[]',\n    name: '_members',\n    type: 'tuple[]'\n  }, {\n    internalType: 'bool',\n    name: '_index',\n    type: 'bool'\n  }],\n  name: 'publishConfig',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_wallet',\n    type: 'address'\n  }, {\n    internalType: 'bytes32',\n    name: '_hash',\n    type: 'bytes32'\n  }, {\n    internalType: 'uint256',\n    name: '_sizeMembers',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: '_signature',\n    type: 'bytes'\n  }, {\n    internalType: 'bool',\n    name: '_index',\n    type: 'bool'\n  }],\n  name: 'publishInitialSigners',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: '_wallet',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: '_nonce',\n    type: 'uint256'\n  }],\n  name: 'requireMinNonce',\n  outputs: [],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'uint256',\n    name: '_expiration',\n    type: 'uint256'\n  }],\n  name: 'requireNonExpired',\n  outputs: [],\n  stateMutability: 'view',\n  type: 'function'\n}];\n\nvar sequenceUtils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abi: abi$1\n});\n\nconst abi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"requireFreshSigner\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\n\nvar requireFreshSigner = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  abi: abi\n});\n\nconst walletContracts = {\n  erc1271,\n  factory,\n  mainModule,\n  mainModuleUpgradable,\n  sequenceUtils,\n  requireFreshSigner\n};\n\nexport { walletContracts };\n","/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.2';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","import { Base64 } from 'js-base64';\nimport { ethers, BigNumber } from 'ethers';\nexport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from '@ethersproject/properties';\nimport { isHexString, isBytes } from 'ethers/lib/utils';\n\nconst base64Encode = val => {\n  return Base64.encode(val, true);\n};\nconst base64EncodeObject = obj => {\n  return Base64.encode(JSON.stringify(obj), true);\n};\nconst base64Decode = encodedString => {\n  if (encodedString === null || encodedString === undefined) {\n    return undefined;\n  }\n\n  return Base64.decode(encodedString);\n};\nconst base64DecodeObject = encodedObject => {\n  if (encodedObject === null || encodedObject === undefined) {\n    return undefined;\n  }\n\n  return JSON.parse(Base64.decode(encodedObject));\n};\n\nconst encodeMessageDigest = message => {\n  if (typeof message === 'string') {\n    return ethers.utils.arrayify(ethers.utils.keccak256(ethers.utils.toUtf8Bytes(message)));\n  } else {\n    return ethers.utils.arrayify(ethers.utils.keccak256(message));\n  }\n}; // packMessageData encodes the specified data ready for the Sequence Wallet contracts.\n\nconst packMessageData = (walletAddress, chainId, digest) => {\n  return ethers.utils.solidityPack(['string', 'uint256', 'address', 'bytes32'], ['\\x19\\x01', chainId, walletAddress, digest]);\n};\nconst subDigestOf = (address, chainId, digest) => {\n  return ethers.utils.keccak256(packMessageData(address, chainId, digest));\n};\n\nconst isNode = () => {\n  if (typeof window === 'undefined' && typeof process === 'object') {\n    return true;\n  } else {\n    return false;\n  }\n};\nconst isBrowser = () => !isNode();\n\nconst jwtDecodeClaims = jwt => {\n  const parts = jwt.split('.');\n\n  if (parts.length !== 3) {\n    throw new Error('invalid jwt');\n  }\n\n  const claims = JSON.parse(Base64.decode(parts[1]));\n  return claims;\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar logLevel;\n\n(function (logLevel) {\n  logLevel[logLevel[\"DEBUG\"] = 1] = \"DEBUG\";\n  logLevel[logLevel[\"INFO\"] = 2] = \"INFO\";\n  logLevel[logLevel[\"WARN\"] = 3] = \"WARN\";\n  logLevel[logLevel[\"ERROR\"] = 4] = \"ERROR\";\n  logLevel[logLevel[\"DISABLED\"] = 5] = \"DISABLED\";\n})(logLevel || (logLevel = {}));\n\nclass Logger {\n  constructor(config) {\n    this.config = config;\n    this.logLevel = void 0;\n    this.configure(config);\n  }\n\n  configure(config) {\n    this.config = _extends({}, this.config, config);\n\n    switch (this.config.logLevel) {\n      case 'DEBUG':\n        this.logLevel = logLevel.DEBUG;\n        break;\n\n      case 'INFO':\n        this.logLevel = logLevel.INFO;\n        break;\n\n      case 'WARN':\n        this.logLevel = logLevel.WARN;\n        break;\n\n      case 'ERROR':\n        this.logLevel = logLevel.ERROR;\n        break;\n\n      case 'DISABLED':\n        this.logLevel = logLevel.DISABLED;\n        break;\n\n      default:\n        this.logLevel = logLevel.INFO;\n        break;\n    } // undefined silence value will disable the default silence flag\n\n\n    if (this.config.silence === undefined) {\n      this.config.silence = false;\n    }\n  }\n\n  debug(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n\n    if (this.logLevel === logLevel.DEBUG) {\n      console.log(message, ...optionalParams);\n    }\n  }\n\n  info(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n\n    if (this.logLevel <= logLevel.INFO) {\n      console.log(message, ...optionalParams);\n    }\n  }\n\n  warn(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n\n    if (this.logLevel <= logLevel.WARN) {\n      console.warn(message, ...optionalParams);\n\n      if (this.config.onwarn) {\n        this.config.onwarn(message, optionalParams);\n      }\n    }\n  }\n\n  error(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n\n    if (this.logLevel <= logLevel.ERROR) {\n      console.error(message, ...optionalParams);\n\n      if (this.config.onerror) {\n        this.config.onerror(message, optionalParams);\n      }\n    }\n  }\n\n}\nconst logger = new Logger({\n  logLevel: 'INFO',\n  // By default we silence the logger. In tests we should call `configureLogger`\n  // below to set silence: false.\n  silence: true\n});\nconst configureLogger = config => logger.configure(config);\n\nfunction promisify(f, thisContext) {\n  return function (...a) {\n    const args = Array.prototype.slice.call(a);\n    return new Promise(async (resolve, reject) => {\n      try {\n        args.push((err, result) => err ? reject(err) : resolve(result));\n        await f.apply(thisContext, args);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n}\n\nconst getRandomInt = (min = 0, max = Number.MAX_SAFE_INTEGER) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nfunction queryStringFromObject(name, obj) {\n  const k = encodeURIComponent(name);\n  const v = encodeURIComponent(JSON.stringify(obj));\n  return `${k}=${v}`;\n}\nfunction queryStringToObject(qs) {\n  const p = qs.split('&');\n  const o = {};\n\n  for (const v of p) {\n    const z = v.split('=');\n    o[decodeURIComponent(z[0])] = JSON.parse(decodeURIComponent(z[1]));\n  }\n\n  return o;\n}\n\n// sanitizeNumberString accepts a number string and returns back a clean number string.\n// For example, input '1234.5678' will return '1234.5678' but '12javascript:{}etc' will return '12'\nconst sanitizeNumberString = numString => {\n  if (!numString || typeof numString !== 'string') {\n    return '';\n  }\n\n  const v = numString.match(/[\\d.]+/);\n  return v && v.length > 0 ? v[0].trim() : '';\n}; // sanitizeAlphanumeric accepts any string and returns alphanumeric contents only\n\nconst sanitizeAlphanumeric = alphanum => {\n  if (!alphanum || typeof alphanum !== 'string') {\n    return '';\n  }\n\n  const v = alphanum.match(/[\\w\\s\\d]+/);\n  return v && v.length > 0 ? v[0].trim() : '';\n}; // sanitizeHost accepts any string and returns valid host string\n\nconst sanitizeHost = host => {\n  if (!host || typeof host !== 'string') {\n    return '';\n  }\n\n  const v = host.match(/[\\w\\d.\\-:\\/]+/);\n  return v && v.length > 0 ? v[0].trim() : '';\n};\n\nconst sleep = t => {\n  return new Promise(resolve => {\n    const timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      resolve();\n    }, t);\n  });\n};\n\nconst encodeTypedDataHash = typedData => {\n  const types = _extends({}, typedData.types); // remove EIP712Domain key from types as ethers will auto-gen it in\n  // the hash encoder below\n\n\n  delete types['EIP712Domain'];\n  return ethers.utils._TypedDataEncoder.hash(typedData.domain, types, typedData.message);\n};\nconst encodeTypedDataDigest = typedData => {\n  return ethers.utils.arrayify(encodeTypedDataHash(typedData));\n};\n\n// urlClean removes double slashes from url path\nconst urlClean = url => url.replace(/([^:]\\/)\\/+/g, '$1');\n\nfunction isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\n\nexport { Logger, base64Decode, base64DecodeObject, base64Encode, base64EncodeObject, configureLogger, encodeMessageDigest, encodeTypedDataDigest, encodeTypedDataHash, getRandomInt, isBigNumberish, isBrowser, isNode, jwtDecodeClaims, logger, packMessageData, promisify, queryStringFromObject, queryStringToObject, sanitizeAlphanumeric, sanitizeHost, sanitizeNumberString, sleep, subDigestOf, urlClean };\n","import { urlClean, logger } from '@0xsequence/utils';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction isNetworkConfig(cand) {\n  return cand && cand.chainId !== undefined && cand.name !== undefined && cand.rpcUrl !== undefined && cand.relayer !== undefined;\n}\nconst getChainId = chainId => {\n  if (typeof chainId === 'number') {\n    return chainId;\n  }\n\n  if (chainId.chainId) {\n    return chainId.chainId;\n  }\n\n  return ethers.BigNumber.from(chainId).toNumber();\n};\nconst maybeChainId = chainId => {\n  if (!chainId) return undefined;\n  return getChainId(chainId);\n};\nconst getAuthNetwork = networks => {\n  return networks.find(network => network.isAuthChain);\n};\nconst isValidNetworkConfig = (networkConfig, raise = false, skipRelayerCheck = false) => {\n  if (!networkConfig) throw new Error(`invalid network config: empty config`);\n  const configs = [];\n\n  if (Array.isArray(networkConfig)) {\n    configs.push(...networkConfig);\n  } else {\n    configs.push(networkConfig);\n  }\n\n  if (configs.length === 0) {\n    if (raise) throw new Error(`invalid network config: empty config`);\n    return false;\n  } // Ensure distinct chainId configs\n\n\n  const chainIds = configs.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  } // Downcase all network names\n\n\n  configs.forEach(c => c.name = c.name.toLowerCase()); // Ensure distinct network names\n\n  const names = configs.map(c => c.name).sort();\n  const nameDupes = names.filter((c, i) => names.indexOf(c) !== i);\n\n  if (nameDupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate network names ${nameDupes}`);\n    return false;\n  } // Ensure rpcUrl or provider is specified\n  // Ensure relayerUrl or relayer is specified\n  // Ensure one default chain\n  // Ensure one auth chain\n\n\n  let defaultChain = false;\n  let authChain = false;\n\n  for (let i = 0; i < configs.length; i++) {\n    const c = configs[i];\n\n    if ((!c.rpcUrl || c.rpcUrl === '') && !c.provider) {\n      if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: rpcUrl or provider must be provided`);\n      return false;\n    }\n\n    if (!skipRelayerCheck) {\n      if (!c.relayer) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: relayer must be provided`);\n        return false;\n      }\n    }\n\n    if (c.isDefaultChain) {\n      if (defaultChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: DefaultChain is already set by another config`);\n        return false;\n      }\n\n      defaultChain = true;\n    }\n\n    if (c.isAuthChain) {\n      if (authChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: AuthChain is already set by another config`);\n      }\n\n      authChain = true;\n    }\n  }\n\n  if (!defaultChain) {\n    if (raise) throw new Error(`invalid network config: DefaultChain must be set`);\n    return false;\n  }\n\n  if (!authChain) {\n    if (raise) throw new Error(`invalid network config: AuthChain must be set`);\n    return false;\n  }\n\n  return true;\n};\nconst ensureValidNetworks = (networks, skipRelayerCheck = false) => {\n  isValidNetworkConfig(networks, true, skipRelayerCheck);\n  return networks;\n};\nconst ensureUniqueNetworks = (networks, raise = true) => {\n  const chainIds = networks.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  }\n\n  return true;\n};\nconst updateNetworkConfig = (src, dest) => {\n  if (!src || !dest) return;\n\n  if (!src.chainId && !src.name) {\n    throw new Error('failed to update network config: source config is missing chainId or name');\n  }\n\n  if (src.chainId !== dest.chainId && src.name !== dest.name) {\n    throw new Error('failed to update network config: one of chainId or name must match');\n  }\n\n  if (src.rpcUrl) {\n    dest.rpcUrl = src.rpcUrl;\n    dest.provider = undefined;\n  }\n\n  if (src.provider) {\n    dest.provider = src.provider;\n  }\n\n  if (src.relayer) {\n    dest.relayer = src.relayer;\n  }\n\n  if (src.ensAddress) {\n    dest.ensAddress = src.ensAddress;\n  } // NOTE: we do not set default or auth chain from here\n  // if (src.isDefaultChain) {\n  //   dest.isDefaultChain = src.isDefaultChain\n  // }\n  // if (src.isAuthChain) {\n  //   dest.isAuthChain = src.isAuthChain\n  // }\n\n};\nconst createNetworkConfig = (networks, defaultChainId, vars) => {\n  let config = [];\n\n  if (typeof networks === 'function' && vars) {\n    config = networks(vars);\n  } else {\n    config = networks;\n  }\n\n  if (defaultChainId) {\n    config.forEach(n => n.isDefaultChain = false);\n    const mainNetwork = config.filter(n => n.chainId === defaultChainId);\n\n    if (!mainNetwork || mainNetwork.length === 0) {\n      throw new Error(`defaultChainId ${defaultChainId} cannot be found in network list`);\n    } else {\n      mainNetwork[0].isDefaultChain = true;\n    }\n  }\n\n  return ensureValidNetworks(sortNetworks(config));\n};\nconst findNetworkConfig = (networks, chainId) => {\n  if (typeof chainId === 'string') {\n    if (chainId.startsWith('0x')) {\n      const id = ethers.BigNumber.from(chainId).toNumber();\n      return networks.find(n => n.chainId === id);\n    } else {\n      return networks.find(n => n.name === chainId);\n    }\n  } else if (typeof chainId === 'number') {\n    return networks.find(n => n.chainId === chainId);\n  } else if (chainId.chainId) {\n    return networks.find(n => n.chainId === chainId.chainId);\n  } else {\n    return undefined;\n  }\n};\nconst checkNetworkConfig = (network, chainId) => {\n  if (!network) return false;\n  if (network.name === chainId) return true;\n  if (network.chainId === chainId) return true;\n  return false;\n};\nconst networksIndex = networks => {\n  const index = {};\n\n  for (let i = 0; i < networks.length; i++) {\n    index[networks[i].name] = networks[i];\n  }\n\n  return index;\n}; // TODO: we should remove sortNetworks in the future but this is a breaking change for dapp integrations on older versions <-> wallet\n// sortNetworks orders the network config list by: defaultChain, authChain, ..rest by chainId ascending numbers\n\nconst sortNetworks = networks => {\n  if (!networks) {\n    return [];\n  }\n\n  const config = networks.sort((a, b) => {\n    if (a.chainId === b.chainId) return 0;\n    return a.chainId < b.chainId ? -1 : 1;\n  }); // DefaultChain goes first\n\n  const defaultConfigIdx = config.findIndex(c => c.isDefaultChain);\n  if (defaultConfigIdx > 0) config.splice(0, 0, config.splice(defaultConfigIdx, 1)[0]); // AuthChain goes second\n\n  const authConfigIdx = config.findIndex(c => c.isAuthChain && c.isDefaultChain !== true);\n  if (authConfigIdx > 0) config.splice(1, 0, config.splice(authConfigIdx, 1)[0]);\n  return config;\n};\n\nlet ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"OPTIMISM_TESTNET\"] = 69] = \"OPTIMISM_TESTNET\";\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n  ChainId[ChainId[\"AURORA\"] = 1313161554] = \"AURORA\";\n  ChainId[ChainId[\"AURORA_TESTNET\"] = 1313161556] = \"AURORA_TESTNET\";\n})(ChainId || (ChainId = {}));\n\nconst networks = {\n  [ChainId.MAINNET]: {\n    chainId: ChainId.MAINNET,\n    name: 'mainnet',\n    title: 'Ethereum',\n    blockExplorer: {\n      name: 'Etherscan',\n      rootUrl: 'https://etherscan.io/'\n    }\n  },\n  [ChainId.ROPSTEN]: {\n    chainId: ChainId.ROPSTEN,\n    name: 'ropsten',\n    title: 'Ropsten',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Ropsten)',\n      rootUrl: 'https://ropsten.etherscan.io/'\n    }\n  },\n  [ChainId.RINKEBY]: {\n    chainId: ChainId.RINKEBY,\n    name: 'rinkeby',\n    title: 'Rinkeby',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Rinkeby)',\n      rootUrl: 'https://rinkeby.etherscan.io/'\n    }\n  },\n  [ChainId.GOERLI]: {\n    chainId: ChainId.GOERLI,\n    name: 'goerli',\n    title: 'Goerli',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Goerli)',\n      rootUrl: 'https://goerli.etherscan.io/'\n    }\n  },\n  [ChainId.KOVAN]: {\n    chainId: ChainId.KOVAN,\n    name: 'kovan',\n    title: 'Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Kovan)',\n      rootUrl: 'https://kovan.etherscan.io/'\n    }\n  },\n  [ChainId.POLYGON]: {\n    chainId: ChainId.POLYGON,\n    name: 'polygon',\n    title: 'Polygon',\n    blockExplorer: {\n      name: 'Polygonscan',\n      rootUrl: 'https://polygonscan.com/'\n    }\n  },\n  [ChainId.POLYGON_MUMBAI]: {\n    chainId: ChainId.POLYGON_MUMBAI,\n    name: 'mumbai',\n    title: 'Polygon Mumbai',\n    testnet: true,\n    blockExplorer: {\n      name: 'Polygonscan (Mumbai)',\n      rootUrl: 'https://mumbai.polygonscan.com/'\n    }\n  },\n  [ChainId.BSC]: {\n    chainId: ChainId.BSC,\n    name: 'bsc',\n    title: 'BNB Smart Chain',\n    blockExplorer: {\n      name: 'BSCScan',\n      rootUrl: 'https://bscscan.com/'\n    }\n  },\n  [ChainId.BSC_TESTNET]: {\n    chainId: ChainId.BSC_TESTNET,\n    name: 'bsc-testnet',\n    title: 'BNB Smart Chain Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'BSCScan (Testnet)',\n      rootUrl: 'https://testnet.bscscan.com/'\n    }\n  },\n  [ChainId.OPTIMISM]: {\n    chainId: ChainId.OPTIMISM,\n    name: 'optimism',\n    title: 'Optimism',\n    blockExplorer: {\n      name: 'Etherscan (Optimism)',\n      rootUrl: 'https://optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.OPTIMISM_TESTNET]: {\n    chainId: ChainId.OPTIMISM_TESTNET,\n    name: 'optimism-testnet',\n    title: 'Optimistic Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Optimism Testnet)',\n      rootUrl: 'https://kovan-optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM]: {\n    chainId: ChainId.ARBITRUM,\n    name: 'arbitrum',\n    title: 'Arbitrum',\n    blockExplorer: {\n      name: 'Arbiscan',\n      rootUrl: 'https://arbiscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM_TESTNET]: {\n    chainId: ChainId.ARBITRUM_TESTNET,\n    name: 'arbitrum-testnet',\n    title: 'Arbitrum Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Arbiscan (Testnet)',\n      rootUrl: 'https://testnet.arbiscan.io/'\n    }\n  },\n  [ChainId.AVALANCHE]: {\n    chainId: ChainId.AVALANCHE,\n    name: 'avalanche',\n    title: 'Avalanche',\n    blockExplorer: {\n      name: 'Snowtrace',\n      rootUrl: 'https://snowtrace.io/'\n    }\n  },\n  [ChainId.AVALANCHE_TESTNET]: {\n    chainId: ChainId.AVALANCHE_TESTNET,\n    name: 'avalanche-testnet',\n    title: 'Avalanche Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Snowtrace (Testnet)',\n      rootUrl: 'https://testnet.snowtrace.io/'\n    }\n  },\n  [ChainId.FANTOM]: {\n    chainId: ChainId.FANTOM,\n    name: 'fantom',\n    title: 'Fantom',\n    blockExplorer: {\n      name: 'FTMScan',\n      rootUrl: 'https://ftmscan.com/'\n    }\n  },\n  [ChainId.FANTOM_TESTNET]: {\n    chainId: ChainId.FANTOM_TESTNET,\n    name: 'fantom-testnet',\n    title: 'Fantom Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'FTMScan (Testnet)',\n      rootUrl: 'https://testnet.ftmscan.com/'\n    }\n  },\n  [ChainId.GNOSIS]: {\n    chainId: ChainId.GNOSIS,\n    name: 'gnosis',\n    title: 'Gnosis Chain',\n    blockExplorer: {\n      name: 'Gnosis Chain Explorer',\n      rootUrl: 'https://blockscout.com/xdai/mainnet/'\n    }\n  },\n  [ChainId.AURORA]: {\n    chainId: ChainId.AURORA,\n    name: 'aurora',\n    title: 'Aurora',\n    blockExplorer: {\n      name: 'Aurora Explorer',\n      rootUrl: 'https://aurorascan.dev/'\n    }\n  },\n  [ChainId.AURORA_TESTNET]: {\n    chainId: ChainId.AURORA_TESTNET,\n    name: 'aurora-testnet',\n    title: 'Aurora Testnet',\n    blockExplorer: {\n      name: 'Aurora Explorer (Testnet)',\n      rootUrl: 'https://testnet.aurorascan.dev/'\n    }\n  }\n};\nconst mainnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.MAINNET], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/mainnet`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/mainnet`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.POLYGON], {\n  rpcUrl: 'https://rpc-mainnet.matic.network',\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/matic`)\n  },\n  isAuthChain: true\n})], 1, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\nconst testnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.RINKEBY], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/rinkeby`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/rinkeby`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.GOERLI], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/goerli`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/goerli`)\n  },\n  isAuthChain: true\n})], undefined, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\n\n// WalletContext is the module addresses deployed on a network, aka the context / environment\n// of the Sequence Smart Wallet system on Ethereum.\n// sequenceContext are the deployed addresses of modules available on public networks.\nconst sequenceContext = {\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  sequenceUtils: '0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E',\n  libs: {\n    requireFreshSigner: '0xE6B9B21C077F382333220a072e4c44280b873907'\n  }\n};\n\nconst JsonRpcVersion = '2.0';\n\nclass JsonRpcRouter {\n  constructor(middlewares, sender) {\n    this.sender = void 0;\n    this.handler = void 0;\n    this.sender = sender;\n\n    if (middlewares) {\n      this.setMiddleware(middlewares);\n    }\n  }\n\n  setMiddleware(middlewares) {\n    this.handler = createJsonRpcMiddlewareStack(middlewares, this.sender.sendAsync);\n  }\n\n  sendAsync(request, callback, chainId) {\n    try {\n      this.handler(request, callback, chainId);\n    } catch (err) {\n      callback(err, undefined);\n    }\n  } // createWeb3Provider(network?: Networkish): EthersWeb3Provider {\n  //   return new EthersWeb3Provider(this.sender, network)\n  // }\n\n\n}\nconst createJsonRpcMiddlewareStack = (middlewares, handler) => {\n  if (middlewares.length === 0) return handler;\n\n  const toMiddleware = v => {\n    if (v.sendAsyncMiddleware) {\n      return v.sendAsyncMiddleware;\n    } else {\n      return v;\n    }\n  };\n\n  let chain;\n  chain = toMiddleware(middlewares[middlewares.length - 1])(handler);\n\n  for (let i = middlewares.length - 2; i >= 0; i--) {\n    chain = toMiddleware(middlewares[i])(chain);\n  }\n\n  return chain;\n};\n\nfunction isJsonRpcProvider(cand) {\n  return cand !== undefined && cand.send !== undefined && cand.constructor.defaultUrl !== undefined && cand.detectNetwork !== undefined && cand.getSigner !== undefined && cand.perform !== undefined;\n}\nfunction isJsonRpcHandler(cand) {\n  return cand !== undefined && cand.sendAsync !== undefined;\n}\n\nlet _nextId = 0;\nclass JsonRpcSender {\n  constructor(provider, defaultChainId) {\n    this.send = void 0;\n    this.request = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsync = (request, callback, chainId) => {\n      this.send(request.method, request.params, chainId || this.defaultChainId).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.defaultChainId = defaultChainId;\n\n    if (isJsonRpcProvider(provider)) {\n      // we can ignore defaultChainId for JsonRpcProviders as they are already chain-bound\n      this.send = provider.send.bind(provider);\n    } else if (isJsonRpcHandler(provider)) {\n      this.send = (method, params, chainId) => {\n        return new Promise((resolve, reject) => {\n          provider.sendAsync({\n            // TODO: really shouldn't have to set these here?\n            jsonrpc: JsonRpcVersion,\n            id: ++_nextId,\n            method,\n            params\n          }, (error, response) => {\n            if (error) {\n              reject(error);\n            } else if (response) {\n              resolve(response.result);\n            } else {\n              resolve(undefined);\n            }\n          }, chainId || this.defaultChainId);\n        });\n      };\n    } else {\n      this.send = provider;\n    }\n\n    this.request = (request, chainId) => {\n      return this.send(request.method, request.params, chainId);\n    };\n  }\n\n}\nclass JsonRpcExternalProvider {\n  constructor(provider) {\n    this.provider = provider;\n\n    this.sendAsync = (request, callback) => {\n      this.provider.send(request.method, request.params).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.send = this.sendAsync;\n  }\n\n}\n\nclass AllowProvider {\n  constructor(isAllowedFunc) {\n    this.sendAsyncMiddleware = void 0;\n    this.isAllowedFunc = void 0;\n\n    if (isAllowedFunc) {\n      this.isAllowedFunc = isAllowedFunc;\n    } else {\n      this.isAllowedFunc = request => true;\n    }\n\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n  setIsAllowedFunc(fn) {\n    this.isAllowedFunc = fn;\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n}\nconst allowProviderMiddleware = isAllowed => next => {\n  return (request, callback, chainId) => {\n    // ensure precondition is met or do not allow the request to continue\n    if (!isAllowed(request)) {\n      throw new Error('allowProvider middleware precondition is unmet.');\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nclass CachedProvider {\n  constructor(defaultChainId) {\n    this.cachableJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', 'sequence_getWalletContext', 'sequence_getNetworks'];\n    this.cache = void 0;\n    this.onUpdateCallback = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Respond early with cached result\n        if (this.cachableJsonRpcMethods.includes(request.method)) {\n          const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n          const result = this.getCacheValue(key);\n\n          if (result && result !== '') {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: result\n            });\n            return;\n          }\n        } // Continue down the handler chain\n\n\n        next(request, (error, response, chainId) => {\n          // Store result in cache and continue\n          if (this.cachableJsonRpcMethods.includes(request.method)) {\n            if (response && response.result) {\n              const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n              this.setCacheValue(key, response.result);\n            }\n          } // Exec next handler\n\n\n          callback(error, response);\n        }, chainId || this.defaultChainId);\n      };\n    };\n\n    this.cacheKey = (method, params, chainId) => {\n      let key = '';\n\n      if (chainId) {\n        key = `${chainId}:${method}:`;\n      } else {\n        key = `:${method}:`;\n      }\n\n      if (!params || params.length === 0) {\n        return key + '[]';\n      }\n\n      return key + JSON.stringify(params);\n    };\n\n    this.getCache = () => this.cache;\n\n    this.setCache = cache => {\n      this.cache = cache;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback();\n      }\n    };\n\n    this.getCacheValue = key => {\n      return this.cache[key];\n    };\n\n    this.setCacheValue = (key, value) => {\n      this.cache[key] = value;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback(key, value);\n      }\n    };\n\n    this.clearCache = () => {\n      this.cache = {};\n    };\n\n    this.cache = {};\n    this.defaultChainId = defaultChainId;\n  }\n\n  onUpdate(callback) {\n    this.onUpdateCallback = callback;\n  }\n\n}\n\nclass EagerProvider {\n  constructor(props) {\n    this.props = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        const {\n          id,\n          method\n        } = request;\n\n        switch (method) {\n          case 'net_version':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: `${this.props.chainId}`\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_chainId':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: ethers.utils.hexlify(this.props.chainId)\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_accounts':\n            if (this.props.accountAddress) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: [ethers.utils.getAddress(this.props.accountAddress)]\n              });\n              return;\n            }\n\n            break;\n\n          case 'sequence_getWalletContext':\n            if (this.props.walletContext) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: this.props.walletContext\n              });\n              return;\n            }\n\n            break;\n        }\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.props = props;\n  }\n\n}\n\nconst exceptionProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    next(request, (error, response) => {\n      if (!error && response && response.error) {\n        if (typeof response.error === 'string') {\n          throw new Error(response.error);\n        } else {\n          throw new Error(response.error.message);\n        }\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst loggingProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    const chainIdLabel = chainId ? ` chainId:${chainId}` : '';\n    logger.info(`[provider request]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params);\n    next(request, (error, response) => {\n      if (error) {\n        logger.warn(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `error:`, error);\n      } else {\n        logger.info(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `response:`, response);\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst networkProviderMiddleware = getChainId => next => {\n  return (request, callback, chainId) => {\n    const networkChainId = getChainId(request);\n    const {\n      id,\n      method\n    } = request;\n\n    switch (method) {\n      case 'net_version':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: `${networkChainId}`\n        });\n        return;\n\n      case 'eth_chainId':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: ethers.utils.hexlify(networkChainId)\n        });\n        return;\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nconst SignerJsonRpcMethods = ['personal_sign', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v4', 'eth_sendTransaction', 'eth_sendRawTransaction', 'sequence_getWalletContext', 'sequence_getWalletConfig', 'sequence_getWalletState', 'sequence_getNetworks', 'sequence_updateConfig', 'sequence_publishConfig', 'sequence_estimateGasLimits', 'sequence_gasRefundOptions', 'sequence_getNonce', 'sequence_relay', 'eth_decrypt', 'eth_getEncryptionPublicKey', 'wallet_addEthereumChain', 'wallet_switchEthereumChain', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode'];\nclass SigningProvider {\n  constructor(provider) {\n    this.provider = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Forward signing requests to the signing provider\n        if (SignerJsonRpcMethods.includes(request.method)) {\n          this.provider.sendAsync(request, callback, chainId);\n          return;\n        } // Continue to next handler\n\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.provider = provider;\n  }\n\n}\n\nclass PublicProvider {\n  constructor(rpcUrl) {\n    this.privateJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', ...SignerJsonRpcMethods];\n    this.provider = void 0;\n    this.rpcUrl = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback) => {\n        // When provider is configured, send non-private methods to our local public provider\n        if (this.provider && !this.privateJsonRpcMethods.includes(request.method)) {\n          this.provider.send(request.method, request.params).then(r => {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: r\n            });\n          }).catch(e => callback(e));\n          return;\n        } // Continue to next handler\n\n\n        logger.debug('[public-provider] sending request to signer window', request.method);\n        next(request, callback);\n      };\n    };\n\n    if (rpcUrl) {\n      this.setRpcUrl(rpcUrl);\n    }\n  }\n\n  getRpcUrl() {\n    return this.rpcUrl;\n  }\n\n  setRpcUrl(rpcUrl) {\n    if (!rpcUrl || rpcUrl === '') {\n      this.rpcUrl = undefined;\n      this.provider = undefined;\n    } else {\n      this.rpcUrl = rpcUrl;\n      this.provider = new JsonRpcProvider(rpcUrl);\n    }\n  }\n\n}\n\nexport { AllowProvider, CachedProvider, ChainId, EagerProvider, JsonRpcExternalProvider, JsonRpcRouter, JsonRpcSender, JsonRpcVersion, PublicProvider, SigningProvider, allowProviderMiddleware, checkNetworkConfig, createJsonRpcMiddlewareStack, createNetworkConfig, ensureUniqueNetworks, ensureValidNetworks, exceptionProviderMiddleware, findNetworkConfig, getAuthNetwork, getChainId, isJsonRpcHandler, isJsonRpcProvider, isNetworkConfig, isValidNetworkConfig, loggingProviderMiddleware, mainnetNetworks, maybeChainId, networkProviderMiddleware, networks, networksIndex, sequenceContext, sortNetworks, testnetNetworks, updateNetworkConfig };\n","import { BigNumber, ethers } from 'ethers';\nimport { walletContracts } from '@0xsequence/abi';\nimport { getRandomInt, promisify } from '@0xsequence/utils';\nimport { sequenceContext, JsonRpcVersion } from '@0xsequence/network';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nlet JsonRpcMethod;\n\n(function (JsonRpcMethod) {\n  JsonRpcMethod[\"ethCall\"] = \"eth_call\";\n  JsonRpcMethod[\"ethGetBalance\"] = \"eth_getBalance\";\n  JsonRpcMethod[\"ethGetCode\"] = \"eth_getCode\";\n})(JsonRpcMethod || (JsonRpcMethod = {}));\n\nasync function safeSolve(promise, def) {\n  try {\n    return await promise;\n  } catch (e) {\n    const d = def instanceof Function ? def(e) : def;\n    return d;\n  }\n}\nfunction partition(array, callback) {\n  return array.reduce(function (result, element, i) {\n    callback(element, i) ? result[0].push(element) : result[1].push(element);\n    return result;\n  }, [[], []]);\n}\nfunction parseBlockTag(cand) {\n  if (cand === undefined) return 'latest';\n\n  switch (cand) {\n    case 'earliest':\n    case 'latest':\n    case 'pending':\n      return cand;\n  }\n\n  return BigNumber.from(cand);\n}\nfunction eqBlockTag(a, b) {\n  if (a === b) return true;\n\n  if (BigNumber.isBigNumber(a)) {\n    if (BigNumber.isBigNumber(b)) return a.eq(b);\n    return false;\n  }\n\n  if (BigNumber.isBigNumber(b)) return false;\n  return a === b;\n}\n\nconst DefaultMulticallOptions = {\n  batchSize: 50,\n  timeWindow: 50,\n  contract: sequenceContext.sequenceUtils,\n  verbose: false\n};\nclass Multicall {\n  constructor(options) {\n    var _this = this;\n\n    this.batchableJsonRpcMethods = [JsonRpcMethod.ethCall, JsonRpcMethod.ethGetCode, JsonRpcMethod.ethGetBalance];\n    this.multicallInterface = new ethers.utils.Interface(walletContracts.sequenceUtils.abi);\n    this.options = void 0;\n    this.timeout = void 0;\n    this.queue = [];\n\n    this.scheduleExecution = () => {\n      if (this.queue.length > 0) {\n        if (this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.run, this.options.timeWindow);\n      }\n    };\n\n    this.handle = (next, request, callback) => {\n      // Schedule for batching and return\n      if (this.batchableJsonRpcMethods.find(m => m === request.method)) {\n        this.queue.push({\n          request: request,\n          callback: callback,\n          next: next\n        });\n        if (this.options.verbose) console.log('Scheduling call', request.method);\n        this.scheduleExecution();\n        return;\n      }\n\n      if (this.options.verbose) console.log('Forwarded call', request.method); // Move to next handler\n\n      return next(request, callback);\n    };\n\n    this.run = async function () {\n      /* eslint-disable no-var */\n      if (_this.options.verbose) console.log('Processing multicall'); // Read items from queue\n\n      const limit = Math.min(_this.options.batchSize, _this.queue.length);\n      if (limit === 0) return; // Skip multicall on single item\n\n      if (limit === 1) {\n        _this.forward(_this.queue[0]);\n\n        _this.queue = [];\n        if (_this.options.verbose) console.log('Skip multicall, single item');\n        return;\n      }\n\n      if (_this.options.verbose) console.log('Resolving', limit); // Get batch from queue\n\n      var items = _this.queue.slice(0, limit); // Update queue\n\n\n      _this.queue = limit === _this.queue.length ? [] : _this.queue.slice(limit);\n      if (_this.options.verbose) console.log('Updated queue', _this.queue.length);\n\n      if (_this.queue.length !== 0) {\n        _this.scheduleExecution();\n      } // Get next candidate\n\n\n      const next = items[0].next;\n      let blockTag; // Partition incompatible calls\n\n      var [items, discartItems] = partition(items, item => {\n        try {\n          // Mixed next callbacks\n          if (item.next !== next) return false;\n\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              // Unsupported eth_call parameters\n              if (item.request.params[0].from || item.request.params[0].gasPrice || item.request.params[0].value) {\n                return false;\n              }\n\n            case JsonRpcMethod.ethGetBalance:\n            case JsonRpcMethod.ethGetCode:\n              // Mixed blockTags\n              const itemBlockTag = parseBlockTag(item.request.params[1]);\n              if (blockTag === undefined) blockTag = itemBlockTag;\n              if (!eqBlockTag(itemBlockTag, blockTag)) return false;\n          }\n\n          return true;\n        } catch (_unused) {\n          return false;\n        }\n      }); // Forward discarted items\n      // end execution if no items remain\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding incompatible calls', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Aggregate all calls\n\n\n      let callParams = items.map(v => {\n        try {\n          switch (v.request.method) {\n            case JsonRpcMethod.ethCall:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: v.request.params[0].to,\n                data: v.request.params[0].data,\n                gasLimit: v.request.params[0].gas ? v.request.params[0].gas : 0,\n                value: 0\n              };\n\n            case JsonRpcMethod.ethGetCode:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callCode'), [v.request.params[0]])\n              };\n\n            case JsonRpcMethod.ethGetBalance:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callBalanceOf'), [v.request.params[0]])\n              };\n\n            default:\n              return null;\n          }\n        } catch (_unused2) {\n          return null;\n        }\n      }); // Filter calls with enconding errors and forward items\n\n      var [items, discartItems] = partition(items, (_, i) => callParams[i] !== undefined);\n      callParams = callParams.filter(c => c);\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding calls on error', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Encode multicall\n\n\n      let encodedCall;\n\n      try {\n        encodedCall = _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('multiCall'), [callParams]);\n      } catch (_unused3) {\n        _this.forward(items);\n\n        return;\n      } // Forward single multicall rpc call\n\n\n      const reqId = getRandomInt(); // TODO: fix types below..\n\n      const res = await safeSolve( // @ts-ignore\n      promisify(next)({\n        id: reqId,\n        jsonrpc: JsonRpcVersion,\n        method: JsonRpcMethod.ethCall,\n        params: [{\n          to: _this.options.contract,\n          value: 0,\n          data: encodedCall\n        }, BigNumber.isBigNumber(blockTag) ? blockTag.toNumber() : blockTag] // @ts-ignore\n\n      }), e => ({\n        jsonrpc: JsonRpcVersion,\n        id: reqId,\n        result: undefined,\n        error: e\n      })); // Error calling multicall\n      // Forward all calls to middleware\n      // @ts-ignore\n\n      if (res.error) {\n        return _this.forward(items);\n      } // Decode result from multicall\n\n\n      let decoded;\n\n      try {\n        // @ts-ignore\n        decoded = _this.multicallInterface.decodeFunctionResult(_this.multicallInterface.getFunction('multiCall'), res.result);\n      } catch (_unused4) {\n        _this.forward(items);\n\n        return;\n      } // Send results for each request\n      // errors fallback through the middleware\n\n\n      if (_this.options.verbose) console.log('Got response for', items.length);\n      items.forEach((item, index) => {\n        if (!decoded[0][index]) {\n          _this.forward(item);\n        } else {\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: decoded[1][index]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetCode:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['bytes'], decoded[1][index])[0]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetBalance:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['uint256'], decoded[1][index])[0]\n              });\n              break;\n          }\n        }\n      });\n    };\n\n    this.options = options ? _extends({}, Multicall.DefaultOptions, options) : Multicall.DefaultOptions;\n    if (this.options.batchSize <= 0) throw new Error(`Invalid batch size of ${this.options.batchSize}`);\n  }\n\n  forward(entries) {\n    if (Array.isArray(entries)) {\n      entries.forEach(e => e.next(e.request, e.callback));\n    } else {\n      entries.next(entries.request, entries.callback);\n    }\n  }\n\n  static isMulticall(cand) {\n    return cand && cand.handle !== undefined && cand.conf !== undefined && Multicall.isMulticallOptions(cand.options);\n  }\n\n  static isMulticallOptions(cand) {\n    return cand !== undefined && cand.batchSize !== undefined && cand.timeWindow !== undefined && cand.contract !== undefined;\n  }\n\n}\nMulticall.DefaultOptions = _extends({}, DefaultMulticallOptions);\n\nconst ProxyMethods = ['getNetwork', 'getBlockNumber', 'getGasPrice', 'getTransactionCount', 'getStorageAt', 'sendTransaction', 'estimateGas', 'getBlock', 'getTransaction', 'getTransactionReceipt', 'getLogs', 'emit', 'litenerCount', 'addListener', 'removeListener', 'waitForTransaction', 'detectNetwork', 'getBlockWithTransactions'];\nclass MulticallProvider extends ethers.providers.BaseProvider {\n  constructor(provider, multicall) {\n    var _this;\n\n    super(provider.getNetwork());\n    _this = this;\n    this.provider = provider;\n    this.multicall = void 0;\n    this.listenerCount = this.provider.listenerCount;\n\n    this.getResolver = async function (name) {\n      const provider = _this.provider;\n\n      if (provider.getResolver) {\n        const ogResolver = await provider.getResolver(await name);\n        if (!ogResolver) return null;\n        return new ethers.providers.Resolver(_this, ogResolver.address, ogResolver.name);\n      }\n\n      return provider.getResolver(await name);\n    };\n\n    this.next = async function (req, callback) {\n      try {\n        switch (req.method) {\n          case JsonRpcMethod.ethCall:\n            _this.callback(req, callback, await _this.provider.call(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetCode:\n            _this.callback(req, callback, await _this.provider.getCode(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetBalance:\n            _this.callback(req, callback, await _this.provider.getBalance(req.params[0], req.params[1]));\n\n            break;\n        }\n      } catch (e) {\n        _this.callback(req, callback, undefined, e);\n      }\n    };\n\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    ProxyMethods.forEach(m => {\n      if (provider[m] !== undefined) {\n\n        this[m] = (...args) => provider[m](...args);\n      }\n    });\n  }\n\n  callback(req, callback, resp, err) {\n    callback(err, {\n      jsonrpc: JsonRpcVersion,\n      id: req.id,\n      result: resp,\n      error: err\n    });\n  }\n\n  async call(transaction, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethCall, transaction, blockTag);\n  }\n\n  async getCode(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetCode, addressOrName, blockTag);\n  }\n\n  async getBalance(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetBalance, addressOrName, blockTag);\n  }\n\n  async rpcCall(method, ...params) {\n    const reqId = getRandomInt();\n    const resp = await promisify(this.multicall.handle)(this.next, {\n      jsonrpc: JsonRpcVersion,\n      id: reqId,\n      method: method,\n      params: params\n    });\n    return resp.result;\n  }\n\n}\n\nclass MulticallExternalProvider {\n  constructor(provider, multicall) {\n    this.provider = provider;\n    this.multicall = void 0;\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n\n    if (provider.send) {\n      const next = async function next(req, callback) {\n        provider.send(req, callback);\n      };\n\n      this.send = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n\n    if (provider.sendAsync) {\n      const next = async function next(req, callback) {\n        provider.sendAsync(req, callback);\n      };\n\n      this.sendAsync = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n  }\n\n  get isMetaMask() {\n    return this.provider.isMetaMask;\n  }\n\n  get isStatus() {\n    return this.provider.isStatus;\n  }\n\n}\n\nconst multicallMiddleware = multicall => next => {\n  const lib = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n  return (request, callback) => {\n    return lib.handle(next, request, callback);\n  };\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ProxyMethods: ProxyMethods,\n  MulticallProvider: MulticallProvider,\n  MulticallExternalProvider: MulticallExternalProvider,\n  multicallMiddleware: multicallMiddleware\n});\n\nexport { Multicall, index as providers };\n","import { _TypedDataEncoder } from '@ethersproject/hash';\nimport { utils, BigNumber } from 'ethers';\nimport { Interface } from '@ethersproject/abi';\nimport { Contract } from '@ethersproject/contracts';\n\nvar AggregatorFeeSharingWithUniswapV3 = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_feeSharingSystem\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_uniswapRouter\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountSold\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amountReceived\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"ConversionToLOOKS\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Deposit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t],\n\t\tname: \"FailedConversion\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t],\n\t\tname: \"HarvestStart\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t],\n\t\tname: \"HarvestStop\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestBufferBlocks\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewHarvestBufferBlocks\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"maxPriceLOOKSInWETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewMaximumPriceLOOKSInWETH\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"thresholdAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewThresholdAmount\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint24\",\n\t\t\t\tname: \"tradingFeeUniswapV3\",\n\t\t\t\ttype: \"uint24\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewTradingFeeUniswapV3\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Paused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Unpaused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Withdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"MAXIMUM_HARVEST_BUFFER_BLOCKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"MINIMUM_DEPOSIT_LOOKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"calculateSharePriceInLOOKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"calculateSharePriceInPrimeShare\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculateSharesValueInLOOKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"canHarvest\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"checkAndAdjustLOOKSTokenAllowanceIfRequired\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"checkAndAdjustRewardTokenAllowanceIfRequired\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"deposit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"feeSharingSystem\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract FeeSharingSystem\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"harvestAndSellAndCompound\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"harvestBufferBlocks\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastHarvestBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"maxPriceLOOKSInWETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"pause\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"paused\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"startHarvest\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"stopHarvest\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"thresholdAmount\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalShares\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"tradingFeeUniswapV3\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint24\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint24\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"uniswapRouter\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ISwapRouter\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"unpause\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_newHarvestBufferBlocks\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateHarvestBufferBlocks\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_newMaxPriceLOOKSInWETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateMaxPriceOfLOOKSInWETH\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_newThresholdAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateThresholdAmount\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint24\",\n\t\t\t\tname: \"_newTradingFeeUniswapV3\",\n\t\t\t\ttype: \"uint24\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateTradingFeeUniswapV3\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"userInfo\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"shares\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"withdrawAll\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar CurrencyManagerAbi = [\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"CurrencyRemoved\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"CurrencyWhitelisted\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"addCurrency\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"isCurrencyWhitelisted\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeCurrency\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"viewCountWhitelistedCurrencies\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"cursor\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"size\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"viewWhitelistedCurrencies\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar ERC1155 = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"uri_\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approved\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"ApprovalForAll\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"ids\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"values\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"TransferBatch\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"id\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"value\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"TransferSingle\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"value\",\n\t\t\t\ttype: \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"id\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"URI\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"id\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"balanceOf\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"accounts\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"ids\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"balanceOfBatch\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"isApprovedForAll\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"ids\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes\",\n\t\t\t\tname: \"data\",\n\t\t\t\ttype: \"bytes\"\n\t\t\t}\n\t\t],\n\t\tname: \"safeBatchTransferFrom\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"id\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes\",\n\t\t\t\tname: \"data\",\n\t\t\t\ttype: \"bytes\"\n\t\t\t}\n\t\t],\n\t\tname: \"safeTransferFrom\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approved\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"setApprovalForAll\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"interfaceId\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tname: \"supportsInterface\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"uri\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar ERC20 = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"name_\",\n\t\t\t\ttype: \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"symbol_\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"spender\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"value\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Approval\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"value\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Transfer\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"spender\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"allowance\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"spender\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"approve\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"balanceOf\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"decimals\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"spender\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"subtractedValue\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"decreaseAllowance\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"spender\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"addedValue\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"increaseAllowance\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"name\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"symbol\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalSupply\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"recipient\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"transfer\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"sender\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"recipient\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferFrom\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar ERC721 = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"name_\",\n\t\t\t\ttype: \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"symbol_\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"approved\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Approval\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approved\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"ApprovalForAll\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Transfer\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"approve\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"balanceOf\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"getApproved\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"isApprovedForAll\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"name\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"ownerOf\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"safeTransferFrom\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes\",\n\t\t\t\tname: \"_data\",\n\t\t\t\ttype: \"bytes\"\n\t\t\t}\n\t\t],\n\t\tname: \"safeTransferFrom\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"operator\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"approved\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"setApprovalForAll\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"interfaceId\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tname: \"supportsInterface\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"symbol\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"tokenURI\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"from\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferFrom\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar ExecutionManager = [\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"StrategyRemoved\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"StrategyWhitelisted\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"addStrategy\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"isStrategyWhitelisted\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeStrategy\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"viewCountWhitelistedStrategies\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"cursor\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"size\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"viewWhitelistedStrategies\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar FeeSharingSystem = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_rewardToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_tokenDistributor\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Deposit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Harvest\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"numberBlocks\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardPerBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reward\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewRewardPeriod\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Withdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"PRECISION_FACTOR\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculatePendingRewards\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"calculateSharePriceInLOOKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculateSharesValueInLOOKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currentRewardPerBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"claimRewardToken\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"deposit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"harvest\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastRewardAdjustment\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastRewardBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastUpdateBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"periodEndBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardPerTokenStored\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"tokenDistributor\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract TokenDistributor\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalShares\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"reward\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardDurationInBlocks\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRewards\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"userInfo\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"shares\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"userRewardPerTokenPaid\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewards\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"shares\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"claimRewardToken\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"claimRewardToken\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdrawAll\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar IExecutionStrategy = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"taker\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.TakerOrder\",\n\t\t\t\tname: \"takerAsk\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerBid\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"canExecuteTakerAsk\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"taker\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.TakerOrder\",\n\t\t\t\tname: \"takerBid\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerAsk\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"canExecuteTakerBid\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"viewProtocolFee\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar LooksRareAirdrop = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_endTimestamp\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_maximumAmountToClaim\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"_domainSeparator\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_transferManagerERC721\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_transferManagerERC1155\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_mainStrategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_weth\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"AirdropRewardsClaim\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"merkleRoot\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"MerkleRootSet\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"endTimestamp\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewEndTimestamp\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Paused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"TokensWithdrawn\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Unpaused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"DOMAIN_SEPARATOR_EXCHANGE\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"MAIN_STRATEGY\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"MAXIMUM_AMOUNT_TO_CLAIM\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"TRANSFER_MANAGER_ERC1155\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"TRANSFER_MANAGER_ERC721\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"WETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[]\",\n\t\t\t\tname: \"merkleProof\",\n\t\t\t\ttype: \"bytes32[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"canClaim\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[]\",\n\t\t\t\tname: \"merkleProof\",\n\t\t\t\ttype: \"bytes32[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerAsk\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"isERC721\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tname: \"claim\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"endTimestamp\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"hasClaimed\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"isMerkleRootSet\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"merkleRoot\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"pauseAirdrop\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"paused\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"_merkleRoot\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"setMerkleRoot\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"unpauseAirdrop\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"newEndTimestamp\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateEndTimestamp\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"withdrawTokenRewards\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar LooksRareExchange = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_currencyManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_executionManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_royaltyFeeManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_WETH\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_protocolFeeRecipient\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"newMinNonce\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"CancelAllOrders\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"orderNonces\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"CancelMultipleOrders\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currencyManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewCurrencyManager\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"executionManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewExecutionManager\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"protocolFeeRecipient\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewProtocolFeeRecipient\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"royaltyFeeManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewRoyaltyFeeManager\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"transferSelectorNFT\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewTransferSelectorNFT\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"royaltyRecipient\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"RoyaltyPayment\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"orderHash\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"orderNonce\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"taker\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"maker\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"price\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"TakerAsk\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"orderHash\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"orderNonce\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"taker\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"maker\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"strategy\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"currency\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"price\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"TakerBid\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"DOMAIN_SEPARATOR\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"WETH\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"minNonce\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"cancelAllOrdersForSender\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"orderNonces\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"cancelMultipleMakerOrders\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currencyManager\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ICurrencyManager\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"executionManager\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IExecutionManager\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"orderNonce\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"isUserOrderNonceExecutedOrCancelled\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"taker\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.TakerOrder\",\n\t\t\t\tname: \"takerBid\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerAsk\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"matchAskWithTakerBid\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"taker\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.TakerOrder\",\n\t\t\t\tname: \"takerBid\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerAsk\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"matchAskWithTakerBidUsingETHAndWETH\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"taker\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.TakerOrder\",\n\t\t\t\tname: \"takerAsk\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerBid\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"matchBidWithTakerAsk\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"protocolFeeRecipient\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"royaltyFeeManager\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IRoyaltyFeeManager\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"transferSelectorNFT\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ITransferSelectorNFT\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_currencyManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateCurrencyManager\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_executionManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateExecutionManager\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_protocolFeeRecipient\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateProtocolFeeRecipient\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_royaltyFeeManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyFeeManager\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_transferSelectorNFT\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateTransferSelectorNFT\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"userMinOrderNonce\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar multicall2Abi = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"target\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"callData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Call[]\",\n\t\t\t\tname: \"calls\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"aggregate\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"blockNumber\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes[]\",\n\t\t\t\tname: \"returnData\",\n\t\t\t\ttype: \"bytes[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"target\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"callData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Call[]\",\n\t\t\t\tname: \"calls\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"blockAndAggregate\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"blockNumber\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"blockHash\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"success\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"returnData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Result[]\",\n\t\t\t\tname: \"returnData\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"blockNumber\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"getBlockHash\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"blockHash\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getBlockNumber\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"blockNumber\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getCurrentBlockCoinbase\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"coinbase\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getCurrentBlockDifficulty\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"difficulty\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getCurrentBlockGasLimit\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"gaslimit\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getCurrentBlockTimestamp\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"timestamp\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"addr\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"getEthBalance\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"balance\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getLastBlockHash\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"blockHash\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"requireSuccess\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"target\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"callData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Call[]\",\n\t\t\t\tname: \"calls\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"tryAggregate\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"success\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"returnData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Result[]\",\n\t\t\t\tname: \"returnData\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"requireSuccess\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"target\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"callData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Call[]\",\n\t\t\t\tname: \"calls\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"tryBlockAndAggregate\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"blockNumber\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"blockHash\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"success\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"returnData\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct Multicall2.Result[]\",\n\t\t\t\tname: \"returnData\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar MultiRewardsDistributor = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardRound\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"totalAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint8[]\",\n\t\t\t\tname: \"treeIds\",\n\t\t\t\ttype: \"uint8[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"Claim\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"treeId\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewTree\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Paused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"TokenWithdrawnOwner\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Unpaused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardRound\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"UpdateTradingRewards\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"BUFFER_ADMIN_WITHDRAW\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"SAFE_GUARD_AMOUNT\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"safeGuard\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"addNewTree\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"amountClaimedByUserPerTreeId\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8[]\",\n\t\t\t\tname: \"treeIds\",\n\t\t\t\ttype: \"uint8[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[][]\",\n\t\t\t\tname: \"merkleProofs\",\n\t\t\t\ttype: \"bytes32[][]\"\n\t\t\t}\n\t\t],\n\t\tname: \"canClaim\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool[]\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8[]\",\n\t\t\t\tname: \"treeIds\",\n\t\t\t\ttype: \"uint8[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"amounts\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[][]\",\n\t\t\t\tname: \"merkleProofs\",\n\t\t\t\ttype: \"bytes32[][]\"\n\t\t\t}\n\t\t],\n\t\tname: \"claim\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currentRewardRound\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastPausedTimestamp\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"merkleRootUsed\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"numberTrees\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"pauseDistribution\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"paused\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"safeGuardUsed\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"treeParameters\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"safeGuard\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"merkleRoot\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"maxAmountPerUserInCurrentTree\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"unpauseDistribution\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8[]\",\n\t\t\t\tname: \"treeIds\",\n\t\t\t\ttype: \"uint8[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[]\",\n\t\t\t\tname: \"merkleRoots\",\n\t\t\t\ttype: \"bytes32[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"maxAmountsPerUser\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[][]\",\n\t\t\t\tname: \"merkleProofsSafeGuards\",\n\t\t\t\ttype: \"bytes32[][]\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateTradingRewards\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdrawTokenRewards\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar OrderValidatorV1 = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareExchange\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"CRITERIA_GROUPS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC1155\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC2981\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC721\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"MAGIC_VALUE_EIP1271\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"TRANSFER_MANAGER_ERC1155\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"TRANSFER_MANAGER_ERC721\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"_DOMAIN_SEPARATOR\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder[]\",\n\t\t\t\tname: \"makerOrders\",\n\t\t\t\ttype: \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkMultipleOrderValidities\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[][]\",\n\t\t\t\tname: \"validationCodes\",\n\t\t\t\ttype: \"uint256[][]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkOrderValidity\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"validationCodes\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValidityAmounts\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"pure\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValidityApprovalsAndBalances\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValidityMinPercentageToAsk\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValidityNonces\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValiditySignature\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValidityTimestamps\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bool\",\n\t\t\t\t\t\tname: \"isOrderAsk\",\n\t\t\t\t\t\ttype: \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"signer\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"collection\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"price\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"tokenId\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"amount\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"strategy\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"address\",\n\t\t\t\t\t\tname: \"currency\",\n\t\t\t\t\t\ttype: \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"nonce\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"startTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"endTime\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint256\",\n\t\t\t\t\t\tname: \"minPercentageToAsk\",\n\t\t\t\t\t\ttype: \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes\",\n\t\t\t\t\t\tname: \"params\",\n\t\t\t\t\t\ttype: \"bytes\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"uint8\",\n\t\t\t\t\t\tname: \"v\",\n\t\t\t\t\t\ttype: \"uint8\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"r\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\t\t\tname: \"s\",\n\t\t\t\t\t\ttype: \"bytes32\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tinternalType: \"struct OrderTypes.MakerOrder\",\n\t\t\t\tname: \"makerOrder\",\n\t\t\t\ttype: \"tuple\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkValidityWhitelists\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"validationCode\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currencyManager\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ICurrencyManager\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"executionManager\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IExecutionManager\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareExchange\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract LooksRareExchange\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"royaltyFeeRegistry\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IRoyaltyFeeRegistry\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"transferSelectorNFT\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ITransferSelectorNFTExtended\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar PrivateSaleWithFeeSharing = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_rewardToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_maxBlockForWithdrawal\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_totalLooksDistributed\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"Deposit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Harvest\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"allocationCostInETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewAllocationCostPerTier\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"blockForWithdrawal\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewBlockForWithdrawal\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"price\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewPriceOfETHInLOOKS\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"enum PrivateSaleWithFeeSharing.SalePhase\",\n\t\t\t\tname: \"newSalePhase\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewSalePhase\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"UserRemoved\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"users\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"UsersWhitelisted\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Withdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"MAX_BLOCK_FOR_WITHDRAWAL\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"NUMBER_TIERS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"TOTAL_LOOKS_DISTRIBUTED\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"allocationCostPerTier\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"blockForWithdrawal\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculatePendingRewards\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currentPhase\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"enum PrivateSaleWithFeeSharing.SalePhase\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"deposit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"getMaxAmountLOOKSToDistribute\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"maxAmountCollected\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"harvest\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"numberOfParticipantsForATier\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"priceOfETHInLOOKS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"removeUserFromWhitelist\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"_tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_allocationCostInETH\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"setAllocationCostPerTier\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_blockForWithdrawal\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"setBlockForWithdrawal\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_priceOfETHinLOOKS\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"setPriceOfETHInLOOKS\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalAmountCommitted\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalRewardTokensDistributedToStakers\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"enum PrivateSaleWithFeeSharing.SalePhase\",\n\t\t\t\tname: \"_newSalePhase\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateSalePhase\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"updateSalePhaseToWithdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"userInfo\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardsDistributedToAccount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"hasDeposited\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"hasWithdrawn\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"_users\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"_tier\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tname: \"whitelistUsers\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"withdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"withdrawCommittedAmount\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar ReverseRecords = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ENS\",\n\t\t\t\tname: \"_ens\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address[]\",\n\t\t\t\tname: \"addresses\",\n\t\t\t\ttype: \"address[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"getNames\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"string[]\",\n\t\t\t\tname: \"r\",\n\t\t\t\ttype: \"string[]\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar RoyaltyFeeManager = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_royaltyFeeRegistry\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC2981\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"tokenId\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculateRoyaltyFeeAndGetRecipient\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"royaltyFeeRegistry\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IRoyaltyFeeRegistry\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar RoyaltyFeeRegistry = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_royaltyFeeLimit\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"royaltyFeeLimit\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewRoyaltyFeeLimit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"setter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"receiver\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"fee\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"RoyaltyFeeUpdate\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"royaltyFeeInfoCollection\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"royaltyFeeLimit\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"royaltyInfo\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_royaltyFeeLimit\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyFeeLimit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"setter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"receiver\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"fee\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyInfoForCollection\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar RoyaltyFeeSetter = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_royaltyFeeRegistry\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC1155\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC2981\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"INTERFACE_ID_ERC721\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes4\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes4\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkForCollectionSetter\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint8\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"royaltyFeeRegistry\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_owner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateOwnerOfRoyaltyFeeRegistry\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_royaltyFeeLimit\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyFeeLimit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"setter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"receiver\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"fee\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyInfoForCollection\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"setter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"receiver\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"fee\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyInfoForCollectionIfAdmin\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"setter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"receiver\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"fee\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyInfoForCollectionIfOwner\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"setter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"receiver\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"fee\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRoyaltyInfoForCollectionIfSetter\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar StakingPoolForUniswapV2Tokens = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_stakedToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_rewardPerBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_startBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_endBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"AdminRewardWithdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Deposit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"EmergencyWithdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Harvest\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardPerBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"endBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewRewardPerBlockAndEndBlock\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Paused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Unpaused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Withdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"PRECISION_FACTOR\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"START_BLOCK\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"accTokenPerShare\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"adminRewardWithdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculatePendingRewards\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"deposit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"emergencyWithdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"endBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"harvest\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastRewardBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"pause\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"paused\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardPerBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"stakedToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"unpause\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"newRewardPerBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"newEndBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateRewardPerBlockAndEndBlock\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"userInfo\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardDebt\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar TokenDistributor = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_tokenSplitter\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_startBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"_rewardsPerBlockForStaking\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"_rewardsPerBlockForOthers\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256[]\",\n\t\t\t\tname: \"_periodLengthesInBlocks\",\n\t\t\t\ttype: \"uint256[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"_numberPeriods\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Compound\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Deposit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"currentPhase\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"startBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardPerBlockForStaking\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardPerBlockForOthers\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"NewRewardsPerBlock\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"harvestedAmount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Withdraw\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"NUMBER_PERIODS\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"PRECISION_FACTOR\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"START_BLOCK\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"accTokenPerShare\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"calculatePendingRewards\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currentPhase\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"deposit\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"endBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"harvestAndCompound\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastRewardBlock\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract ILooksRareToken\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardPerBlockForOthers\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"rewardPerBlockForStaking\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"stakingPeriod\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardPerBlockForStaking\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardPerBlockForOthers\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"periodLengthInBlock\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"tokenSplitter\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalAmountStaked\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"updatePool\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"userInfo\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardDebt\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdraw\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"withdrawAll\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar TradingRewardsDistributor = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"_looksRareToken\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"constructor\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"previousOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"OwnershipTransferred\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Paused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardRound\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"RewardsClaim\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"TokenWithdrawnOwner\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"account\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"Unpaused\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"rewardRound\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"UpdateTradingRewards\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"BUFFER_ADMIN_WITHDRAW\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"amountClaimedByUser\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"user\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[]\",\n\t\t\t\tname: \"merkleProof\",\n\t\t\t\ttype: \"bytes32[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"canClaim\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32[]\",\n\t\t\t\tname: \"merkleProof\",\n\t\t\t\ttype: \"bytes32[]\"\n\t\t\t}\n\t\t],\n\t\tname: \"claim\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"currentRewardRound\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"hasUserClaimedForRewardRound\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"lastPausedTimestamp\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"looksRareToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"contract IERC20\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"maximumAmountPerUserInCurrentTree\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"merkleRootOfRewardRound\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t}\n\t\t],\n\t\tname: \"merkleRootUsed\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"owner\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"pauseDistribution\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"paused\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bool\",\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"renounceOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"newOwner\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferOwnership\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t],\n\t\tname: \"unpauseDistribution\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"bytes32\",\n\t\t\t\tname: \"merkleRoot\",\n\t\t\t\ttype: \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"newMaximumAmountPerUser\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"updateTradingRewards\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdrawTokenRewards\",\n\t\toutputs: [\n\t\t],\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar TransferSelectorNFT = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"collection\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"checkTransferManagerForToken\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: \"address\",\n\t\t\t\tname: \"transferManager\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t}\n];\n\nvar WETH = [\n\t{\n\t\tconstant: true,\n\t\tinputs: [\n\t\t],\n\t\tname: \"name\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"guy\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"approve\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: true,\n\t\tinputs: [\n\t\t],\n\t\tname: \"totalSupply\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"src\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"dst\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"transferFrom\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"withdraw\",\n\t\toutputs: [\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: true,\n\t\tinputs: [\n\t\t],\n\t\tname: \"decimals\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint8\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: true,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"balanceOf\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: true,\n\t\tinputs: [\n\t\t],\n\t\tname: \"symbol\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"string\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"dst\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"transfer\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"bool\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"nonpayable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t],\n\t\tname: \"deposit\",\n\t\toutputs: [\n\t\t],\n\t\tpayable: true,\n\t\tstateMutability: \"payable\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tconstant: true,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"address\"\n\t\t\t}\n\t\t],\n\t\tname: \"allowance\",\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: \"\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: \"view\",\n\t\ttype: \"function\"\n\t},\n\t{\n\t\tpayable: true,\n\t\tstateMutability: \"payable\",\n\t\ttype: \"fallback\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tname: \"src\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tname: \"guy\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Approval\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tname: \"src\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tname: \"dst\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Transfer\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tname: \"dst\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Deposit\",\n\t\ttype: \"event\"\n\t},\n\t{\n\t\tanonymous: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tindexed: true,\n\t\t\t\tname: \"src\",\n\t\t\t\ttype: \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tindexed: false,\n\t\t\t\tname: \"wad\",\n\t\t\t\ttype: \"uint256\"\n\t\t\t}\n\t\t],\n\t\tname: \"Withdrawal\",\n\t\ttype: \"event\"\n\t}\n];\n\nvar SupportedChainId;\n(function (SupportedChainId) {\n    SupportedChainId[SupportedChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n    SupportedChainId[SupportedChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n    SupportedChainId[SupportedChainId[\"HARDHAT\"] = 31337] = \"HARDHAT\";\n})(SupportedChainId || (SupportedChainId = {}));\n/**\n * https://github.com/LooksRare/contracts-exchange-v1/blob/master/contracts/orderValidation/ValidationCodeConstants.sol\n */\nvar OrderValidatorEnum;\n(function (OrderValidatorEnum) {\n    OrderValidatorEnum[OrderValidatorEnum[\"ORDER_EXPECTED_TO_BE_VALID\"] = 0] = \"ORDER_EXPECTED_TO_BE_VALID\";\n    OrderValidatorEnum[OrderValidatorEnum[\"NONCE_EXECUTED_OR_CANCELLED\"] = 101] = \"NONCE_EXECUTED_OR_CANCELLED\";\n    OrderValidatorEnum[OrderValidatorEnum[\"NONCE_BELOW_MIN_ORDER_NONCE\"] = 102] = \"NONCE_BELOW_MIN_ORDER_NONCE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ORDER_AMOUNT_CANNOT_BE_ZERO\"] = 201] = \"ORDER_AMOUNT_CANNOT_BE_ZERO\";\n    OrderValidatorEnum[OrderValidatorEnum[\"MAKER_SIGNER_IS_NULL_SIGNER\"] = 301] = \"MAKER_SIGNER_IS_NULL_SIGNER\";\n    OrderValidatorEnum[OrderValidatorEnum[\"INVALID_S_PARAMETER_EOA\"] = 302] = \"INVALID_S_PARAMETER_EOA\";\n    OrderValidatorEnum[OrderValidatorEnum[\"INVALID_V_PARAMETER_EOA\"] = 303] = \"INVALID_V_PARAMETER_EOA\";\n    OrderValidatorEnum[OrderValidatorEnum[\"NULL_SIGNER_EOA\"] = 304] = \"NULL_SIGNER_EOA\";\n    OrderValidatorEnum[OrderValidatorEnum[\"WRONG_SIGNER_EOA\"] = 305] = \"WRONG_SIGNER_EOA\";\n    OrderValidatorEnum[OrderValidatorEnum[\"SIGNATURE_INVALID_EIP1271\"] = 311] = \"SIGNATURE_INVALID_EIP1271\";\n    OrderValidatorEnum[OrderValidatorEnum[\"MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271\"] = 312] = \"MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271\";\n    OrderValidatorEnum[OrderValidatorEnum[\"CURRENCY_NOT_WHITELISTED\"] = 401] = \"CURRENCY_NOT_WHITELISTED\";\n    OrderValidatorEnum[OrderValidatorEnum[\"STRATEGY_NOT_WHITELISTED\"] = 402] = \"STRATEGY_NOT_WHITELISTED\";\n    OrderValidatorEnum[OrderValidatorEnum[\"MIN_NET_RATIO_ABOVE_PROTOCOL_FEE\"] = 501] = \"MIN_NET_RATIO_ABOVE_PROTOCOL_FEE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE\"] = 502] = \"MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE\"] = 503] = \"MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"MISSING_ROYALTY_INFO_FUNCTION_ERC2981\"] = 504] = \"MISSING_ROYALTY_INFO_FUNCTION_ERC2981\";\n    OrderValidatorEnum[OrderValidatorEnum[\"TOO_EARLY_TO_EXECUTE_ORDER\"] = 601] = \"TOO_EARLY_TO_EXECUTE_ORDER\";\n    OrderValidatorEnum[OrderValidatorEnum[\"TOO_LATE_TO_EXECUTE_ORDER\"] = 602] = \"TOO_LATE_TO_EXECUTE_ORDER\";\n    OrderValidatorEnum[OrderValidatorEnum[\"NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION\"] = 701] = \"NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION\";\n    OrderValidatorEnum[OrderValidatorEnum[\"CUSTOM_TRANSFER_MANAGER\"] = 702] = \"CUSTOM_TRANSFER_MANAGER\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC20_BALANCE_INFERIOR_TO_PRICE\"] = 711] = \"ERC20_BALANCE_INFERIOR_TO_PRICE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC20_APPROVAL_INFERIOR_TO_PRICE\"] = 712] = \"ERC20_APPROVAL_INFERIOR_TO_PRICE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC721_TOKEN_ID_DOES_NOT_EXIST\"] = 721] = \"ERC721_TOKEN_ID_DOES_NOT_EXIST\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC721_TOKEN_ID_NOT_IN_BALANCE\"] = 722] = \"ERC721_TOKEN_ID_NOT_IN_BALANCE\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID\"] = 723] = \"ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC1155_BALANCE_OF_DOES_NOT_EXIST\"] = 731] = \"ERC1155_BALANCE_OF_DOES_NOT_EXIST\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT\"] = 732] = \"ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST\"] = 733] = \"ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST\";\n    OrderValidatorEnum[OrderValidatorEnum[\"ERC1155_NO_APPROVAL_FOR_ALL\"] = 734] = \"ERC1155_NO_APPROVAL_FOR_ALL\";\n})(OrderValidatorEnum || (OrderValidatorEnum = {}));\n\nconst mainnetAddresses = {\n    LOOKS: \"0xf4d2888d29D722226FafA5d9B24F9164c092421E\",\n    LOOKS_LP: \"0xDC00bA87Cc2D99468f7f34BC04CBf72E111A32f7\",\n    WETH: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    ROYALTY_FEE_MANAGER: \"0xCBfebA41C3e69d24B5C8b04Ed60C42CC5D883620\",\n    ROYALTY_FEE_REGISTRY: \"0x55010472a93921a117aAD9b055c141060c8d8022\",\n    ROYALTY_FEE_SETTER: \"0x66466107d9cAE4da0176a699406419003F3C27a8\",\n    EXCHANGE: \"0x59728544B08AB483533076417FbBB2fD0B17CE3a\",\n    TRANSFER_MANAGER_ERC721: \"0xf42aa99F011A1fA7CDA90E5E98b277E306BcA83e\",\n    TRANSFER_MANAGER_ERC1155: \"0xFED24eC7E22f573c2e08AEF55aA6797Ca2b3A051\",\n    TRANSFER_SELECTOR_NFT: \"0x9Ba628F27aAc9B2D78A9f2Bf40A8a6DF4Ccd9e2c\",\n    STRATEGY_STANDARD_SALE_DEPRECATED: \"0x56244Bb70CbD3EA9Dc8007399F61dFC065190031\",\n    STRATEGY_COLLECTION_SALE_DEPRECATED: \"0x86F909F70813CdB1Bc733f4D97Dc6b03B8e7E8F3\",\n    STRATEGY_STANDARD_SALE: \"0x579af6FD30BF83a5Ac0D636bc619f98DBdeb930c\",\n    STRATEGY_COLLECTION_SALE: \"0x09F93623019049c76209C26517AcC2aF9d49c69b\",\n    STRATEGY_PRIVATE_SALE: \"0x58D83536D3EfeDB9F7f2A1Ec3BDaad2b1A4DD98C\",\n    STRATEGY_DUTCH_AUCTION: \"0x3E80795Cae5Ee215EBbDf518689467Bf4243BAe0\",\n    PRIVATE_SALE_WITH_FEE_SHARING: \"0x9571cdD8ACB71C83393290F0D63A46173dddE65B\",\n    FEE_SHARING_SYSTEM: \"0xBcD7254A1D759EFA08eC7c3291B2E85c5dCC12ce\",\n    STAKING_POOL_FOR_LOOKS_LP: \"0x2A70e7F51f6cd40C3E9956aa964137668cBfAdC5\",\n    TOKEN_DISTRIBUTOR: \"0x465A790B428268196865a3AE2648481ad7e0d3b1\",\n    TRADING_REWARDS_DISTRIBUTOR: \"0x453c1208B400fE47aCF275315F14E8F9F9fbC3cD\",\n    MULTI_REWARDS_DISTRIBUTOR: \"0x0554f068365eD43dcC98dcd7Fd7A8208a5638C72\",\n    MULTICALL2: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n    REVERSE_RECORDS: \"0x3671aE578E63FdF66ad4F3E12CC0c0d71Ac7510C\",\n    AGGREGATOR_UNISWAP_V3: \"0x3ab16Af1315dc6C95F83Cbf522fecF98D00fd9ba\",\n    EXECUTION_MANAGER: \"0x9Cc58bf22a173C0Fa8791c13Df396d18185d62b2\",\n    CURRENCY_MANAGER: \"0xC881ADdf409eE2C4b6bBc8B607c2C5CAFaB93d25\",\n    ORDER_VALIDATOR_V1: \"0xdC56dE26C64B14f1A8e95582A16b6A9AEfEEd395\",\n};\nconst goerliAddresses = {\n    LOOKS: \"0x20A5A36ded0E4101C3688CBC405bBAAE58fE9eeC\",\n    LOOKS_LP: \"\",\n    WETH: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n    ROYALTY_FEE_MANAGER: \"0x37Ac5Af9eE9394F4356E0C7aaBeF3c93731A5c90\",\n    ROYALTY_FEE_REGISTRY: \"0x12405dB79325D06a973aD913D6e9BdA1343cD526\",\n    ROYALTY_FEE_SETTER: \"0x73d3922426f7F27DF51E9cd7B8B2A0e435abCa06\",\n    EXCHANGE: \"0xD112466471b5438C1ca2D218694200e49d81D047\",\n    TRANSFER_MANAGER_ERC721: \"0xF8C81f3ae82b6EFC9154c69E3db57fD4da57aB6E\",\n    TRANSFER_MANAGER_ERC1155: \"0xF2ae42e871937F4e9ffb394C5A814357C16e06d6\",\n    TRANSFER_SELECTOR_NFT: \"0x1b03835903D54dd4DB41F04B07188C0f7645edD7\",\n    STRATEGY_STANDARD_SALE_DEPRECATED: \"0xc771c0A3a7d738A1E12Aa88829A658bAefb32f0f\",\n    STRATEGY_COLLECTION_SALE_DEPRECATED: \"0xeF722abf61a1937E76DAcFcd58d51c2358dE7D1A\",\n    STRATEGY_STANDARD_SALE: \"0x6ACbeb7f6E225FbC0D1CEe27a40ADC49E7277E57\",\n    STRATEGY_COLLECTION_SALE: \"0xAfb81825DC076500BF19CBf69d443684F2EBd3f6\",\n    STRATEGY_PRIVATE_SALE: \"0x6122D4B50B0e2b7D76e63C537038c69d71317943\",\n    STRATEGY_DUTCH_AUCTION: \"0x550fBf31d44f72bA7b4e4bf567C72463C4d6CEDB\",\n    PRIVATE_SALE_WITH_FEE_SHARING: \"\",\n    FEE_SHARING_SYSTEM: \"0x8A29E7b241A32158Fd7F267d484199aAD8dd2E31\",\n    STAKING_POOL_FOR_LOOKS_LP: \"\",\n    TOKEN_DISTRIBUTOR: \"0x861fDb71CCc266b3c0A4b8da8A929E52E83F5e7c\",\n    TRADING_REWARDS_DISTRIBUTOR: \"\",\n    MULTI_REWARDS_DISTRIBUTOR: \"0xdC6dC8d1B784890BA2c38947218F89E963EC2673\",\n    MULTICALL2: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n    REVERSE_RECORDS: \"0x333Fc8f550043f239a2CF79aEd5e9cF4A20Eb41e\",\n    AGGREGATOR_UNISWAP_V3: \"0x63c38B3BE3eF075a00a5edaeC36F499088c7334C\",\n    EXECUTION_MANAGER: \"0x972B3A1A89ABb5e489163345E3C44Ab1bB813986\",\n    CURRENCY_MANAGER: \"0xAC56740Fa471C0266B59B101C76Ab771f199F2eA\",\n    ORDER_VALIDATOR_V1: \"0xdD6178143Fb0a16DEC9261498F6007a7468D7Aea\",\n};\nconst addressesByNetwork = {\n    [SupportedChainId.MAINNET]: mainnetAddresses,\n    [SupportedChainId.GOERLI]: goerliAddresses,\n    [SupportedChainId.HARDHAT]: goerliAddresses,\n};\n\nconst CHAIN_INFO = {\n    [SupportedChainId.MAINNET]: {\n        label: \"Ethereum\",\n        appUrl: \"https://looksrare.org\",\n        explorer: \"https://etherscan.io\",\n        rpcUrl: `https://eth-mainnet.g.alchemy.com/v2`,\n        apiUrl: \"https://graphql.looksrare.org/graphql\",\n        osApiUrl: \"https://api.opensea.io\",\n        cdnUrl: \"https://static.looksnice.org\",\n        rewardsSubgraphUrl: \"https://api.thegraph.com/subgraphs/name/looksrare/looks-distribution\",\n        cloudinaryUrl: \"https://looksrare.mo.cloudinary.net\",\n    },\n    [SupportedChainId.GOERLI]: {\n        label: \"Goerli\",\n        appUrl: \"https://goerli.looksrare.org\",\n        explorer: \"https://goerli.etherscan.io\",\n        rpcUrl: `https://eth-goerli.g.alchemy.com/v2`,\n        apiUrl: \"https://graphql-goerli.looksrare.org/graphql\",\n        osApiUrl: \"https://testnets-api.opensea.io\",\n        cdnUrl: \"https://static-goerli.looksnice.org\",\n        rewardsSubgraphUrl: \"https://api.thegraph.com/subgraphs/name/0xjurassicpunk/looks-distribution\",\n        cloudinaryUrl: \"https://looksrare.mo.cloudinary.net/goerli\",\n    },\n    [SupportedChainId.HARDHAT]: {\n        label: \"Hardhat\",\n        appUrl: \"http://localhost:3000\",\n        explorer: \"https://etherscan.io\",\n        rpcUrl: \"http://127.0.0.1:8545\",\n        apiUrl: \"http://localhost:4000/graphql\",\n        osApiUrl: \"https://testnets-api.opensea.io\",\n        cdnUrl: \"https://via.placeholder.com\",\n        rewardsSubgraphUrl: \"https://api.thegraph.com/subgraphs/name/0xjurassicpunk/looks-distribution\",\n        cloudinaryUrl: \"\",\n    },\n};\nconst isSupportedChain = (chainId) => {\n    return Object.values(SupportedChainId).includes(chainId);\n};\n\nconst minNetPriceRatio = 9800;\nconst minNetPriceRatioDeprecated = 9750;\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nvar Wallet;\n(function (Wallet) {\n    Wallet[Wallet[\"METAMASK\"] = 0] = \"METAMASK\";\n    Wallet[Wallet[\"FRAME\"] = 1] = \"FRAME\";\n    Wallet[Wallet[\"OTHER\"] = 2] = \"OTHER\";\n})(Wallet || (Wallet = {}));\n/**\n * Return the user wallet\n * Never use server side\n * @returns Wallet\n */\nconst getCurrentWallet = (provider) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const isMetaMask = provider.connection.url === \"metamask\";\n    const isFrame = (_a = provider.provider) === null || _a === void 0 ? void 0 : _a.isFrame;\n    if (isMetaMask) {\n        return Wallet.METAMASK;\n    }\n    if (isFrame) {\n        return Wallet.FRAME;\n    }\n    return Wallet.OTHER;\n});\n/**\n * Copy of ethers '_signTypedData' helper, modified to support EIP-712 typed signatures with different call names\n * https://github.com/ethers-io/ethers.js/blob/73a46efea32c3f9a4833ed77896a216e3d3752a0/packages/providers/src.ts/json-rpc-provider.ts#L263\n * TESTED WITH - MetaMask, Frame, Coinbase Wallet, WalletConnect: Trust, Rainbow, MetaMask Mobile, SafePal, TokenPocket, Math Wallet\n * NOT CURRENTLY SUPPORTED - Trezor\n */\nconst etherSignTypedData = (provider, address, domain, types, value) => __awaiter(void 0, void 0, void 0, function* () {\n    // Populate any ENS names (in-place)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n        return provider.resolveName(name);\n    });\n    const rpcData = _TypedDataEncoder.getPayload(populated.domain, types, populated.value);\n    const wallet = yield getCurrentWallet(provider);\n    if (wallet === Wallet.METAMASK || wallet === Wallet.FRAME) {\n        return yield provider.send(\"eth_signTypedData_v4\", [address, JSON.stringify(rpcData)]); // MetaMask, Frame\n    }\n    return yield provider.send(\"eth_signTypedData\", [address, JSON.stringify(rpcData)]); // CoinBase wallet. WalletConnect: Trust, MetaMask Mobile, Rainbow, SafePal\n});\n\nconst version = 1;\n/**\n * Get LR typed data for creating maker orders.\n * Use with a signTypedData function.\n * @see https://eips.ethereum.org/EIPS/eip-712\n * @param chainId Current chain id\n * @param verifyingContract Exchange contract address\n * @returns { type: Record<string, TypedDataField[]>, domain: TypedDataDomain }\n */\nconst getMakerOrderTypeAndDomain = (chainId, verifyingContract) => {\n    const domain = {\n        name: \"LooksRareExchange\",\n        version: version.toString(),\n        chainId,\n        verifyingContract: verifyingContract ? verifyingContract : addressesByNetwork[chainId].EXCHANGE,\n    };\n    const type = {\n        MakerOrder: [\n            { name: \"isOrderAsk\", type: \"bool\" },\n            { name: \"signer\", type: \"address\" },\n            { name: \"collection\", type: \"address\" },\n            { name: \"price\", type: \"uint256\" },\n            { name: \"tokenId\", type: \"uint256\" },\n            { name: \"amount\", type: \"uint256\" },\n            { name: \"strategy\", type: \"address\" },\n            { name: \"currency\", type: \"address\" },\n            { name: \"nonce\", type: \"uint256\" },\n            { name: \"startTime\", type: \"uint256\" },\n            { name: \"endTime\", type: \"uint256\" },\n            { name: \"minPercentageToAsk\", type: \"uint256\" },\n            { name: \"params\", type: \"bytes\" },\n        ],\n    };\n    return {\n        type,\n        domain,\n    };\n};\n\n/**\n * Given an array of params, return the params types, and the encoded params.\n * To be used for orders signature and orders execution\n * @param params array of params\n * @returns param types and encoded params\n */\nconst encodeOrderParams = (params) => {\n    const nonNullParams = params || [];\n    const paramsTypes = nonNullParams.map((param) => {\n        if (utils.isAddress(param)) {\n            return \"address\";\n        }\n        if (typeof param === \"boolean\") {\n            return \"bool\";\n        }\n        try {\n            BigNumber.from(param);\n            return \"uint256\";\n        }\n        catch (error) {\n            throw Error(\"Params have unsupported solidity types\");\n        }\n    });\n    return { paramsTypes, encodedParams: utils.defaultAbiCoder.encode(paramsTypes, nonNullParams) };\n};\n\nconst generateMakerOrderTypedData = (signerAddress, chainId, order, verifyingContractAddress) => {\n    const { domain, type } = getMakerOrderTypeAndDomain(chainId, verifyingContractAddress);\n    const { encodedParams } = encodeOrderParams(order.params);\n    const value = Object.assign(Object.assign({}, order), { signer: signerAddress, params: encodedParams });\n    return { domain, type, value };\n};\n\n/**\n * Create a signature for a maker order\n * @param signer user signer\n * @param chainId current chain id\n * @param verifyingContractAddress Looksrare exchange contract address\n * @param order see MakerOrder\n * @returns String signature\n */\nconst signMakerOrder = (signer, chainId, order, verifyingContractAddress) => __awaiter(void 0, void 0, void 0, function* () {\n    const signerAddress = yield signer.getAddress();\n    const { domain, type, value } = generateMakerOrderTypedData(signerAddress, chainId, order, verifyingContractAddress);\n    const signatureHash = yield etherSignTypedData(signer.provider, signerAddress, domain, type, value);\n    return signatureHash;\n});\n\n/**\n * Batch multiple calls to contracts with the same abi to reduce rpc calls and increase response time.\n *\n * @param provider ethers.js provider\n * @param address multicall address\n * @param abi abi generated from the contract code\n * @param calls Array of Call objects to run through multicall\n */\nconst multicall = (provider, address, abi, calls) => __awaiter(void 0, void 0, void 0, function* () {\n    // Setup contracts\n    const multicallContract = new Contract(address, multicall2Abi, provider);\n    const itf = new Interface(abi);\n    const calldata = calls.map((call) => [\n        call.contractAddress.toLowerCase(),\n        itf.encodeFunctionData(call.functionName, call.params),\n    ]);\n    const { returnData } = yield multicallContract.callStatic.aggregate(calldata);\n    // [From ethers.js docs]: https://docs.ethers.io/v5/api/utils/abi/interface/#Interface--decoding\n    // Decoding structured data returns a Result object, which\n    // will include all values positionally and if the ABI\n    // included names, values will additionally be available\n    // by their name.\n    const results = returnData.map((data, i) => {\n        const [result] = itf.decodeFunctionResult(calls[i].functionName, data);\n        return result;\n    });\n    return results;\n});\n\nexport { AggregatorFeeSharingWithUniswapV3 as AggregatorFeeSharingWithUniswapV3Abi, CHAIN_INFO, CurrencyManagerAbi, ERC1155 as ERC1155Abi, ERC20 as ERC20Abi, ERC721 as ERC721Abi, ExecutionManager as ExecutionManagerAbi, FeeSharingSystem as FeeSharingSystemAbi, IExecutionStrategy as IExecutionStrategyAbi, LooksRareAirdrop as LooksRareAirdropAbi, LooksRareExchange as LooksRareExchangeAbi, MultiRewardsDistributor as MultiRewardsDistributorAbi, multicall2Abi as Multicall2Abi, OrderValidatorEnum, OrderValidatorV1 as OrderValidatorV1Abi, PrivateSaleWithFeeSharing as PrivateSaleWithFeeSharingAbi, ReverseRecords as ReverseRecordsAbi, RoyaltyFeeManager as RoyaltyFeeManagerAbi, RoyaltyFeeRegistry as RoyaltyFeeRegistryAbi, RoyaltyFeeSetter as RoyaltyFeeSetterAbi, StakingPoolForUniswapV2Tokens as StakingPoolForUniswapV2TokensAbi, SupportedChainId, TokenDistributor as TokenDistributorAbi, TradingRewardsDistributor as TradingRewardsDistributorAbi, TransferSelectorNFT as TransferSelectorNFTAbi, WETH as WETHAbi, addressesByNetwork, encodeOrderParams, generateMakerOrderTypedData, getMakerOrderTypeAndDomain, isSupportedChain, minNetPriceRatio, minNetPriceRatioDeprecated, multicall, signMakerOrder };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DomainRegistryABI = void 0;\nvar DomainRegistryABI = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"domain\",\n                type: \"string\",\n            },\n        ],\n        name: \"DomainAlreadyRegistered\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"tag\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"maxIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"suppliedIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DomainIndexOutOfRange\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"domain\",\n                type: \"string\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes4\",\n                name: \"tag\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DomainRegistered\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"tag\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"index\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getDomain\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"domain\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"tag\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"getDomains\",\n        outputs: [\n            {\n                internalType: \"string[]\",\n                name: \"domains\",\n                type: \"string[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"tag\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"getNumberOfDomains\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"totalDomains\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"domain\",\n                type: \"string\",\n            },\n        ],\n        name: \"setDomain\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"tag\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nexports.DomainRegistryABI = DomainRegistryABI;\n//# sourceMappingURL=DomainRegistry.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERC1155ABI = void 0;\nvar ERC1155ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256[]\",\n                name: \"amounts\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"TransferBatch\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TransferSingle\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"string\",\n                name: \"value\",\n                type: \"string\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"URI\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"owners\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"balanceOfBatch\",\n        outputs: [\n            {\n                internalType: \"uint256[]\",\n                name: \"balances\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"ids\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"amounts\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeBatchTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"uri\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nexports.ERC1155ABI = ERC1155ABI;\n//# sourceMappingURL=ERC1155.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERC20ABI = void 0;\nvar ERC20ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"DOMAIN_SEPARATOR\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PERMIT_TYPEHASH\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"nonces\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"permit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nexports.ERC20ABI = ERC20ABI;\n//# sourceMappingURL=ERC20.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERC721ABI = void 0;\nvar ERC721ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ApprovalForAll\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getApproved\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"isApprovedForAll\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ownerOf\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"safeTransferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"operator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"approved\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setApprovalForAll\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"interfaceId\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"supportsInterface\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"tokenURI\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nexports.ERC721ABI = ERC721ABI;\n//# sourceMappingURL=ERC721.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SeaportABIv14 = void 0;\nvar SeaportABIv14 = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"conduitController\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"BadContractSignature\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"BadFraction\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BadReturnValueFromERC20OnTransfer\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"BadSignatureV\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"CannotCancelOrder\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConsiderationCriteriaResolverOutOfRange\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"ConsiderationLengthNotEqualToTotalOriginal\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"orderIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"considerationIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"shortfallAmount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ConsiderationNotMet\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"CriteriaNotEnabledForItem\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"identifiers\",\n                type: \"uint256[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"amounts\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"ERC1155BatchTransferGenericFailure\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"EtherTransferGenericFailure\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InexactFraction\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientEtherSupplied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"Invalid1155BatchTransferEncoding\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidBasicOrderParameterEncoding\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"conduit\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidCallToConduit\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"conduitKey\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"conduit\",\n                type: \"address\",\n            },\n        ],\n        name: \"InvalidConduit\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"InvalidContractOrder\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"InvalidERC721TransferAmount\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidFulfillmentComponentData\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"InvalidMsgValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidNativeOfferItem\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidProof\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"InvalidRestrictedOrder\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSignature\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSigner\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"startTime\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"endTime\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"InvalidTime\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"fulfillmentIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"MismatchedFulfillmentOfferAndConsiderationComponents\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"enum Side\",\n                name: \"side\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"MissingFulfillmentComponentOnAggregation\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"MissingItemAmount\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"MissingOriginalConsiderationItems\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"NoContract\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NoReentrantCalls\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NoSpecifiedOrdersAvailable\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"OfferAndConsiderationRequiredOnFulfillment\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"OfferCriteriaResolverOutOfRange\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"OrderAlreadyFilled\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"enum Side\",\n                name: \"side\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"OrderCriteriaResolverOutOfRange\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"OrderIsCancelled\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"OrderPartiallyFilled\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"PartialFillsNotEnabledForOrder\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"identifier\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"TokenTransferGenericFailure\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"orderIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"considerationIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UnresolvedConsiderationCriteria\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"orderIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"offerIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"UnresolvedOfferCriteria\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"UnusedItemParameters\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newCounter\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"offerer\",\n                type: \"address\",\n            },\n        ],\n        name: \"CounterIncremented\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"offerer\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"zone\",\n                type: \"address\",\n            },\n        ],\n        name: \"OrderCancelled\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"offerer\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"zone\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum ItemType\",\n                        name: \"itemType\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"token\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"identifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amount\",\n                        type: \"uint256\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct SpentItem[]\",\n                name: \"offer\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"enum ItemType\",\n                        name: \"itemType\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"token\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"identifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"amount\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address payable\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct ReceivedItem[]\",\n                name: \"consideration\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"OrderFulfilled\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"zone\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifierOrCriteria\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endAmount\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OfferItem[]\",\n                        name: \"offer\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifierOrCriteria\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ConsiderationItem[]\",\n                        name: \"consideration\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"enum OrderType\",\n                        name: \"orderType\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"zoneHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"salt\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"totalOriginalConsiderationItems\",\n                        type: \"uint256\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct OrderParameters\",\n                name: \"orderParameters\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"OrderValidated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bytes32[]\",\n                name: \"orderHashes\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"OrdersMatched\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"zone\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifierOrCriteria\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endAmount\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OfferItem[]\",\n                        name: \"offer\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifierOrCriteria\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ConsiderationItem[]\",\n                        name: \"consideration\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"enum OrderType\",\n                        name: \"orderType\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"zoneHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"salt\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"counter\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct OrderComponents[]\",\n                name: \"orders\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"cancel\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"cancelled\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"uint120\",\n                        name: \"numerator\",\n                        type: \"uint120\",\n                    },\n                    {\n                        internalType: \"uint120\",\n                        name: \"denominator\",\n                        type: \"uint120\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"extraData\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct AdvancedOrder\",\n                name: \"advancedOrder\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"enum Side\",\n                        name: \"side\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"index\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"identifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32[]\",\n                        name: \"criteriaProof\",\n                        type: \"bytes32[]\",\n                    },\n                ],\n                internalType: \"struct CriteriaResolver[]\",\n                name: \"criteriaResolvers\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"fulfillerConduitKey\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"fulfillAdvancedOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"fulfilled\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"uint120\",\n                        name: \"numerator\",\n                        type: \"uint120\",\n                    },\n                    {\n                        internalType: \"uint120\",\n                        name: \"denominator\",\n                        type: \"uint120\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"extraData\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct AdvancedOrder[]\",\n                name: \"advancedOrders\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"enum Side\",\n                        name: \"side\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"index\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"identifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32[]\",\n                        name: \"criteriaProof\",\n                        type: \"bytes32[]\",\n                    },\n                ],\n                internalType: \"struct CriteriaResolver[]\",\n                name: \"criteriaResolvers\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"itemIndex\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct FulfillmentComponent[][]\",\n                name: \"offerFulfillments\",\n                type: \"tuple[][]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"itemIndex\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct FulfillmentComponent[][]\",\n                name: \"considerationFulfillments\",\n                type: \"tuple[][]\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"fulfillerConduitKey\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"maximumFulfilled\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"fulfillAvailableAdvancedOrders\",\n        outputs: [\n            {\n                internalType: \"bool[]\",\n                name: \"availableOrders\",\n                type: \"bool[]\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifier\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"amount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ReceivedItem\",\n                        name: \"item\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct Execution[]\",\n                name: \"executions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Order[]\",\n                name: \"orders\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"itemIndex\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct FulfillmentComponent[][]\",\n                name: \"offerFulfillments\",\n                type: \"tuple[][]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"itemIndex\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct FulfillmentComponent[][]\",\n                name: \"considerationFulfillments\",\n                type: \"tuple[][]\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"fulfillerConduitKey\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"maximumFulfilled\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"fulfillAvailableOrders\",\n        outputs: [\n            {\n                internalType: \"bool[]\",\n                name: \"availableOrders\",\n                type: \"bool[]\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifier\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"amount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ReceivedItem\",\n                        name: \"item\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct Execution[]\",\n                name: \"executions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"considerationToken\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"considerationIdentifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"considerationAmount\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"address payable\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"zone\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"offerToken\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"offerIdentifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"offerAmount\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"enum BasicOrderType\",\n                        name: \"basicOrderType\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"zoneHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"salt\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"offererConduitKey\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"fulfillerConduitKey\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"totalOriginalAdditionalRecipients\",\n                        type: \"uint256\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint256\",\n                                name: \"amount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct AdditionalRecipient[]\",\n                        name: \"additionalRecipients\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct BasicOrderParameters\",\n                name: \"parameters\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"fulfillBasicOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"fulfilled\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Order\",\n                name: \"order\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"fulfillerConduitKey\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"fulfillOrder\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"fulfilled\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"contractOfferer\",\n                type: \"address\",\n            },\n        ],\n        name: \"getContractOffererNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"offerer\",\n                type: \"address\",\n            },\n        ],\n        name: \"getCounter\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"counter\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"zone\",\n                        type: \"address\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifierOrCriteria\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endAmount\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OfferItem[]\",\n                        name: \"offer\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifierOrCriteria\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endAmount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ConsiderationItem[]\",\n                        name: \"consideration\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"enum OrderType\",\n                        name: \"orderType\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"startTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"endTime\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"zoneHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"salt\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"counter\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct OrderComponents\",\n                name: \"order\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"getOrderHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"orderHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getOrderStatus\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"isValidated\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"isCancelled\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"totalFilled\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"totalSize\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"incrementCounter\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"newCounter\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"information\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"domainSeparator\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"conduitController\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"uint120\",\n                        name: \"numerator\",\n                        type: \"uint120\",\n                    },\n                    {\n                        internalType: \"uint120\",\n                        name: \"denominator\",\n                        type: \"uint120\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"extraData\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct AdvancedOrder[]\",\n                name: \"orders\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"orderIndex\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"enum Side\",\n                        name: \"side\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"index\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"identifier\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32[]\",\n                        name: \"criteriaProof\",\n                        type: \"bytes32[]\",\n                    },\n                ],\n                internalType: \"struct CriteriaResolver[]\",\n                name: \"criteriaResolvers\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint256\",\n                                name: \"orderIndex\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"itemIndex\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct FulfillmentComponent[]\",\n                        name: \"offerComponents\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint256\",\n                                name: \"orderIndex\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"itemIndex\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct FulfillmentComponent[]\",\n                        name: \"considerationComponents\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct Fulfillment[]\",\n                name: \"fulfillments\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"matchAdvancedOrders\",\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifier\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"amount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ReceivedItem\",\n                        name: \"item\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct Execution[]\",\n                name: \"executions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Order[]\",\n                name: \"orders\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"uint256\",\n                                name: \"orderIndex\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"itemIndex\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct FulfillmentComponent[]\",\n                        name: \"offerComponents\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint256\",\n                                name: \"orderIndex\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"itemIndex\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct FulfillmentComponent[]\",\n                        name: \"considerationComponents\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct Fulfillment[]\",\n                name: \"fulfillments\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"matchOrders\",\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"enum ItemType\",\n                                name: \"itemType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"token\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"identifier\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"amount\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"address payable\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                        ],\n                        internalType: \"struct ReceivedItem\",\n                        name: \"item\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"offerer\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"conduitKey\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct Execution[]\",\n                name: \"executions\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"contractName\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"offerer\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"address\",\n                                name: \"zone\",\n                                type: \"address\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                ],\n                                internalType: \"struct OfferItem[]\",\n                                name: \"offer\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: \"enum ItemType\",\n                                        name: \"itemType\",\n                                        type: \"uint8\",\n                                    },\n                                    {\n                                        internalType: \"address\",\n                                        name: \"token\",\n                                        type: \"address\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"identifierOrCriteria\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"startAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"uint256\",\n                                        name: \"endAmount\",\n                                        type: \"uint256\",\n                                    },\n                                    {\n                                        internalType: \"address payable\",\n                                        name: \"recipient\",\n                                        type: \"address\",\n                                    },\n                                ],\n                                internalType: \"struct ConsiderationItem[]\",\n                                name: \"consideration\",\n                                type: \"tuple[]\",\n                            },\n                            {\n                                internalType: \"enum OrderType\",\n                                name: \"orderType\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"startTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"endTime\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"zoneHash\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"salt\",\n                                type: \"uint256\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"conduitKey\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"totalOriginalConsiderationItems\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct OrderParameters\",\n                        name: \"parameters\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Order[]\",\n                name: \"orders\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"validate\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"validated\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nexports.SeaportABIv14 = SeaportABIv14;\n//# sourceMappingURL=Seaport_v1_4.js.map","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DOMAIN_REGISTRY_ADDRESS = exports.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS = exports.CROSS_CHAIN_SEAPORT_V1_4_ADDRESS = exports.KNOWN_CONDUIT_KEYS_TO_CONDUIT = exports.NO_CONDUIT = exports.ONE_HUNDRED_PERCENT_BP = exports.MAX_INT = exports.BasicOrderRouteType = exports.Side = exports.ItemType = exports.OrderType = exports.EIP_712_BULK_ORDER_TYPE = exports.EIP_712_ORDER_TYPE = exports.OPENSEA_CONDUIT_ADDRESS = exports.OPENSEA_CONDUIT_KEY = exports.SEAPORT_CONTRACT_VERSION_V1_5 = exports.SEAPORT_CONTRACT_VERSION_V1_4 = exports.SEAPORT_CONTRACT_NAME = void 0;\nvar ethers_1 = require(\"ethers\");\nexports.SEAPORT_CONTRACT_NAME = \"Seaport\";\nexports.SEAPORT_CONTRACT_VERSION_V1_4 = \"1.4\";\nexports.SEAPORT_CONTRACT_VERSION_V1_5 = \"1.5\";\nexports.OPENSEA_CONDUIT_KEY = \"0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000\";\nexports.OPENSEA_CONDUIT_ADDRESS = \"0x1e0049783f008a0085193e00003d00cd54003c71\";\nexports.EIP_712_ORDER_TYPE = {\n    OrderComponents: [\n        { name: \"offerer\", type: \"address\" },\n        { name: \"zone\", type: \"address\" },\n        { name: \"offer\", type: \"OfferItem[]\" },\n        { name: \"consideration\", type: \"ConsiderationItem[]\" },\n        { name: \"orderType\", type: \"uint8\" },\n        { name: \"startTime\", type: \"uint256\" },\n        { name: \"endTime\", type: \"uint256\" },\n        { name: \"zoneHash\", type: \"bytes32\" },\n        { name: \"salt\", type: \"uint256\" },\n        { name: \"conduitKey\", type: \"bytes32\" },\n        { name: \"counter\", type: \"uint256\" },\n    ],\n    OfferItem: [\n        { name: \"itemType\", type: \"uint8\" },\n        { name: \"token\", type: \"address\" },\n        { name: \"identifierOrCriteria\", type: \"uint256\" },\n        { name: \"startAmount\", type: \"uint256\" },\n        { name: \"endAmount\", type: \"uint256\" },\n    ],\n    ConsiderationItem: [\n        { name: \"itemType\", type: \"uint8\" },\n        { name: \"token\", type: \"address\" },\n        { name: \"identifierOrCriteria\", type: \"uint256\" },\n        { name: \"startAmount\", type: \"uint256\" },\n        { name: \"endAmount\", type: \"uint256\" },\n        { name: \"recipient\", type: \"address\" },\n    ],\n};\nexports.EIP_712_BULK_ORDER_TYPE = {\n    BulkOrder: [{ name: \"tree\", type: \"OrderComponents[2][2][2][2][2][2][2]\" }],\n    OrderComponents: [\n        { name: \"offerer\", type: \"address\" },\n        { name: \"zone\", type: \"address\" },\n        { name: \"offer\", type: \"OfferItem[]\" },\n        { name: \"consideration\", type: \"ConsiderationItem[]\" },\n        { name: \"orderType\", type: \"uint8\" },\n        { name: \"startTime\", type: \"uint256\" },\n        { name: \"endTime\", type: \"uint256\" },\n        { name: \"zoneHash\", type: \"bytes32\" },\n        { name: \"salt\", type: \"uint256\" },\n        { name: \"conduitKey\", type: \"bytes32\" },\n        { name: \"counter\", type: \"uint256\" },\n    ],\n    OfferItem: [\n        { name: \"itemType\", type: \"uint8\" },\n        { name: \"token\", type: \"address\" },\n        { name: \"identifierOrCriteria\", type: \"uint256\" },\n        { name: \"startAmount\", type: \"uint256\" },\n        { name: \"endAmount\", type: \"uint256\" },\n    ],\n    ConsiderationItem: [\n        { name: \"itemType\", type: \"uint8\" },\n        { name: \"token\", type: \"address\" },\n        { name: \"identifierOrCriteria\", type: \"uint256\" },\n        { name: \"startAmount\", type: \"uint256\" },\n        { name: \"endAmount\", type: \"uint256\" },\n        { name: \"recipient\", type: \"address\" },\n    ],\n};\nvar OrderType;\n(function (OrderType) {\n    OrderType[OrderType[\"FULL_OPEN\"] = 0] = \"FULL_OPEN\";\n    OrderType[OrderType[\"PARTIAL_OPEN\"] = 1] = \"PARTIAL_OPEN\";\n    OrderType[OrderType[\"FULL_RESTRICTED\"] = 2] = \"FULL_RESTRICTED\";\n    OrderType[OrderType[\"PARTIAL_RESTRICTED\"] = 3] = \"PARTIAL_RESTRICTED\";\n})(OrderType = exports.OrderType || (exports.OrderType = {}));\nvar ItemType;\n(function (ItemType) {\n    ItemType[ItemType[\"NATIVE\"] = 0] = \"NATIVE\";\n    ItemType[ItemType[\"ERC20\"] = 1] = \"ERC20\";\n    ItemType[ItemType[\"ERC721\"] = 2] = \"ERC721\";\n    ItemType[ItemType[\"ERC1155\"] = 3] = \"ERC1155\";\n    ItemType[ItemType[\"ERC721_WITH_CRITERIA\"] = 4] = \"ERC721_WITH_CRITERIA\";\n    ItemType[ItemType[\"ERC1155_WITH_CRITERIA\"] = 5] = \"ERC1155_WITH_CRITERIA\";\n})(ItemType = exports.ItemType || (exports.ItemType = {}));\nvar Side;\n(function (Side) {\n    Side[Side[\"OFFER\"] = 0] = \"OFFER\";\n    Side[Side[\"CONSIDERATION\"] = 1] = \"CONSIDERATION\";\n})(Side = exports.Side || (exports.Side = {}));\nvar BasicOrderRouteType;\n(function (BasicOrderRouteType) {\n    BasicOrderRouteType[BasicOrderRouteType[\"ETH_TO_ERC721\"] = 0] = \"ETH_TO_ERC721\";\n    BasicOrderRouteType[BasicOrderRouteType[\"ETH_TO_ERC1155\"] = 1] = \"ETH_TO_ERC1155\";\n    BasicOrderRouteType[BasicOrderRouteType[\"ERC20_TO_ERC721\"] = 2] = \"ERC20_TO_ERC721\";\n    BasicOrderRouteType[BasicOrderRouteType[\"ERC20_TO_ERC1155\"] = 3] = \"ERC20_TO_ERC1155\";\n    BasicOrderRouteType[BasicOrderRouteType[\"ERC721_TO_ERC20\"] = 4] = \"ERC721_TO_ERC20\";\n    BasicOrderRouteType[BasicOrderRouteType[\"ERC1155_TO_ERC20\"] = 5] = \"ERC1155_TO_ERC20\";\n})(BasicOrderRouteType = exports.BasicOrderRouteType || (exports.BasicOrderRouteType = {}));\nexports.MAX_INT = ethers_1.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nexports.ONE_HUNDRED_PERCENT_BP = 10000;\nexports.NO_CONDUIT = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n// Supply here any known conduit keys as well as their conduits\nexports.KNOWN_CONDUIT_KEYS_TO_CONDUIT = (_a = {},\n    _a[exports.OPENSEA_CONDUIT_KEY] = exports.OPENSEA_CONDUIT_ADDRESS,\n    _a);\nexports.CROSS_CHAIN_SEAPORT_V1_4_ADDRESS = \"0x00000000000001ad428e4906aE43D8F9852d0dD6\";\nexports.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS = \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\";\nexports.DOMAIN_REGISTRY_ADDRESS = \"0x000000000DaD0DE04D2B2D4a5A74581EBA94124A\";\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Seaport = void 0;\nvar seaport_1 = require(\"./seaport\");\nObject.defineProperty(exports, \"Seaport\", { enumerable: true, get: function () { return seaport_1.Seaport; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Seaport = void 0;\nvar multicall_1 = require(\"@0xsequence/multicall\");\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar DomainRegistry_1 = require(\"./abi/DomainRegistry\");\nvar Seaport_v1_4_1 = require(\"./abi/Seaport_v1_4\");\nvar constants_1 = require(\"./constants\");\nvar approval_1 = require(\"./utils/approval\");\nvar balanceAndApprovalCheck_1 = require(\"./utils/balanceAndApprovalCheck\");\nvar bulk_orders_1 = require(\"./utils/eip712/bulk-orders\");\nvar fulfill_1 = require(\"./utils/fulfill\");\nvar item_1 = require(\"./utils/item\");\nvar order_1 = require(\"./utils/order\");\nvar usecase_1 = require(\"./utils/usecase\");\nvar Seaport = /** @class */ (function () {\n    /**\n     * @param providerOrSigner - The provider or signer to use for web3-related calls\n     * @param considerationConfig - A config to provide flexibility in the usage of Seaport\n     */\n    function Seaport(providerOrSigner, _a) {\n        var _b;\n        var _c = _a === void 0 ? {} : _a, overrides = _c.overrides, \n        // Five minute buffer\n        _d = _c.ascendingAmountFulfillmentBuffer, \n        // Five minute buffer\n        ascendingAmountFulfillmentBuffer = _d === void 0 ? 300 : _d, _e = _c.balanceAndApprovalChecksOnOrderCreation, balanceAndApprovalChecksOnOrderCreation = _e === void 0 ? true : _e, conduitKeyToConduit = _c.conduitKeyToConduit, _f = _c.seaportVersion, seaportVersion = _f === void 0 ? \"1.4\" : _f;\n        var _g, _h, _j;\n        this.OPENSEA_CONDUIT_KEY = constants_1.OPENSEA_CONDUIT_KEY;\n        /**\n         * Calculates the order hash of order components so we can forgo executing a request to the contract\n         * This saves us RPC calls and latency.\n         */\n        this.getOrderHash = function (orderComponents) {\n            var offerItemTypeString = \"OfferItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount)\";\n            var considerationItemTypeString = \"ConsiderationItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount,address recipient)\";\n            var orderComponentsPartialTypeString = \"OrderComponents(address offerer,address zone,OfferItem[] offer,ConsiderationItem[] consideration,uint8 orderType,uint256 startTime,uint256 endTime,bytes32 zoneHash,uint256 salt,bytes32 conduitKey,uint256 counter)\";\n            var orderTypeString = \"\".concat(orderComponentsPartialTypeString).concat(considerationItemTypeString).concat(offerItemTypeString);\n            var offerItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(offerItemTypeString));\n            var considerationItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(considerationItemTypeString));\n            var orderTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(orderTypeString));\n            var offerHash = ethers_1.ethers.utils.keccak256(\"0x\" +\n                orderComponents.offer\n                    .map(function (offerItem) {\n                    return ethers_1.ethers.utils\n                        .keccak256(\"0x\" +\n                        [\n                            offerItemTypeHash.slice(2),\n                            offerItem.itemType.toString().padStart(64, \"0\"),\n                            offerItem.token.slice(2).padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(offerItem.identifierOrCriteria)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(offerItem.startAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(offerItem.endAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                        ].join(\"\"))\n                        .slice(2);\n                })\n                    .join(\"\"));\n            var considerationHash = ethers_1.ethers.utils.keccak256(\"0x\" +\n                orderComponents.consideration\n                    .map(function (considerationItem) {\n                    return ethers_1.ethers.utils\n                        .keccak256(\"0x\" +\n                        [\n                            considerationItemTypeHash.slice(2),\n                            considerationItem.itemType.toString().padStart(64, \"0\"),\n                            considerationItem.token.slice(2).padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(considerationItem.identifierOrCriteria)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(considerationItem.startAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(considerationItem.endAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            considerationItem.recipient.slice(2).padStart(64, \"0\"),\n                        ].join(\"\"))\n                        .slice(2);\n                })\n                    .join(\"\"));\n            var derivedOrderHash = ethers_1.ethers.utils.keccak256(\"0x\" +\n                [\n                    orderTypeHash.slice(2),\n                    orderComponents.offerer.slice(2).padStart(64, \"0\"),\n                    orderComponents.zone.slice(2).padStart(64, \"0\"),\n                    offerHash.slice(2),\n                    considerationHash.slice(2),\n                    orderComponents.orderType.toString().padStart(64, \"0\"),\n                    ethers_1.ethers.BigNumber.from(orderComponents.startTime)\n                        .toHexString()\n                        .slice(2)\n                        .padStart(64, \"0\"),\n                    ethers_1.ethers.BigNumber.from(orderComponents.endTime)\n                        .toHexString()\n                        .slice(2)\n                        .padStart(64, \"0\"),\n                    orderComponents.zoneHash.slice(2),\n                    orderComponents.salt.slice(2).padStart(64, \"0\"),\n                    orderComponents.conduitKey.slice(2).padStart(64, \"0\"),\n                    ethers_1.ethers.BigNumber.from(orderComponents.counter)\n                        .toHexString()\n                        .slice(2)\n                        .padStart(64, \"0\"),\n                ].join(\"\"));\n            return derivedOrderHash;\n        };\n        var provider = providerOrSigner instanceof ethers_1.providers.Provider\n            ? providerOrSigner\n            : providerOrSigner.provider;\n        this.signer = providerOrSigner._isSigner\n            ? providerOrSigner\n            : undefined;\n        if (!provider) {\n            throw new Error(\"Either a provider or custom signer with provider must be provided\");\n        }\n        this.provider = provider;\n        this.multicallProvider = new multicall_1.providers.MulticallProvider(this.provider);\n        this.contract = new ethers_1.Contract((_g = overrides === null || overrides === void 0 ? void 0 : overrides.contractAddress) !== null && _g !== void 0 ? _g : (seaportVersion === \"1.5\"\n            ? constants_1.CROSS_CHAIN_SEAPORT_V1_5_ADDRESS\n            : constants_1.CROSS_CHAIN_SEAPORT_V1_4_ADDRESS), Seaport_v1_4_1.SeaportABIv14, this.multicallProvider);\n        this.domainRegistry = new ethers_1.Contract((_h = overrides === null || overrides === void 0 ? void 0 : overrides.domainRegistryAddress) !== null && _h !== void 0 ? _h : constants_1.DOMAIN_REGISTRY_ADDRESS, DomainRegistry_1.DomainRegistryABI, this.multicallProvider);\n        this.config = {\n            ascendingAmountFulfillmentBuffer: ascendingAmountFulfillmentBuffer,\n            balanceAndApprovalChecksOnOrderCreation: balanceAndApprovalChecksOnOrderCreation,\n            conduitKeyToConduit: __assign(__assign(__assign({}, constants_1.KNOWN_CONDUIT_KEYS_TO_CONDUIT), (_b = {}, _b[constants_1.NO_CONDUIT] = this.contract.address, _b)), conduitKeyToConduit),\n            seaportVersion: seaportVersion,\n        };\n        this.defaultConduitKey = (_j = overrides === null || overrides === void 0 ? void 0 : overrides.defaultConduitKey) !== null && _j !== void 0 ? _j : constants_1.NO_CONDUIT;\n    }\n    /**\n     * Returns a use case that will create an order.\n     * The use case will contain the list of actions necessary to finish creating an order.\n     * The list of actions will either be an approval if approvals are necessary\n     * or a signature request that will then be supplied into the final Order struct, ready to be fulfilled.\n     *\n     * @param input\n     * @param input.conduitKey The conduitKey key to derive where to source your approvals from. Defaults to 0 which refers to the Seaport contract.\n     *                         Another special value is address(1) will refer to the legacy proxy. All other must derive to the specified address.\n     * @param input.zone The zone of the order. Defaults to the zero address.\n     * @param input.startTime The start time of the order. Defaults to the current unix time.\n     * @param input.endTime The end time of the order. Defaults to \"never end\".\n     *                      It is HIGHLY recommended to pass in an explicit end time\n     * @param input.offer The items you are willing to offer. This is a condensed version of the Seaport struct OfferItem for convenience\n     * @param input.consideration The items that will go to their respective recipients upon receiving your offer.\n     * @param input.counter The counter from which to create the order with. Automatically fetched from the contract if not provided\n     * @param input.allowPartialFills Whether to allow the order to be partially filled\n     * @param input.restrictedByZone Whether the order should be restricted by zone\n     * @param input.fees Convenience array to apply fees onto the order. The fees will be deducted from the\n     *                   existing consideration items and then tacked on as new consideration items\n     * @param input.domain An optional domain to be hashed and included in the first four bytes of the random salt.\n     * @param input.salt Arbitrary salt. If not passed in, a random salt will be generated with the first four bytes being the domain hash or empty.\n     * @param input.offerer The order's creator address. Defaults to the first address on the provider.\n     * @param accountAddress Optional address for which to create the order with\n     * @param exactApproval optional boolean to indicate whether the approval should be exact or not\n     * @returns a use case containing the list of actions needed to be performed in order to create the order\n     */\n    Seaport.prototype.createOrder = function (input, accountAddress, exactApproval) {\n        return __awaiter(this, void 0, void 0, function () {\n            var signer, offerer, _a, orderComponents, approvalActions, createOrderAction, actions;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        signer = this._getSigner(accountAddress);\n                        return [4 /*yield*/, signer.getAddress()];\n                    case 1:\n                        offerer = _b.sent();\n                        return [4 /*yield*/, this._formatOrder(signer, offerer, Boolean(exactApproval), input)];\n                    case 2:\n                        _a = _b.sent(), orderComponents = _a.orderComponents, approvalActions = _a.approvalActions;\n                        createOrderAction = {\n                            type: \"create\",\n                            getMessageToSign: function () {\n                                return _this._getMessageToSign(orderComponents);\n                            },\n                            createOrder: function () { return __awaiter(_this, void 0, void 0, function () {\n                                var signature;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.signOrder(orderComponents, offerer)];\n                                        case 1:\n                                            signature = _a.sent();\n                                            return [2 /*return*/, {\n                                                    parameters: orderComponents,\n                                                    signature: signature,\n                                                }];\n                                    }\n                                });\n                            }); },\n                        };\n                        actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [createOrderAction], false);\n                        return [2 /*return*/, {\n                                actions: actions,\n                                executeAllActions: function () {\n                                    return (0, usecase_1.executeAllActions)(actions);\n                                },\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a use case that will create bulk orders.\n     * The use case will contain the list of actions necessary to finish creating the orders.\n     * The list of actions will either be an approval if approvals are necessary\n     * or a signature request that will then be supplied into the final orders, ready to be fulfilled.\n     *\n     * @param input See {@link createOrder} for more details about the input parameters.\n     * @param exactApproval optional boolean to indicate whether the approval should be exact or not\n     * @returns a use case containing the list of actions needed to be performed in order to create the orders\n     */\n    Seaport.prototype.createBulkOrders = function (createOrderInput, accountAddress, exactApproval) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var signer, offerer, offererCounter, allApprovalActions, allOrderComponents, createOrderInput_1, createOrderInput_1_1, input, _b, orderComponents, approvalActions, _loop_1, approvalActions_1, approvalActions_1_1, approval, e_1_1, createBulkOrdersAction, actions;\n            var e_1, _c, e_2, _d;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        signer = this._getSigner(accountAddress);\n                        return [4 /*yield*/, signer.getAddress()];\n                    case 1:\n                        offerer = _e.sent();\n                        return [4 /*yield*/, this.getCounter(offerer)];\n                    case 2:\n                        offererCounter = _e.sent();\n                        allApprovalActions = [];\n                        allOrderComponents = [];\n                        _e.label = 3;\n                    case 3:\n                        _e.trys.push([3, 8, 9, 10]);\n                        createOrderInput_1 = __values(createOrderInput), createOrderInput_1_1 = createOrderInput_1.next();\n                        _e.label = 4;\n                    case 4:\n                        if (!!createOrderInput_1_1.done) return [3 /*break*/, 7];\n                        input = createOrderInput_1_1.value;\n                        (_a = input.counter) !== null && _a !== void 0 ? _a : (input.counter = offererCounter);\n                        return [4 /*yield*/, this._formatOrder(signer, offerer, Boolean(exactApproval), input)];\n                    case 5:\n                        _b = _e.sent(), orderComponents = _b.orderComponents, approvalActions = _b.approvalActions;\n                        allOrderComponents.push(orderComponents);\n                        _loop_1 = function (approval) {\n                            if (allApprovalActions.find(function (a) { return a.token === approval.token; }) ===\n                                undefined) {\n                                allApprovalActions.push(approval);\n                            }\n                        };\n                        try {\n                            // Dedupe approvals by token address\n                            for (approvalActions_1 = (e_2 = void 0, __values(approvalActions)), approvalActions_1_1 = approvalActions_1.next(); !approvalActions_1_1.done; approvalActions_1_1 = approvalActions_1.next()) {\n                                approval = approvalActions_1_1.value;\n                                _loop_1(approval);\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (approvalActions_1_1 && !approvalActions_1_1.done && (_d = approvalActions_1.return)) _d.call(approvalActions_1);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        _e.label = 6;\n                    case 6:\n                        createOrderInput_1_1 = createOrderInput_1.next();\n                        return [3 /*break*/, 4];\n                    case 7: return [3 /*break*/, 10];\n                    case 8:\n                        e_1_1 = _e.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 10];\n                    case 9:\n                        try {\n                            if (createOrderInput_1_1 && !createOrderInput_1_1.done && (_c = createOrderInput_1.return)) _c.call(createOrderInput_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 10:\n                        createBulkOrdersAction = {\n                            type: \"createBulk\",\n                            getMessageToSign: function () {\n                                return _this._getBulkMessageToSign(allOrderComponents);\n                            },\n                            createBulkOrders: function () { return __awaiter(_this, void 0, void 0, function () {\n                                var orders;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.signBulkOrder(allOrderComponents, offerer)];\n                                        case 1:\n                                            orders = _a.sent();\n                                            return [2 /*return*/, orders];\n                                    }\n                                });\n                            }); },\n                        };\n                        actions = __spreadArray(__spreadArray([], __read(allApprovalActions), false), [createBulkOrdersAction], false);\n                        return [2 /*return*/, {\n                                actions: actions,\n                                executeAllActions: function () {\n                                    return (0, usecase_1.executeAllActions)(actions);\n                                },\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Formats an order for creation.\n     */\n    Seaport.prototype._formatOrder = function (signer, offerer, exactApproval, _a) {\n        var _b;\n        var _c = _a.conduitKey, conduitKey = _c === void 0 ? this.defaultConduitKey : _c, _d = _a.zone, zone = _d === void 0 ? ethers_1.ethers.constants.AddressZero : _d, _e = _a.startTime, startTime = _e === void 0 ? Math.floor(Date.now() / 1000).toString() : _e, _f = _a.endTime, endTime = _f === void 0 ? constants_1.MAX_INT.toString() : _f, offer = _a.offer, consideration = _a.consideration, counter = _a.counter, allowPartialFills = _a.allowPartialFills, restrictedByZone = _a.restrictedByZone, fees = _a.fees, domain = _a.domain, salt = _a.salt;\n        return __awaiter(this, void 0, void 0, function () {\n            var offerItems, considerationItems, currencies, totalCurrencyAmount, operator, orderType, considerationItemsWithFees, saltFollowingConditional, orderComponents, _g, approvalActions, balancesAndApprovals, insufficientApprovals, approvals;\n            var _h;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        offerItems = offer.map(order_1.mapInputItemToOfferItem);\n                        considerationItems = __spreadArray([], __read(consideration.map(function (consideration) {\n                            var _a;\n                            return (__assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(consideration)), { recipient: (_a = consideration.recipient) !== null && _a !== void 0 ? _a : offerer }));\n                        })), false);\n                        if (!(0, order_1.areAllCurrenciesSame)({\n                            offer: offerItems,\n                            consideration: considerationItems,\n                        })) {\n                            throw new Error(\"All currency tokens in the order must be the same token\");\n                        }\n                        currencies = __spreadArray(__spreadArray([], __read(offerItems), false), __read(considerationItems), false).filter(item_1.isCurrencyItem);\n                        totalCurrencyAmount = (0, order_1.totalItemsAmount)(currencies);\n                        operator = this.config.conduitKeyToConduit[conduitKey];\n                        orderType = this._getOrderTypeFromOrderOptions({\n                            allowPartialFills: allowPartialFills,\n                            restrictedByZone: restrictedByZone,\n                        });\n                        considerationItemsWithFees = __spreadArray(__spreadArray([], __read((0, order_1.deductFees)(considerationItems, fees)), false), __read((currencies.length\n                            ? (_b = fees === null || fees === void 0 ? void 0 : fees.map(function (fee) {\n                                return (0, order_1.feeToConsiderationItem)({\n                                    fee: fee,\n                                    token: currencies[0].token,\n                                    baseAmount: totalCurrencyAmount.startAmount,\n                                    baseEndAmount: totalCurrencyAmount.endAmount,\n                                });\n                            })) !== null && _b !== void 0 ? _b : []\n                            : [])), false);\n                        saltFollowingConditional = salt ||\n                            (domain ? (0, order_1.generateRandomSaltWithDomain)(domain) : (0, order_1.generateRandomSalt)());\n                        _h = {\n                            offerer: offerer,\n                            zone: zone,\n                            zoneHash: ethers_1.ethers.constants.HashZero,\n                            startTime: startTime,\n                            endTime: endTime,\n                            orderType: orderType,\n                            offer: offerItems,\n                            consideration: considerationItemsWithFees,\n                            totalOriginalConsiderationItems: considerationItemsWithFees.length,\n                            salt: saltFollowingConditional,\n                            conduitKey: conduitKey\n                        };\n                        if (!(counter !== null && counter !== void 0)) return [3 /*break*/, 1];\n                        _g = counter;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCounter(offerer)];\n                    case 2:\n                        _g = (_j.sent());\n                        _j.label = 3;\n                    case 3:\n                        orderComponents = (_h.counter = (_g).toString(),\n                            _h);\n                        approvalActions = [];\n                        if (!this.config.balanceAndApprovalChecksOnOrderCreation) return [3 /*break*/, 6];\n                        return [4 /*yield*/, (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                owner: offerer,\n                                items: offerItems,\n                                criterias: [],\n                                multicallProvider: this.multicallProvider,\n                                operator: operator,\n                            })];\n                    case 4:\n                        balancesAndApprovals = _j.sent();\n                        insufficientApprovals = (0, balanceAndApprovalCheck_1.validateOfferBalancesAndApprovals)({\n                            offer: offerItems,\n                            criterias: [],\n                            balancesAndApprovals: balancesAndApprovals,\n                            throwOnInsufficientBalances: true,\n                            operator: operator,\n                        });\n                        return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, exactApproval, signer)];\n                    case 5:\n                        approvals = _j.sent();\n                        approvalActions.push.apply(approvalActions, __spreadArray([], __read(approvals), false));\n                        _j.label = 6;\n                    case 6: return [2 /*return*/, { orderComponents: orderComponents, approvalActions: approvalActions }];\n                }\n            });\n        });\n    };\n    Seaport.prototype._getSigner = function (accountAddress) {\n        if (this.signer) {\n            return this.signer;\n        }\n        if (!(this.provider instanceof ethers_1.providers.JsonRpcProvider)) {\n            throw new Error(\"Either signer or a JsonRpcProvider must be provided\");\n        }\n        return this.provider.getSigner(accountAddress);\n    };\n    /**\n     * Returns the corresponding order type based on whether it allows partial fills and is restricted by zone\n     *\n     * @param input\n     * @param input.allowPartialFills Whether or not the order can be partially filled\n     * @param input.restrictedByZone Whether or not the order can only be filled/cancelled by the zone\n     * @returns the order type\n     */\n    Seaport.prototype._getOrderTypeFromOrderOptions = function (_a) {\n        var allowPartialFills = _a.allowPartialFills, restrictedByZone = _a.restrictedByZone;\n        if (allowPartialFills) {\n            return restrictedByZone\n                ? constants_1.OrderType.PARTIAL_RESTRICTED\n                : constants_1.OrderType.PARTIAL_OPEN;\n        }\n        return restrictedByZone ? constants_1.OrderType.FULL_RESTRICTED : constants_1.OrderType.FULL_OPEN;\n    };\n    /**\n     * Returns the domain data used when signing typed data\n     * @returns domain data\n     */\n    Seaport.prototype._getDomainData = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var chainId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.provider.getNetwork()];\n                    case 1:\n                        chainId = (_a.sent()).chainId;\n                        return [2 /*return*/, {\n                                name: constants_1.SEAPORT_CONTRACT_NAME,\n                                version: this.config.seaportVersion === \"1.5\"\n                                    ? constants_1.SEAPORT_CONTRACT_VERSION_V1_5\n                                    : constants_1.SEAPORT_CONTRACT_VERSION_V1_4,\n                                chainId: chainId,\n                                verifyingContract: this.contract.address,\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a raw message to be signed using EIP-712\n     * @param orderParameters order parameter struct\n     * @returns JSON string of the message to be signed\n     */\n    Seaport.prototype._getMessageToSign = function (orderComponents) {\n        return __awaiter(this, void 0, void 0, function () {\n            var domainData;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getDomainData()];\n                    case 1:\n                        domainData = _a.sent();\n                        return [2 /*return*/, JSON.stringify(utils_1._TypedDataEncoder.getPayload(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents))];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a raw bulk order message to be signed using EIP-712\n     * @param orderParameters order parameter struct\n     * @param counter counter of the order\n     * @returns JSON string of the message to be signed\n     */\n    Seaport.prototype._getBulkMessageToSign = function (orderComponents) {\n        return __awaiter(this, void 0, void 0, function () {\n            var domainData, tree, bulkOrderType, chunks;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getDomainData()];\n                    case 1:\n                        domainData = _a.sent();\n                        tree = (0, bulk_orders_1.getBulkOrderTree)(orderComponents);\n                        bulkOrderType = tree.types;\n                        chunks = tree.getDataToSign();\n                        return [2 /*return*/, JSON.stringify(utils_1._TypedDataEncoder.getPayload(domainData, bulkOrderType, { tree: chunks }))];\n                }\n            });\n        });\n    };\n    /**\n     * Submits a request to your provider to sign the order. Signed orders are used for off-chain order books.\n     * @param orderComponents standard order parameter struct\n     * @param accountAddress optional account address from which to sign the order with.\n     * @returns the order signature\n     */\n    Seaport.prototype.signOrder = function (orderComponents, accountAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var signer, domainData, signature;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        signer = this._getSigner(accountAddress);\n                        return [4 /*yield*/, this._getDomainData()];\n                    case 1:\n                        domainData = _a.sent();\n                        return [4 /*yield*/, signer._signTypedData(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents)];\n                    case 2:\n                        signature = _a.sent();\n                        // Use EIP-2098 compact signatures to save gas.\n                        return [2 /*return*/, ethers_1.ethers.utils.splitSignature(signature).compact];\n                }\n            });\n        });\n    };\n    /**\n     * Submits a request to your provider to sign the bulk order. Signed orders are used for off-chain order books.\n     * @param orderComponents standard order components struct\n     * @param accountAddress optional account address from which to sign the order with.\n     * @returns the orders with their signatures\n     */\n    Seaport.prototype.signBulkOrder = function (orderComponents, accountAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var signer, domainData, tree, bulkOrderType, chunks, value, signature, orders;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        signer = this._getSigner(accountAddress);\n                        return [4 /*yield*/, this._getDomainData()];\n                    case 1:\n                        domainData = _a.sent();\n                        tree = (0, bulk_orders_1.getBulkOrderTree)(orderComponents);\n                        bulkOrderType = tree.types;\n                        chunks = tree.getDataToSign();\n                        value = { tree: chunks };\n                        return [4 /*yield*/, signer._signTypedData(domainData, bulkOrderType, value)];\n                    case 2:\n                        signature = _a.sent();\n                        // Use EIP-2098 compact signatures to save gas.\n                        signature = ethers_1.ethers.utils.splitSignature(signature).compact;\n                        orders = orderComponents.map(function (parameters, i) { return ({\n                            parameters: parameters,\n                            signature: tree.getEncodedProofAndSignature(i, signature),\n                        }); });\n                        return [2 /*return*/, orders];\n                }\n            });\n        });\n    };\n    /**\n     * Cancels a list of orders so that they are no longer fulfillable.\n     *\n     * @param orders list of order components\n     * @param accountAddress optional account address from which to cancel the orders from.\n     * @param domain optional domain to be hashed and appended to calldata\n     * @returns the set of transaction methods that can be used\n     */\n    Seaport.prototype.cancelOrders = function (orders, accountAddress, domain) {\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"cancel\", [orders], domain);\n    };\n    /**\n     * Bulk cancels all existing orders for a given account\n     * @param offerer the account to bulk cancel orders on\n     * @param domain optional domain to be hashed and appended to calldata\n     * @returns the set of transaction methods that can be used\n     */\n    Seaport.prototype.bulkCancelOrders = function (offerer, domain) {\n        var signer = this._getSigner(offerer);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"incrementCounter\", [], domain);\n    };\n    /**\n     * Approves a list of orders on-chain. This allows accounts to fulfill the order without requiring\n     * a signature. Can also check if an order is valid using `callStatic`\n     * @param orders list of order structs\n     * @param accountAddress optional account address to approve orders.\n     * @param domain optional domain to be hashed and appended to calldata\n     * @returns the set of transaction methods that can be used\n     */\n    Seaport.prototype.validate = function (orders, accountAddress, domain) {\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"validate\", [orders], domain);\n    };\n    /**\n     * Returns the order status given an order hash\n     * @param orderHash the hash of the order\n     * @returns an order status struct\n     */\n    Seaport.prototype.getOrderStatus = function (orderHash) {\n        return this.contract.getOrderStatus(orderHash);\n    };\n    /**\n     * Gets the counter of a given offerer\n     * @param offerer the offerer to get the counter of\n     * @returns counter as a number\n     */\n    Seaport.prototype.getCounter = function (offerer) {\n        return this.contract.getCounter(offerer);\n    };\n    /**\n     * Fulfills an order through either the basic method or the standard method\n     * Units to fill are denominated by the max possible size of the order, which is the greatest common denominator (GCD).\n     * We expose a helper to get this: getMaximumSizeForOrder\n     * i.e. If the maximum size of an order is 4, supplying 2 as the units to fulfill will fill half of the order: ;\n     * @param input\n     * @param input.order The standard order struct\n     * @param input.unitsToFill the number of units to fill for the given order. Only used if you wish to partially fill an order\n     * @param input.offerCriteria an array of criteria with length equal to the number of offer criteria items\n     * @param input.considerationCriteria an array of criteria with length equal to the number of consideration criteria items\n     * @param input.tips an array of optional condensed consideration items to be added onto a fulfillment\n     * @param input.extraData extra data supplied to the order\n     * @param input.accountAddress optional address from which to fulfill the order from\n     * @param input.conduitKey the conduitKey to source approvals from\n     * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n     *                               Defaults to the zero address which means the offer goes to the fulfiller\n     * @param input.domain optional domain to be hashed and appended to calldata\n     * @param input.exactApproval optional boolean to indicate whether the approval should be exact or not\n     * @returns a use case containing the set of approval actions and fulfillment action\n     */\n    Seaport.prototype.fulfillOrder = function (_a) {\n        var order = _a.order, unitsToFill = _a.unitsToFill, _b = _a.offerCriteria, offerCriteria = _b === void 0 ? [] : _b, _c = _a.considerationCriteria, considerationCriteria = _c === void 0 ? [] : _c, _d = _a.tips, tips = _d === void 0 ? [] : _d, _e = _a.extraData, extraData = _e === void 0 ? \"0x\" : _e, accountAddress = _a.accountAddress, _f = _a.conduitKey, conduitKey = _f === void 0 ? this.defaultConduitKey : _f, _g = _a.recipientAddress, recipientAddress = _g === void 0 ? ethers_1.ethers.constants.AddressZero : _g, _h = _a.domain, domain = _h === void 0 ? \"\" : _h, _j = _a.exactApproval, exactApproval = _j === void 0 ? false : _j;\n        return __awaiter(this, void 0, void 0, function () {\n            var orderParameters, offerer, offer, consideration, fulfiller, fulfillerAddress, offererOperator, fulfillerOperator, _k, offererBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatus, currentBlockTimestamp, totalFilled, totalSize, sanitizedOrder, timeBasedItemParams, tipConsiderationItems, isRecipientSelf;\n            return __generator(this, function (_l) {\n                switch (_l.label) {\n                    case 0:\n                        orderParameters = order.parameters;\n                        offerer = orderParameters.offerer, offer = orderParameters.offer, consideration = orderParameters.consideration;\n                        fulfiller = this._getSigner(accountAddress);\n                        return [4 /*yield*/, fulfiller.getAddress()];\n                    case 1:\n                        fulfillerAddress = _l.sent();\n                        offererOperator = this.config.conduitKeyToConduit[orderParameters.conduitKey];\n                        fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n                        return [4 /*yield*/, Promise.all([\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: offerer,\n                                    items: offer,\n                                    criterias: offerCriteria,\n                                    multicallProvider: this.multicallProvider,\n                                    operator: offererOperator,\n                                }),\n                                // Get fulfiller balances and approvals of all items in the set, as offer items\n                                // may be received by the fulfiller for standard fulfills\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: fulfillerAddress,\n                                    items: __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false),\n                                    criterias: __spreadArray(__spreadArray([], __read(offerCriteria), false), __read(considerationCriteria), false),\n                                    multicallProvider: this.multicallProvider,\n                                    operator: fulfillerOperator,\n                                }),\n                                this.multicallProvider.getBlock(\"latest\"),\n                                this.getOrderStatus(this.getOrderHash(orderParameters)),\n                            ])];\n                    case 2:\n                        _k = __read.apply(void 0, [_l.sent(), 4]), offererBalancesAndApprovals = _k[0], fulfillerBalancesAndApprovals = _k[1], currentBlock = _k[2], orderStatus = _k[3];\n                        currentBlockTimestamp = currentBlock.timestamp;\n                        totalFilled = orderStatus.totalFilled, totalSize = orderStatus.totalSize;\n                        sanitizedOrder = (0, fulfill_1.validateAndSanitizeFromOrderStatus)(order, orderStatus);\n                        timeBasedItemParams = {\n                            startTime: sanitizedOrder.parameters.startTime,\n                            endTime: sanitizedOrder.parameters.endTime,\n                            currentBlockTimestamp: currentBlockTimestamp,\n                            ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer,\n                        };\n                        tipConsiderationItems = tips.map(function (tip) { return (__assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), { recipient: tip.recipient })); });\n                        isRecipientSelf = recipientAddress === ethers_1.ethers.constants.AddressZero;\n                        // We use basic fulfills as they are more optimal for simple and \"hot\" use cases\n                        // We cannot use basic fulfill if user is trying to partially fill though.\n                        if (!unitsToFill &&\n                            isRecipientSelf &&\n                            (0, fulfill_1.shouldUseBasicFulfill)(sanitizedOrder.parameters, totalFilled)) {\n                            // TODO: Use fulfiller proxy if there are approvals needed directly, but none needed for proxy\n                            return [2 /*return*/, (0, fulfill_1.fulfillBasicOrder)({\n                                    order: sanitizedOrder,\n                                    seaportContract: this.contract,\n                                    offererBalancesAndApprovals: offererBalancesAndApprovals,\n                                    fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                                    timeBasedItemParams: timeBasedItemParams,\n                                    conduitKey: conduitKey,\n                                    offererOperator: offererOperator,\n                                    fulfillerOperator: fulfillerOperator,\n                                    signer: fulfiller,\n                                    tips: tipConsiderationItems,\n                                    domain: domain,\n                                }, exactApproval)];\n                        }\n                        // Else, we fallback to the standard fulfill order\n                        return [2 /*return*/, (0, fulfill_1.fulfillStandardOrder)({\n                                order: sanitizedOrder,\n                                unitsToFill: unitsToFill,\n                                totalFilled: totalFilled,\n                                totalSize: totalSize.eq(0)\n                                    ? (0, item_1.getMaximumSizeForOrder)(sanitizedOrder)\n                                    : totalSize,\n                                offerCriteria: offerCriteria,\n                                considerationCriteria: considerationCriteria,\n                                tips: tipConsiderationItems,\n                                extraData: extraData,\n                                seaportContract: this.contract,\n                                offererBalancesAndApprovals: offererBalancesAndApprovals,\n                                fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                                timeBasedItemParams: timeBasedItemParams,\n                                conduitKey: conduitKey,\n                                signer: fulfiller,\n                                offererOperator: offererOperator,\n                                fulfillerOperator: fulfillerOperator,\n                                recipientAddress: recipientAddress,\n                                domain: domain,\n                            }, exactApproval)];\n                }\n            });\n        });\n    };\n    /**\n     * Fulfills an order through best-effort fashion. Orders that fail will not revert the whole transaction\n     * unless there's an issue with approvals or balance checks\n     * @param input\n     * @param input.fulfillOrderDetails list of helper order details\n     * @param input.accountAddress the account to fulfill orders on\n     * @param input.conduitKey the key from which to source approvals from\n     * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n     *                               Defaults to the zero address which means the offer goes to the fulfiller\n     * @param input.domain optional domain to be hashed and appended to calldata\n     * @param input.exactApproval optional boolean to indicate whether the approval should be exact or not\n     * @returns a use case containing the set of approval actions and fulfillment action\n     */\n    Seaport.prototype.fulfillOrders = function (_a) {\n        var fulfillOrderDetails = _a.fulfillOrderDetails, accountAddress = _a.accountAddress, _b = _a.conduitKey, conduitKey = _b === void 0 ? this.defaultConduitKey : _b, _c = _a.recipientAddress, recipientAddress = _c === void 0 ? ethers_1.ethers.constants.AddressZero : _c, _d = _a.domain, domain = _d === void 0 ? \"\" : _d, _e = _a.exactApproval, exactApproval = _e === void 0 ? false : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var fulfiller, fulfillerAddress, allOffererOperators, fulfillerOperator, allOfferItems, allConsiderationItems, allOfferCriteria, allConsiderationCriteria, _f, offerersBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatuses, ordersMetadata;\n            var _this = this;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        fulfiller = this._getSigner(accountAddress);\n                        return [4 /*yield*/, fulfiller.getAddress()];\n                    case 1:\n                        fulfillerAddress = _g.sent();\n                        allOffererOperators = fulfillOrderDetails.map(function (_a) {\n                            var order = _a.order;\n                            return _this.config.conduitKeyToConduit[order.parameters.conduitKey];\n                        });\n                        fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n                        allOfferItems = fulfillOrderDetails.flatMap(function (_a) {\n                            var order = _a.order;\n                            return order.parameters.offer;\n                        });\n                        allConsiderationItems = fulfillOrderDetails.flatMap(function (_a) {\n                            var order = _a.order;\n                            return order.parameters.consideration;\n                        });\n                        allOfferCriteria = fulfillOrderDetails.flatMap(function (_a) {\n                            var _b = _a.offerCriteria, offerCriteria = _b === void 0 ? [] : _b;\n                            return offerCriteria;\n                        });\n                        allConsiderationCriteria = fulfillOrderDetails.flatMap(function (_a) {\n                            var _b = _a.considerationCriteria, considerationCriteria = _b === void 0 ? [] : _b;\n                            return considerationCriteria;\n                        });\n                        return [4 /*yield*/, Promise.all([\n                                Promise.all(fulfillOrderDetails.map(function (_a, i) {\n                                    var order = _a.order, _b = _a.offerCriteria, offerCriteria = _b === void 0 ? [] : _b;\n                                    return (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                        owner: order.parameters.offerer,\n                                        items: order.parameters.offer,\n                                        criterias: offerCriteria,\n                                        operator: allOffererOperators[i],\n                                        multicallProvider: _this.multicallProvider,\n                                    });\n                                })),\n                                // Get fulfiller balances and approvals of all items in the set, as offer items\n                                // may be received by the fulfiller for standard fulfills\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: fulfillerAddress,\n                                    items: __spreadArray(__spreadArray([], __read(allOfferItems), false), __read(allConsiderationItems), false),\n                                    criterias: __spreadArray(__spreadArray([], __read(allOfferCriteria), false), __read(allConsiderationCriteria), false),\n                                    operator: fulfillerOperator,\n                                    multicallProvider: this.multicallProvider,\n                                }),\n                                this.multicallProvider.getBlock(\"latest\"),\n                                Promise.all(fulfillOrderDetails.map(function (_a) {\n                                    var order = _a.order;\n                                    return _this.getOrderStatus(_this.getOrderHash(order.parameters));\n                                })),\n                            ])];\n                    case 2:\n                        _f = __read.apply(void 0, [_g.sent(), 4]), offerersBalancesAndApprovals = _f[0], fulfillerBalancesAndApprovals = _f[1], currentBlock = _f[2], orderStatuses = _f[3];\n                        ordersMetadata = fulfillOrderDetails.map(function (orderDetails, index) {\n                            var _a, _b, _c, _d, _e;\n                            return ({\n                                order: orderDetails.order,\n                                unitsToFill: orderDetails.unitsToFill,\n                                orderStatus: orderStatuses[index],\n                                offerCriteria: (_a = orderDetails.offerCriteria) !== null && _a !== void 0 ? _a : [],\n                                considerationCriteria: (_b = orderDetails.considerationCriteria) !== null && _b !== void 0 ? _b : [],\n                                tips: (_d = (_c = orderDetails.tips) === null || _c === void 0 ? void 0 : _c.map(function (tip) { return (__assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), { recipient: tip.recipient })); })) !== null && _d !== void 0 ? _d : [],\n                                extraData: (_e = orderDetails.extraData) !== null && _e !== void 0 ? _e : \"0x\",\n                                offererBalancesAndApprovals: offerersBalancesAndApprovals[index],\n                                offererOperator: allOffererOperators[index],\n                            });\n                        });\n                        return [2 /*return*/, (0, fulfill_1.fulfillAvailableOrders)({\n                                ordersMetadata: ordersMetadata,\n                                seaportContract: this.contract,\n                                fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                                currentBlockTimestamp: currentBlock.timestamp,\n                                ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer,\n                                fulfillerOperator: fulfillerOperator,\n                                signer: fulfiller,\n                                conduitKey: conduitKey,\n                                recipientAddress: recipientAddress,\n                                domain: domain,\n                                exactApproval: exactApproval,\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * NOTE: Largely incomplete. Does NOT do any balance or approval checks.\n     * Just exposes the bare bones matchOrders where clients will have to supply\n     * their own overrides as needed.\n     * @param input\n     * @param input.orders the list of orders to match\n     * @param input.fulfillments the list of fulfillments to match offer and considerations\n     * @param input.overrides any overrides the client wants, will need to pass in value for matching orders with ETH.\n     * @param input.accountAddress Optional address for which to match the order with\n     * @param input.domain optional domain to be hashed and appended to calldata\n     * @returns set of transaction methods for matching orders\n     */\n    Seaport.prototype.matchOrders = function (_a) {\n        var orders = _a.orders, fulfillments = _a.fulfillments, overrides = _a.overrides, accountAddress = _a.accountAddress, _b = _a.domain, domain = _b === void 0 ? \"\" : _b;\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"matchOrders\", [orders, fulfillments, overrides], domain);\n    };\n    Seaport.prototype.setDomain = function (domain, accountAddress) {\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.domainRegistry.connect(signer), \"setDomain\", [domain]);\n    };\n    Seaport.prototype.getNumberOfDomains = function (tag) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.domainRegistry.getNumberOfDomains(tag)];\n            });\n        });\n    };\n    Seaport.prototype.getDomain = function (tag, index) {\n        return this.domainRegistry.getDomain(tag, index);\n    };\n    Seaport.prototype.getDomains = function (tag, shouldThrow) {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_1, totalDomains, domainArray;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 1, , 3]);\n                        if (shouldThrow) {\n                            throw Error;\n                        }\n                        return [2 /*return*/, this.domainRegistry.getDomains(tag)];\n                    case 1:\n                        error_1 = _a.sent();\n                        return [4 /*yield*/, this.domainRegistry.getNumberOfDomains(tag)];\n                    case 2:\n                        totalDomains = (_a.sent()).toNumber();\n                        domainArray = Promise.all(__spreadArray([], __read(Array(totalDomains).keys()), false).map(function (i) {\n                            return _this.domainRegistry.getDomain(tag, i);\n                        }));\n                        return [2 /*return*/, domainArray];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return Seaport;\n}());\nexports.Seaport = Seaport;\n//# sourceMappingURL=seaport.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApprovalActions = exports.approvedItemAmount = void 0;\nvar ethers_1 = require(\"ethers\");\nvar ERC20_1 = require(\"../abi/ERC20\");\nvar ERC721_1 = require(\"../abi/ERC721\");\nvar constants_1 = require(\"../constants\");\nvar item_1 = require(\"./item\");\nvar usecase_1 = require(\"./usecase\");\nvar approvedItemAmount = function (owner, item, operator, multicallProvider) { return __awaiter(void 0, void 0, void 0, function () {\n    var contract, contract;\n    return __generator(this, function (_a) {\n        if ((0, item_1.isErc721Item)(item.itemType) || (0, item_1.isErc1155Item)(item.itemType)) {\n            contract = new ethers_1.Contract(item.token, ERC721_1.ERC721ABI, multicallProvider);\n            return [2 /*return*/, contract.isApprovedForAll(owner, operator).then(function (isApprovedForAll) {\n                    // Setting to the max int to consolidate types and simplify\n                    return isApprovedForAll ? constants_1.MAX_INT : ethers_1.BigNumber.from(0);\n                })];\n        }\n        else if (item.itemType === constants_1.ItemType.ERC20) {\n            contract = new ethers_1.Contract(item.token, ERC20_1.ERC20ABI, multicallProvider);\n            return [2 /*return*/, contract.allowance(owner, operator)];\n        }\n        // We don't need to check approvals for native tokens\n        return [2 /*return*/, constants_1.MAX_INT];\n    });\n}); };\nexports.approvedItemAmount = approvedItemAmount;\n/**\n * Get approval actions given a list of insufficent approvals.\n */\nfunction getApprovalActions(insufficientApprovals, exactApproval, signer) {\n    var _this = this;\n    return Promise.all(insufficientApprovals\n        .filter(function (approval, index) {\n        return index === insufficientApprovals.length - 1 ||\n            insufficientApprovals[index + 1].token !== approval.token;\n    })\n        .map(function (_a) {\n        var token = _a.token, operator = _a.operator, itemType = _a.itemType, identifierOrCriteria = _a.identifierOrCriteria, requiredApprovedAmount = _a.requiredApprovedAmount;\n        return __awaiter(_this, void 0, void 0, function () {\n            var isErc1155, contract, contract;\n            return __generator(this, function (_b) {\n                isErc1155 = (0, item_1.isErc1155Item)(itemType);\n                if ((0, item_1.isErc721Item)(itemType) || isErc1155) {\n                    contract = new ethers_1.Contract(token, ERC721_1.ERC721ABI, signer);\n                    return [2 /*return*/, {\n                            type: \"approval\",\n                            token: token,\n                            identifierOrCriteria: identifierOrCriteria,\n                            itemType: itemType,\n                            operator: operator,\n                            transactionMethods: (0, usecase_1.getTransactionMethods)(contract.connect(signer), exactApproval && !isErc1155 ? \"approve\" : \"setApprovalForAll\", [\n                                operator,\n                                exactApproval && !isErc1155 ? identifierOrCriteria : true,\n                            ]),\n                        }];\n                }\n                else {\n                    contract = new ethers_1.Contract(token, ERC20_1.ERC20ABI, signer);\n                    return [2 /*return*/, {\n                            type: \"approval\",\n                            token: token,\n                            identifierOrCriteria: identifierOrCriteria,\n                            itemType: itemType,\n                            transactionMethods: (0, usecase_1.getTransactionMethods)(contract.connect(signer), \"approve\", [operator, exactApproval ? requiredApprovedAmount : constants_1.MAX_INT]),\n                            operator: operator,\n                        }];\n                }\n                return [2 /*return*/];\n            });\n        });\n    }));\n}\nexports.getApprovalActions = getApprovalActions;\n//# sourceMappingURL=approval.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.balanceOf = void 0;\nvar ethers_1 = require(\"ethers\");\nvar ERC1155_1 = require(\"../abi/ERC1155\");\nvar ERC20_1 = require(\"../abi/ERC20\");\nvar ERC721_1 = require(\"../abi/ERC721\");\nvar constants_1 = require(\"../constants\");\nvar item_1 = require(\"./item\");\nvar balanceOf = function (owner, item, multicallProvider, criteria) { return __awaiter(void 0, void 0, void 0, function () {\n    var contract, contract, startAmount, endAmount, contract;\n    return __generator(this, function (_a) {\n        if ((0, item_1.isErc721Item)(item.itemType)) {\n            contract = new ethers_1.Contract(item.token, ERC721_1.ERC721ABI, multicallProvider);\n            if (item.itemType === constants_1.ItemType.ERC721_WITH_CRITERIA) {\n                return [2 /*return*/, criteria\n                        ? contract\n                            .ownerOf(criteria.identifier)\n                            .then(function (ownerOf) {\n                            return ethers_1.BigNumber.from(Number(ownerOf.toLowerCase() === owner.toLowerCase()));\n                        })\n                        : contract.balanceOf(owner)];\n            }\n            return [2 /*return*/, contract\n                    .ownerOf(item.identifierOrCriteria)\n                    .then(function (ownerOf) {\n                    return ethers_1.BigNumber.from(Number(ownerOf.toLowerCase() === owner.toLowerCase()));\n                })];\n        }\n        else if ((0, item_1.isErc1155Item)(item.itemType)) {\n            contract = new ethers_1.Contract(item.token, ERC1155_1.ERC1155ABI, multicallProvider);\n            if (item.itemType === constants_1.ItemType.ERC1155_WITH_CRITERIA) {\n                if (!criteria) {\n                    startAmount = ethers_1.BigNumber.from(item.startAmount);\n                    endAmount = ethers_1.BigNumber.from(item.endAmount);\n                    return [2 /*return*/, startAmount.gt(endAmount) ? startAmount : endAmount];\n                }\n                return [2 /*return*/, contract.balanceOf(owner, criteria.identifier)];\n            }\n            return [2 /*return*/, contract.balanceOf(owner, item.identifierOrCriteria)];\n        }\n        if ((0, item_1.isErc20Item)(item.itemType)) {\n            contract = new ethers_1.Contract(item.token, ERC20_1.ERC20ABI, multicallProvider);\n            return [2 /*return*/, contract.balanceOf(owner)];\n        }\n        return [2 /*return*/, multicallProvider.getBalance(owner)];\n    });\n}); };\nexports.balanceOf = balanceOf;\n//# sourceMappingURL=balance.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateStandardFulfillBalancesAndApprovals = exports.validateBasicFulfillBalancesAndApprovals = exports.validateOfferBalancesAndApprovals = exports.getInsufficientBalanceAndApprovalAmounts = exports.getBalancesAndApprovals = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balance_1 = require(\"./balance\");\nvar criteria_1 = require(\"./criteria\");\nvar item_1 = require(\"./item\");\nvar findBalanceAndApproval = function (balancesAndApprovals, token, identifierOrCriteria) {\n    var balanceAndApproval = balancesAndApprovals.find(function (_a) {\n        var checkedToken = _a.token, checkedIdentifierOrCriteria = _a.identifierOrCriteria;\n        return token.toLowerCase() === checkedToken.toLowerCase() &&\n            checkedIdentifierOrCriteria.toLowerCase() ===\n                identifierOrCriteria.toLowerCase();\n    });\n    if (!balanceAndApproval) {\n        throw new Error(\"Balances and approvals didn't contain all tokens and identifiers\");\n    }\n    return balanceAndApproval;\n};\nvar getBalancesAndApprovals = function (_a) {\n    var owner = _a.owner, items = _a.items, criterias = _a.criterias, operator = _a.operator, multicallProvider = _a.multicallProvider;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var itemToCriteria;\n        return __generator(this, function (_b) {\n            itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(items, criterias);\n            return [2 /*return*/, Promise.all(items.map(function (item) { return __awaiter(void 0, void 0, void 0, function () {\n                    var approvedAmountPromise;\n                    var _a;\n                    var _b, _c;\n                    return __generator(this, function (_d) {\n                        switch (_d.label) {\n                            case 0:\n                                approvedAmountPromise = Promise.resolve(ethers_1.BigNumber.from(0));\n                                if ((0, item_1.isErc721Item)(item.itemType) || (0, item_1.isErc1155Item)(item.itemType)) {\n                                    approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                                }\n                                else if ((0, item_1.isErc20Item)(item.itemType)) {\n                                    approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                                }\n                                // If native token, we don't need to check for approvals\n                                else {\n                                    approvedAmountPromise = Promise.resolve(constants_1.MAX_INT);\n                                }\n                                _a = {\n                                    token: item.token,\n                                    identifierOrCriteria: (_c = (_b = itemToCriteria.get(item)) === null || _b === void 0 ? void 0 : _b.identifier) !== null && _c !== void 0 ? _c : item.identifierOrCriteria\n                                };\n                                return [4 /*yield*/, (0, balance_1.balanceOf)(owner, item, multicallProvider, itemToCriteria.get(item))];\n                            case 1:\n                                _a.balance = _d.sent();\n                                return [4 /*yield*/, approvedAmountPromise];\n                            case 2: return [2 /*return*/, (_a.approvedAmount = _d.sent(),\n                                    _a.itemType = item.itemType,\n                                    _a)];\n                        }\n                    });\n                }); }))];\n        });\n    });\n};\nexports.getBalancesAndApprovals = getBalancesAndApprovals;\nvar getInsufficientBalanceAndApprovalAmounts = function (_a) {\n    var balancesAndApprovals = _a.balancesAndApprovals, tokenAndIdentifierAmounts = _a.tokenAndIdentifierAmounts, operator = _a.operator;\n    var tokenAndIdentifierAndAmountNeeded = __spreadArray([], __read(Object.entries(tokenAndIdentifierAmounts).map(function (_a) {\n        var _b = __read(_a, 2), token = _b[0], identifierToAmount = _b[1];\n        return Object.entries(identifierToAmount).map(function (_a) {\n            var _b = __read(_a, 2), identifierOrCriteria = _b[0], amountNeeded = _b[1];\n            return [token, identifierOrCriteria, amountNeeded];\n        });\n    })), false).flat();\n    var filterBalancesOrApprovals = function (filterKey) {\n        return tokenAndIdentifierAndAmountNeeded\n            .filter(function (_a) {\n            var _b = __read(_a, 3), token = _b[0], identifierOrCriteria = _b[1], amountNeeded = _b[2];\n            return findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria)[filterKey].lt(amountNeeded);\n        })\n            .map(function (_a) {\n            var _b = __read(_a, 3), token = _b[0], identifierOrCriteria = _b[1], amount = _b[2];\n            var balanceAndApproval = findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria);\n            return {\n                token: token,\n                identifierOrCriteria: identifierOrCriteria,\n                requiredAmount: amount,\n                amountHave: balanceAndApproval[filterKey],\n                itemType: balanceAndApproval.itemType,\n            };\n        });\n    };\n    var mapToApproval = function (insufficientBalance) { return ({\n        token: insufficientBalance.token,\n        identifierOrCriteria: insufficientBalance.identifierOrCriteria,\n        approvedAmount: insufficientBalance.amountHave,\n        requiredApprovedAmount: insufficientBalance.requiredAmount,\n        itemType: insufficientBalance.itemType,\n        operator: operator,\n    }); };\n    var _b = __read([\n        filterBalancesOrApprovals(\"balance\"),\n        filterBalancesOrApprovals(\"approvedAmount\").map(mapToApproval),\n    ], 2), insufficientBalances = _b[0], insufficientApprovals = _b[1];\n    return {\n        insufficientBalances: insufficientBalances,\n        insufficientApprovals: insufficientApprovals,\n    };\n};\nexports.getInsufficientBalanceAndApprovalAmounts = getInsufficientBalanceAndApprovalAmounts;\n/**\n * 1. The offerer should have sufficient balance of all offered items.\n * 2. If the order does not indicate proxy utilization, the offerer should have sufficient approvals set\n *    for the Seaport contract for all offered ERC20, ERC721, and ERC1155 items.\n * 3. If the order does indicate proxy utilization, the offerer should have sufficient approvals set\n *    for their respective proxy contract for all offered ERC20, ERC721, and ERC1155 items.\n */\nvar validateOfferBalancesAndApprovals = function (_a) {\n    var offer = _a.offer, criterias = _a.criterias, balancesAndApprovals = _a.balancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, _b = _a.throwOnInsufficientBalances, throwOnInsufficientBalances = _b === void 0 ? true : _b, throwOnInsufficientApprovals = _a.throwOnInsufficientApprovals, operator = _a.operator;\n    var _c = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n        balancesAndApprovals: balancesAndApprovals,\n        tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: offer,\n            criterias: criterias,\n            timeBasedItemParams: timeBasedItemParams\n                ? __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: false }) : undefined,\n        }),\n        operator: operator,\n    }), insufficientBalances = _c.insufficientBalances, insufficientApprovals = _c.insufficientApprovals;\n    if (throwOnInsufficientBalances && insufficientBalances.length > 0) {\n        throw new Error(\"The offerer does not have the amount needed to create or fulfill.\");\n    }\n    if (throwOnInsufficientApprovals && insufficientApprovals.length > 0) {\n        throw new Error(\"The offerer does not have the sufficient approvals.\");\n    }\n    return insufficientApprovals;\n};\nexports.validateOfferBalancesAndApprovals = validateOfferBalancesAndApprovals;\n/**\n * When fulfilling a basic order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items except for those with an\n *    item type that matches the order's offered item type — by way of example, if the fulfilled order offers\n *    an ERC20 item and requires an ERC721 item to the offerer and the same ERC20 item to another recipient,\n *    the fulfiller needs to own the ERC721 item but does not need to own the ERC20 item as it will be sourced from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order except\n *    for ERC20 items with an item type that matches the order's offered item type.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order\n *    except for ERC20 items with an item type that matches the order's offered item type.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateBasicFulfillBalancesAndApprovals = function (_a) {\n    var offer = _a.offer, consideration = _a.consideration, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator;\n    (0, exports.validateOfferBalancesAndApprovals)({\n        offer: offer,\n        criterias: [],\n        balancesAndApprovals: offererBalancesAndApprovals,\n        timeBasedItemParams: timeBasedItemParams,\n        throwOnInsufficientApprovals: true,\n        operator: offererOperator,\n    });\n    var considerationWithoutOfferItemType = consideration.filter(function (item) { return item.itemType !== offer[0].itemType; });\n    var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n        balancesAndApprovals: fulfillerBalancesAndApprovals,\n        tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: considerationWithoutOfferItemType,\n            criterias: [],\n            timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n        }),\n        operator: fulfillerOperator,\n    }), insufficientBalances = _b.insufficientBalances, insufficientApprovals = _b.insufficientApprovals;\n    if (insufficientBalances.length > 0) {\n        throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n    }\n    return insufficientApprovals;\n};\nexports.validateBasicFulfillBalancesAndApprovals = validateBasicFulfillBalancesAndApprovals;\n/**\n * When fulfilling a standard order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items after receiving all offered items\n *    — by way of example, if the fulfilled order offers an ERC20 item and requires an ERC721 item to the offerer\n *    and the same ERC20 item to another recipient with an amount less than or equal to the offered amount,\n *    the fulfiller does not need to own the ERC20 item as it will first be received from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateStandardFulfillBalancesAndApprovals = function (_a) {\n    var offer = _a.offer, consideration = _a.consideration, offerCriteria = _a.offerCriteria, considerationCriteria = _a.considerationCriteria, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator;\n    (0, exports.validateOfferBalancesAndApprovals)({\n        offer: offer,\n        criterias: offerCriteria,\n        balancesAndApprovals: offererBalancesAndApprovals,\n        timeBasedItemParams: timeBasedItemParams,\n        throwOnInsufficientApprovals: true,\n        operator: offererOperator,\n    });\n    var fulfillerBalancesAndApprovalsAfterReceivingOfferedItems = addToExistingBalances({\n        items: offer,\n        criterias: offerCriteria,\n        balancesAndApprovals: fulfillerBalancesAndApprovals,\n        timeBasedItemParams: timeBasedItemParams,\n    });\n    var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n        balancesAndApprovals: fulfillerBalancesAndApprovalsAfterReceivingOfferedItems,\n        tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: consideration,\n            criterias: considerationCriteria,\n            timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n        }),\n        operator: fulfillerOperator,\n    }), insufficientBalances = _b.insufficientBalances, insufficientApprovals = _b.insufficientApprovals;\n    if (insufficientBalances.length > 0) {\n        throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n    }\n    return insufficientApprovals;\n};\nexports.validateStandardFulfillBalancesAndApprovals = validateStandardFulfillBalancesAndApprovals;\nvar addToExistingBalances = function (_a) {\n    var items = _a.items, criterias = _a.criterias, timeBasedItemParams = _a.timeBasedItemParams, balancesAndApprovals = _a.balancesAndApprovals;\n    var summedItemAmounts = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: items,\n        criterias: criterias,\n        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: false }),\n    });\n    // Deep clone existing balances\n    var balancesAndApprovalsAfterReceivingItems = balancesAndApprovals.map(function (item) { return (__assign({}, item)); });\n    // Add each summed item amount to the existing balances as we may want tocheck balances after receiving all items\n    Object.entries(summedItemAmounts).forEach(function (_a) {\n        var _b = __read(_a, 2), token = _b[0], identifierOrCriteriaToAmount = _b[1];\n        return Object.entries(identifierOrCriteriaToAmount).forEach(function (_a) {\n            var _b = __read(_a, 2), identifierOrCriteria = _b[0], amount = _b[1];\n            var balanceAndApproval = findBalanceAndApproval(balancesAndApprovalsAfterReceivingItems, token, identifierOrCriteria);\n            var balanceAndApprovalIndex = balancesAndApprovalsAfterReceivingItems.indexOf(balanceAndApproval);\n            balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance =\n                balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance.add(amount);\n        });\n    });\n    return balancesAndApprovalsAfterReceivingItems;\n};\n//# sourceMappingURL=balanceAndApprovalCheck.js.map","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getItemToCriteriaMap = exports.generateCriteriaResolvers = void 0;\nvar constants_1 = require(\"../constants\");\nvar item_1 = require(\"./item\");\nvar generateCriteriaResolvers = function (_a) {\n    var orders = _a.orders, _b = _a.offerCriterias, offerCriterias = _b === void 0 ? [[]] : _b, _c = _a.considerationCriterias, considerationCriterias = _c === void 0 ? [[]] : _c;\n    var offerCriteriaItems = orders.flatMap(function (order, orderIndex) {\n        return order.parameters.offer\n            .map(function (item, index) {\n            return ({\n                orderIndex: orderIndex,\n                item: item,\n                index: index,\n                side: constants_1.Side.OFFER,\n            });\n        })\n            .filter(function (_a) {\n            var item = _a.item;\n            return (0, item_1.isCriteriaItem)(item.itemType);\n        });\n    });\n    var considerationCriteriaItems = orders.flatMap(function (order, orderIndex) {\n        return order.parameters.consideration\n            .map(function (item, index) {\n            return ({\n                orderIndex: orderIndex,\n                item: item,\n                index: index,\n                side: constants_1.Side.CONSIDERATION,\n            });\n        })\n            .filter(function (_a) {\n            var item = _a.item;\n            return (0, item_1.isCriteriaItem)(item.itemType);\n        });\n    });\n    var mapCriteriaItemsToResolver = function (criteriaItems, criterias) {\n        return criteriaItems.map(function (_a) {\n            var orderIndex = _a.orderIndex, item = _a.item, index = _a.index, side = _a.side;\n            var merkleRoot = item.identifierOrCriteria || \"0\";\n            var inputCriteria = criterias[orderIndex][index];\n            return {\n                orderIndex: orderIndex,\n                index: index,\n                side: side,\n                identifier: inputCriteria.identifier,\n                criteriaProof: merkleRoot === \"0\" ? [] : inputCriteria.proof,\n            };\n        });\n    };\n    var criteriaResolvers = __spreadArray(__spreadArray([], __read(mapCriteriaItemsToResolver(offerCriteriaItems, offerCriterias)), false), __read(mapCriteriaItemsToResolver(considerationCriteriaItems, considerationCriterias)), false);\n    return criteriaResolvers;\n};\nexports.generateCriteriaResolvers = generateCriteriaResolvers;\nvar getItemToCriteriaMap = function (items, criterias) {\n    var criteriasCopy = __spreadArray([], __read(criterias), false);\n    return items.reduce(function (map, item) {\n        if ((0, item_1.isCriteriaItem)(item.itemType)) {\n            map.set(item, criteriasCopy.shift());\n        }\n        return map;\n    }, new Map());\n};\nexports.getItemToCriteriaMap = getItemToCriteriaMap;\n//# sourceMappingURL=criteria.js.map","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Eip712MerkleTree = void 0;\nvar hash_1 = require(\"@ethersproject/hash\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar merkletreejs_1 = require(\"merkletreejs\");\nvar defaults_1 = require(\"./defaults\");\nvar utils_2 = require(\"./utils\");\nvar getTree = function (leaves, defaultLeafHash) {\n    return new merkletreejs_1.MerkleTree(leaves.map(utils_2.hexToBuffer), utils_2.bufferKeccak, {\n        complete: true,\n        sort: false,\n        hashLeaves: false,\n        fillDefaultHash: (0, utils_2.hexToBuffer)(defaultLeafHash),\n    });\n};\nvar encodeProof = function (key, proof, signature) {\n    if (signature === void 0) { signature = \"0x\".concat(\"ff\".repeat(64)); }\n    return (0, utils_1.hexConcat)([\n        signature,\n        \"0x\".concat(key.toString(16).padStart(6, \"0\")),\n        utils_1.defaultAbiCoder.encode([\"uint256[\".concat(proof.length, \"]\")], [proof]),\n    ]);\n};\nvar Eip712MerkleTree = /** @class */ (function () {\n    function Eip712MerkleTree(types, rootType, leafType, elements, depth) {\n        this.types = types;\n        this.rootType = rootType;\n        this.leafType = leafType;\n        this.elements = elements;\n        this.depth = depth;\n        var encoder = hash_1._TypedDataEncoder.from(types);\n        this.encoder = encoder;\n        this.leafHasher = function (leaf) { return encoder.hashStruct(leafType, leaf); };\n        this.defaultNode = defaults_1.DefaultGetter.from(types, leafType);\n        this.defaultLeaf = this.leafHasher(this.defaultNode);\n        this.tree = getTree(this.getCompleteLeaves(), this.defaultLeaf);\n    }\n    Object.defineProperty(Eip712MerkleTree.prototype, \"completedSize\", {\n        get: function () {\n            return Math.pow(2, this.depth);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** Returns the array of elements in the tree, padded to the complete size with empty items. */\n    Eip712MerkleTree.prototype.getCompleteElements = function () {\n        var elements = this.elements;\n        return (0, utils_2.fillArray)(__spreadArray([], __read(elements), false), this.completedSize, this.defaultNode);\n    };\n    /** Returns the array of leaf nodes in the tree, padded to the complete size with default hashes. */\n    Eip712MerkleTree.prototype.getCompleteLeaves = function () {\n        var leaves = this.elements.map(this.leafHasher);\n        return (0, utils_2.fillArray)(__spreadArray([], __read(leaves), false), this.completedSize, this.defaultLeaf);\n    };\n    Object.defineProperty(Eip712MerkleTree.prototype, \"root\", {\n        get: function () {\n            return this.tree.getHexRoot();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Eip712MerkleTree.prototype.getProof = function (i) {\n        var leaves = this.getCompleteLeaves();\n        var leaf = leaves[i];\n        var proof = this.tree.getHexProof(leaf, i);\n        var root = this.tree.getHexRoot();\n        return { leaf: leaf, proof: proof, root: root };\n    };\n    Eip712MerkleTree.prototype.getEncodedProofAndSignature = function (i, signature) {\n        var proof = this.getProof(i).proof;\n        return encodeProof(i, proof, signature);\n    };\n    Eip712MerkleTree.prototype.getDataToSign = function () {\n        var layer = this.getCompleteElements();\n        while (layer.length > 2) {\n            layer = (0, utils_2.chunk)(layer, 2);\n        }\n        return layer;\n    };\n    Eip712MerkleTree.prototype.add = function (element) {\n        this.elements.push(element);\n    };\n    Eip712MerkleTree.prototype.getBulkOrderHash = function () {\n        var structHash = this.encoder.hashStruct(\"BulkOrder\", {\n            tree: this.getDataToSign(),\n        });\n        var leaves = this.getCompleteLeaves().map(utils_2.hexToBuffer);\n        var rootHash = (0, utils_2.bufferToHex)((0, utils_2.getRoot)(leaves, false));\n        var typeHash = (0, utils_1.keccak256)((0, utils_1.toUtf8Bytes)(this.encoder._types.BulkOrder));\n        var bulkOrderHash = (0, utils_1.keccak256)((0, utils_1.hexConcat)([typeHash, rootHash]));\n        if (bulkOrderHash !== structHash) {\n            throw new Error(\"expected derived bulk order hash to match\");\n        }\n        return structHash;\n    };\n    return Eip712MerkleTree;\n}());\nexports.Eip712MerkleTree = Eip712MerkleTree;\n//# sourceMappingURL=Eip712MerkleTree.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBulkOrderTypeHashes = exports.getBulkOrderTypeHash = exports.getBulkOrderTree = exports.getBulkOrderTreeHeight = void 0;\nvar utils_1 = require(\"ethers/lib/utils\");\nvar Eip712MerkleTree_1 = require(\"./Eip712MerkleTree\");\nvar defaults_1 = require(\"./defaults\");\nvar utils_2 = require(\"./utils\");\nvar constants_1 = require(\"../../constants\");\nfunction getBulkOrderTypes(height) {\n    var types = __assign({}, constants_1.EIP_712_BULK_ORDER_TYPE);\n    types.BulkOrder = [\n        { name: \"tree\", type: \"OrderComponents\".concat(\"[2]\".repeat(height)) },\n    ];\n    return types;\n}\nfunction getBulkOrderTreeHeight(length) {\n    return Math.max(Math.ceil(Math.log2(length)), 1);\n}\nexports.getBulkOrderTreeHeight = getBulkOrderTreeHeight;\nfunction getBulkOrderTree(orderComponents, startIndex, height) {\n    if (startIndex === void 0) { startIndex = 0; }\n    if (height === void 0) { height = getBulkOrderTreeHeight(orderComponents.length + startIndex); }\n    var types = getBulkOrderTypes(height);\n    var defaultNode = defaults_1.DefaultGetter.from(types, \"OrderComponents\");\n    var elements = __spreadArray([], __read(orderComponents), false);\n    if (startIndex > 0) {\n        elements = __spreadArray(__spreadArray([], __read((0, utils_2.fillArray)([], startIndex, defaultNode)), false), __read(orderComponents), false);\n    }\n    var tree = new Eip712MerkleTree_1.Eip712MerkleTree(types, \"BulkOrder\", \"OrderComponents\", elements, height);\n    return tree;\n}\nexports.getBulkOrderTree = getBulkOrderTree;\nfunction getBulkOrderTypeHash(height) {\n    var types = getBulkOrderTypes(height);\n    var encoder = utils_1._TypedDataEncoder.from(types);\n    var typeString = (0, utils_1.toUtf8Bytes)(encoder._types.BulkOrder);\n    return (0, utils_1.keccak256)(typeString);\n}\nexports.getBulkOrderTypeHash = getBulkOrderTypeHash;\nfunction getBulkOrderTypeHashes(maxHeight) {\n    var typeHashes = [];\n    for (var i = 0; i < maxHeight; i++) {\n        typeHashes.push(getBulkOrderTypeHash(i + 1));\n    }\n    return typeHashes;\n}\nexports.getBulkOrderTypeHashes = getBulkOrderTypeHashes;\n//# sourceMappingURL=bulk-orders.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGetter = void 0;\nvar logger_1 = require(\"@ethersproject/logger\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar logger = new logger_1.Logger(\"defaults\");\nvar baseDefaults = {\n    integer: 0,\n    address: (0, utils_1.hexZeroPad)(\"0x\", 20),\n    bool: false,\n    bytes: \"0x\",\n    string: \"\",\n};\nvar isNullish = function (value) {\n    if (value === undefined)\n        return false;\n    return (value !== undefined &&\n        value !== null &&\n        (([\"string\", \"number\"].includes(typeof value) &&\n            BigInt(value) === BigInt(0)) ||\n            (Array.isArray(value) && value.every(isNullish)) ||\n            (typeof value === \"object\" && Object.values(value).every(isNullish)) ||\n            (typeof value === \"boolean\" && value === false)));\n};\nfunction getDefaultForBaseType(type) {\n    var _a;\n    // bytesXX\n    var _b = __read((_a = type.match(/^bytes(\\d+)$/)) !== null && _a !== void 0 ? _a : [], 2), width = _b[1];\n    if (width)\n        return (0, utils_1.hexZeroPad)(\"0x\", parseInt(width));\n    if (type.match(/^(u?)int(\\d*)$/))\n        type = \"integer\";\n    return baseDefaults[type];\n}\nvar DefaultGetter = /** @class */ (function () {\n    function DefaultGetter(types) {\n        this.types = types;\n        this.defaultValues = {};\n        for (var name_1 in types) {\n            var defaultValue = this.getDefaultValue(name_1);\n            this.defaultValues[name_1] = defaultValue;\n            if (!isNullish(defaultValue)) {\n                logger.throwError(\"Got non-empty value for type \".concat(name_1, \" in default generator: \").concat(defaultValue));\n            }\n        }\n    }\n    DefaultGetter.from = function (types, type) {\n        var defaultValues = new DefaultGetter(types).defaultValues;\n        if (type)\n            return defaultValues[type];\n        return defaultValues;\n    };\n    /* eslint-enable no-dupe-class-members */\n    DefaultGetter.prototype.getDefaultValue = function (type) {\n        var _this = this;\n        if (this.defaultValues[type])\n            return this.defaultValues[type];\n        // Basic type (address, bool, uint256, etc)\n        var basic = getDefaultForBaseType(type);\n        if (basic !== undefined)\n            return basic;\n        // Array\n        var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            var subtype = match[1];\n            var length_1 = parseInt(match[3]);\n            if (length_1 > 0) {\n                var baseValue = this.getDefaultValue(subtype);\n                return Array(length_1).fill(baseValue);\n            }\n            return [];\n        }\n        // Struct\n        var fields = this.types[type];\n        if (fields) {\n            return fields.reduce(function (obj, _a) {\n                var _b;\n                var name = _a.name, type = _a.type;\n                return (__assign(__assign({}, obj), (_b = {}, _b[name] = _this.getDefaultValue(type), _b)));\n            }, {});\n        }\n        return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    };\n    return DefaultGetter;\n}());\nexports.DefaultGetter = DefaultGetter;\n//# sourceMappingURL=defaults.js.map","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNextLayer = exports.getRoot = exports.fillArray = exports.hashConcat = exports.bufferKeccak = exports.hexToBuffer = exports.bufferToHex = exports.chunk = exports.makeArray = void 0;\nvar utils_1 = require(\"ethers/lib/utils\");\nvar makeArray = function (len, getValue) {\n    return Array(len)\n        .fill(0)\n        .map(function (_, i) { return getValue(i); });\n};\nexports.makeArray = makeArray;\nvar chunk = function (array, size) {\n    return (0, exports.makeArray)(Math.ceil(array.length / size), function (i) {\n        return array.slice(i * size, (i + 1) * size);\n    });\n};\nexports.chunk = chunk;\nvar bufferToHex = function (buf) { return (0, utils_1.hexlify)(buf); };\nexports.bufferToHex = bufferToHex;\nvar hexToBuffer = function (value) {\n    return Buffer.from(value.slice(2), \"hex\");\n};\nexports.hexToBuffer = hexToBuffer;\nvar bufferKeccak = function (value) { return (0, exports.hexToBuffer)((0, utils_1.keccak256)(value)); };\nexports.bufferKeccak = bufferKeccak;\nvar hashConcat = function (arr) { return (0, exports.bufferKeccak)((0, utils_1.hexConcat)(arr)); };\nexports.hashConcat = hashConcat;\nvar fillArray = function (arr, length, value) {\n    if (length > arr.length)\n        arr.push.apply(arr, __spreadArray([], __read(Array(length - arr.length).fill(value)), false));\n    return arr;\n};\nexports.fillArray = fillArray;\nvar getRoot = function (elements, hashLeaves) {\n    if (hashLeaves === void 0) { hashLeaves = true; }\n    if (elements.length === 0)\n        throw new Error(\"empty tree\");\n    var leaves = elements.map(function (e) {\n        var leaf = Buffer.isBuffer(e) ? e : (0, exports.hexToBuffer)(e);\n        return hashLeaves ? (0, exports.bufferKeccak)(leaf) : leaf;\n    });\n    var layers = [leaves];\n    // Get next layer until we reach the root\n    while (layers[layers.length - 1].length > 1) {\n        layers.push((0, exports.getNextLayer)(layers[layers.length - 1]));\n    }\n    return layers[layers.length - 1][0];\n};\nexports.getRoot = getRoot;\nvar getNextLayer = function (elements) {\n    return (0, exports.chunk)(elements, 2).map(exports.hashConcat);\n};\nexports.getNextLayer = getNextLayer;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAdvancedOrderNumeratorDenominator = exports.generateFulfillOrdersFulfillments = exports.fulfillAvailableOrders = exports.validateAndSanitizeFromOrderStatus = exports.fulfillStandardOrder = exports.fulfillBasicOrder = exports.shouldUseBasicFulfill = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balanceAndApprovalCheck_1 = require(\"./balanceAndApprovalCheck\");\nvar criteria_1 = require(\"./criteria\");\nvar gcd_1 = require(\"./gcd\");\nvar item_1 = require(\"./item\");\nvar order_1 = require(\"./order\");\nvar usecase_1 = require(\"./usecase\");\n/**\n * We should use basic fulfill order if the order adheres to the following criteria:\n * 1. The order should not be partially filled.\n * 2. The order only contains a single offer item and contains at least one consideration item\n * 3. The order does not offer an item with Ether (or other native tokens) as its item type.\n * 4. The order only contains a single ERC721 or ERC1155 item and that item is not criteria-based\n * 5. All other items have the same Native or ERC20 item type and token\n * 6. All items have the same startAmount and endAmount\n * 7. First consideration item must contain the offerer as the recipient\n * 8. If the order has multiple consideration items and all consideration items other than the\n *    first consideration item have the same item type as the offered item, the offered item\n *    amount is not less than the sum of all consideration item amounts excluding the\n *    first consideration item amount\n * 9. The token on native currency items needs to be set to the null address and the identifier on\n *    currencies needs to be zero, and the amounts on the 721 item need to be 1\n */\nvar shouldUseBasicFulfill = function (_a, totalFilled) {\n    var offer = _a.offer, consideration = _a.consideration, offerer = _a.offerer;\n    // 1. The order must not be partially filled\n    if (!totalFilled.eq(0)) {\n        return false;\n    }\n    // 2. Must be single offer and at least one consideration\n    if (offer.length > 1 || consideration.length === 0) {\n        return false;\n    }\n    var allItems = __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false);\n    var nfts = allItems.filter(function (_a) {\n        var itemType = _a.itemType;\n        return [constants_1.ItemType.ERC721, constants_1.ItemType.ERC1155].includes(itemType);\n    });\n    var nftsWithCriteria = allItems.filter(function (_a) {\n        var itemType = _a.itemType;\n        return (0, item_1.isCriteriaItem)(itemType);\n    });\n    var offersNativeCurrency = (0, item_1.isNativeCurrencyItem)(offer[0]);\n    // 3. The order does not offer an item with Ether (or other native tokens) as its item type.\n    if (offersNativeCurrency) {\n        return false;\n    }\n    // 4. The order only contains a single ERC721 or ERC1155 item and that item is not criteria-based\n    if (nfts.length !== 1 || nftsWithCriteria.length !== 0) {\n        return false;\n    }\n    // 5. All currencies need to have the same address and item type (Native, ERC20)\n    if (!(0, order_1.areAllCurrenciesSame)({ offer: offer, consideration: consideration })) {\n        return false;\n    }\n    // 6. All individual items need to have the same startAmount and endAmount\n    var differentStartAndEndAmount = allItems.some(function (_a) {\n        var startAmount = _a.startAmount, endAmount = _a.endAmount;\n        return startAmount !== endAmount;\n    });\n    if (differentStartAndEndAmount) {\n        return false;\n    }\n    var _b = __read(consideration), firstConsideration = _b[0], restConsideration = _b.slice(1);\n    // 7. First consideration item must contain the offerer as the recipient\n    var firstConsiderationRecipientIsNotOfferer = firstConsideration.recipient.toLowerCase() !== offerer.toLowerCase();\n    if (firstConsiderationRecipientIsNotOfferer) {\n        return false;\n    }\n    // 8. If the order has multiple consideration items and all consideration items other than the\n    // first consideration item have the same item type as the offered item, the offered item\n    // amount is not less than the sum of all consideration item amounts excluding the\n    // first consideration item amount\n    if (consideration.length > 1 &&\n        restConsideration.every(function (item) { return item.itemType === offer[0].itemType; }) &&\n        (0, order_1.totalItemsAmount)(restConsideration).endAmount.gt(offer[0].endAmount)) {\n        return false;\n    }\n    var currencies = allItems.filter(item_1.isCurrencyItem);\n    //  9. The token on native currency items needs to be set to the null address and the identifier on\n    //  currencies needs to be zero, and the amounts on the 721 item need to be 1\n    var nativeCurrencyIsZeroAddress = currencies\n        .filter(function (_a) {\n        var itemType = _a.itemType;\n        return itemType === constants_1.ItemType.NATIVE;\n    })\n        .every(function (_a) {\n        var token = _a.token;\n        return token === ethers_1.ethers.constants.AddressZero;\n    });\n    var currencyIdentifiersAreZero = currencies.every(function (_a) {\n        var identifierOrCriteria = _a.identifierOrCriteria;\n        return ethers_1.BigNumber.from(identifierOrCriteria).eq(0);\n    });\n    var erc721sAreSingleAmount = nfts\n        .filter(function (_a) {\n        var itemType = _a.itemType;\n        return itemType === constants_1.ItemType.ERC721;\n    })\n        .every(function (_a) {\n        var endAmount = _a.endAmount;\n        return endAmount === \"1\";\n    });\n    return (nativeCurrencyIsZeroAddress &&\n        currencyIdentifiersAreZero &&\n        erc721sAreSingleAmount);\n};\nexports.shouldUseBasicFulfill = shouldUseBasicFulfill;\nvar offerAndConsiderationFulfillmentMapping = (_a = {},\n    _a[constants_1.ItemType.ERC20] = (_b = {},\n        _b[constants_1.ItemType.ERC721] = constants_1.BasicOrderRouteType.ERC721_TO_ERC20,\n        _b[constants_1.ItemType.ERC1155] = constants_1.BasicOrderRouteType.ERC1155_TO_ERC20,\n        _b),\n    _a[constants_1.ItemType.ERC721] = (_c = {},\n        _c[constants_1.ItemType.NATIVE] = constants_1.BasicOrderRouteType.ETH_TO_ERC721,\n        _c[constants_1.ItemType.ERC20] = constants_1.BasicOrderRouteType.ERC20_TO_ERC721,\n        _c),\n    _a[constants_1.ItemType.ERC1155] = (_d = {},\n        _d[constants_1.ItemType.NATIVE] = constants_1.BasicOrderRouteType.ETH_TO_ERC1155,\n        _d[constants_1.ItemType.ERC20] = constants_1.BasicOrderRouteType.ERC20_TO_ERC1155,\n        _d),\n    _a);\nfunction fulfillBasicOrder(_a, exactApproval) {\n    var _b, _c;\n    var order = _a.order, seaportContract = _a.seaportContract, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator, signer = _a.signer, _d = _a.tips, tips = _d === void 0 ? [] : _d, _e = _a.conduitKey, conduitKey = _e === void 0 ? constants_1.NO_CONDUIT : _e, domain = _a.domain;\n    return __awaiter(this, void 0, void 0, function () {\n        var _f, offer, consideration, considerationIncludingTips, offerItem, _g, forOfferer, forAdditionalRecipients, basicOrderRouteType, additionalRecipients, considerationWithoutOfferItemType, totalNativeAmount, insufficientApprovals, basicOrderParameters, payableOverrides, approvalActions, exchangeAction, actions;\n        return __generator(this, function (_h) {\n            switch (_h.label) {\n                case 0:\n                    _f = order.parameters, offer = _f.offer, consideration = _f.consideration;\n                    considerationIncludingTips = __spreadArray(__spreadArray([], __read(consideration), false), __read(tips), false);\n                    offerItem = offer[0];\n                    _g = __read(considerationIncludingTips), forOfferer = _g[0], forAdditionalRecipients = _g.slice(1);\n                    basicOrderRouteType = (_b = offerAndConsiderationFulfillmentMapping[offerItem.itemType]) === null || _b === void 0 ? void 0 : _b[forOfferer.itemType];\n                    if (basicOrderRouteType === undefined) {\n                        throw new Error(\"Order parameters did not result in a valid basic fulfillment\");\n                    }\n                    additionalRecipients = forAdditionalRecipients.map(function (_a) {\n                        var startAmount = _a.startAmount, recipient = _a.recipient;\n                        return ({\n                            amount: startAmount,\n                            recipient: recipient,\n                        });\n                    });\n                    considerationWithoutOfferItemType = considerationIncludingTips.filter(function (item) { return item.itemType !== offer[0].itemType; });\n                    totalNativeAmount = (_c = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n                        items: considerationWithoutOfferItemType,\n                        criterias: [],\n                        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n                    })[ethers_1.ethers.constants.AddressZero]) === null || _c === void 0 ? void 0 : _c[\"0\"];\n                    insufficientApprovals = (0, balanceAndApprovalCheck_1.validateBasicFulfillBalancesAndApprovals)({\n                        offer: offer,\n                        consideration: considerationIncludingTips,\n                        offererBalancesAndApprovals: offererBalancesAndApprovals,\n                        fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                        timeBasedItemParams: timeBasedItemParams,\n                        offererOperator: offererOperator,\n                        fulfillerOperator: fulfillerOperator,\n                    });\n                    basicOrderParameters = {\n                        offerer: order.parameters.offerer,\n                        offererConduitKey: order.parameters.conduitKey,\n                        zone: order.parameters.zone,\n                        //  Note the use of a \"basicOrderType\" enum;\n                        //  this represents both the usual order type as well as the \"route\"\n                        //  of the basic order (a simple derivation function for the basic order\n                        //  type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\n                        basicOrderType: order.parameters.orderType + 4 * basicOrderRouteType,\n                        offerToken: offerItem.token,\n                        offerIdentifier: offerItem.identifierOrCriteria,\n                        offerAmount: offerItem.endAmount,\n                        considerationToken: forOfferer.token,\n                        considerationIdentifier: forOfferer.identifierOrCriteria,\n                        considerationAmount: forOfferer.endAmount,\n                        startTime: order.parameters.startTime,\n                        endTime: order.parameters.endTime,\n                        salt: order.parameters.salt,\n                        totalOriginalAdditionalRecipients: order.parameters.consideration.length - 1,\n                        signature: order.signature,\n                        fulfillerConduitKey: conduitKey,\n                        additionalRecipients: additionalRecipients,\n                        zoneHash: order.parameters.zoneHash,\n                    };\n                    payableOverrides = { value: totalNativeAmount };\n                    return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, exactApproval, signer)];\n                case 1:\n                    approvalActions = _h.sent();\n                    exchangeAction = {\n                        type: \"exchange\",\n                        transactionMethods: (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillBasicOrder\", [basicOrderParameters, payableOverrides], domain),\n                    };\n                    actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n                    return [2 /*return*/, {\n                            actions: actions,\n                            executeAllActions: function () {\n                                return (0, usecase_1.executeAllActions)(actions);\n                            },\n                        }];\n            }\n        });\n    });\n}\nexports.fulfillBasicOrder = fulfillBasicOrder;\nfunction fulfillStandardOrder(_a, exactApproval) {\n    var _b;\n    var order = _a.order, _c = _a.unitsToFill, unitsToFill = _c === void 0 ? 0 : _c, totalSize = _a.totalSize, totalFilled = _a.totalFilled, offerCriteria = _a.offerCriteria, considerationCriteria = _a.considerationCriteria, _d = _a.tips, tips = _d === void 0 ? [] : _d, extraData = _a.extraData, seaportContract = _a.seaportContract, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator, timeBasedItemParams = _a.timeBasedItemParams, conduitKey = _a.conduitKey, recipientAddress = _a.recipientAddress, signer = _a.signer, domain = _a.domain;\n    return __awaiter(this, void 0, void 0, function () {\n        var orderWithAdjustedFills, _e, offer, consideration, considerationIncludingTips, offerCriteriaItems, considerationCriteriaItems, hasCriteriaItems, totalNativeAmount, insufficientApprovals, payableOverrides, approvalActions, isGift, useAdvanced, orderAccountingForTips, _f, numerator, denominator, exchangeAction, actions;\n        return __generator(this, function (_g) {\n            switch (_g.label) {\n                case 0:\n                    orderWithAdjustedFills = unitsToFill\n                        ? (0, order_1.mapOrderAmountsFromUnitsToFill)(order, {\n                            unitsToFill: unitsToFill,\n                            totalSize: totalSize,\n                        })\n                        : // Else, we adjust the order by the remaining order left to be fulfilled\n                            (0, order_1.mapOrderAmountsFromFilledStatus)(order, {\n                                totalFilled: totalFilled,\n                                totalSize: totalSize,\n                            });\n                    _e = orderWithAdjustedFills.parameters, offer = _e.offer, consideration = _e.consideration;\n                    considerationIncludingTips = __spreadArray(__spreadArray([], __read(consideration), false), __read(tips), false);\n                    offerCriteriaItems = offer.filter(function (_a) {\n                        var itemType = _a.itemType;\n                        return (0, item_1.isCriteriaItem)(itemType);\n                    });\n                    considerationCriteriaItems = considerationIncludingTips.filter(function (_a) {\n                        var itemType = _a.itemType;\n                        return (0, item_1.isCriteriaItem)(itemType);\n                    });\n                    hasCriteriaItems = offerCriteriaItems.length > 0 || considerationCriteriaItems.length > 0;\n                    if (offerCriteriaItems.length !== offerCriteria.length ||\n                        considerationCriteriaItems.length !== considerationCriteria.length) {\n                        throw new Error(\"You must supply the appropriate criterias for criteria based items\");\n                    }\n                    totalNativeAmount = (_b = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n                        items: considerationIncludingTips,\n                        criterias: considerationCriteria,\n                        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n                    })[ethers_1.ethers.constants.AddressZero]) === null || _b === void 0 ? void 0 : _b[\"0\"];\n                    insufficientApprovals = (0, balanceAndApprovalCheck_1.validateStandardFulfillBalancesAndApprovals)({\n                        offer: offer,\n                        consideration: considerationIncludingTips,\n                        offerCriteria: offerCriteria,\n                        considerationCriteria: considerationCriteria,\n                        offererBalancesAndApprovals: offererBalancesAndApprovals,\n                        fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                        timeBasedItemParams: timeBasedItemParams,\n                        offererOperator: offererOperator,\n                        fulfillerOperator: fulfillerOperator,\n                    });\n                    payableOverrides = { value: totalNativeAmount };\n                    return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, exactApproval, signer)];\n                case 1:\n                    approvalActions = _g.sent();\n                    isGift = recipientAddress !== ethers_1.ethers.constants.AddressZero;\n                    useAdvanced = Boolean(unitsToFill) || hasCriteriaItems || isGift;\n                    orderAccountingForTips = __assign(__assign({}, order), { parameters: __assign(__assign({}, order.parameters), { consideration: __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false), totalOriginalConsiderationItems: consideration.length }) });\n                    _f = (0, exports.getAdvancedOrderNumeratorDenominator)(order, unitsToFill), numerator = _f.numerator, denominator = _f.denominator;\n                    exchangeAction = {\n                        type: \"exchange\",\n                        transactionMethods: useAdvanced\n                            ? (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillAdvancedOrder\", [\n                                __assign(__assign({}, orderAccountingForTips), { numerator: numerator, denominator: denominator, extraData: extraData !== null && extraData !== void 0 ? extraData : \"0x\" }),\n                                hasCriteriaItems\n                                    ? (0, criteria_1.generateCriteriaResolvers)({\n                                        orders: [order],\n                                        offerCriterias: [offerCriteria],\n                                        considerationCriterias: [considerationCriteria],\n                                    })\n                                    : [],\n                                conduitKey,\n                                recipientAddress,\n                                payableOverrides,\n                            ], domain)\n                            : (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillOrder\", [orderAccountingForTips, conduitKey, payableOverrides], domain),\n                    };\n                    actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n                    return [2 /*return*/, {\n                            actions: actions,\n                            executeAllActions: function () {\n                                return (0, usecase_1.executeAllActions)(actions);\n                            },\n                        }];\n            }\n        });\n    });\n}\nexports.fulfillStandardOrder = fulfillStandardOrder;\nfunction validateAndSanitizeFromOrderStatus(order, orderStatus) {\n    var isValidated = orderStatus.isValidated, isCancelled = orderStatus.isCancelled, totalFilled = orderStatus.totalFilled, totalSize = orderStatus.totalSize;\n    if (totalSize.gt(0) && totalFilled.div(totalSize).eq(1)) {\n        throw new Error(\"The order you are trying to fulfill is already filled\");\n    }\n    if (isCancelled) {\n        throw new Error(\"The order you are trying to fulfill is cancelled\");\n    }\n    if (isValidated) {\n        // If the order is already validated, manually wipe the signature off of the order to save gas\n        return { parameters: __assign({}, order.parameters), signature: \"0x\" };\n    }\n    return order;\n}\nexports.validateAndSanitizeFromOrderStatus = validateAndSanitizeFromOrderStatus;\nfunction fulfillAvailableOrders(_a) {\n    var ordersMetadata = _a.ordersMetadata, seaportContract = _a.seaportContract, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, fulfillerOperator = _a.fulfillerOperator, currentBlockTimestamp = _a.currentBlockTimestamp, ascendingAmountTimestampBuffer = _a.ascendingAmountTimestampBuffer, conduitKey = _a.conduitKey, signer = _a.signer, recipientAddress = _a.recipientAddress, exactApproval = _a.exactApproval, domain = _a.domain;\n    return __awaiter(this, void 0, void 0, function () {\n        var sanitizedOrdersMetadata, ordersMetadataWithAdjustedFills, totalNativeAmount, totalInsufficientApprovals, criteriaOffersAndConsiderations, hasCriteriaItems, addApprovalIfNeeded, payableOverrides, approvalActions, advancedOrdersWithTips, _b, offerFulfillments, considerationFulfillments, exchangeAction, actions;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    sanitizedOrdersMetadata = ordersMetadata.map(function (orderMetadata) { return (__assign(__assign({}, orderMetadata), { order: validateAndSanitizeFromOrderStatus(orderMetadata.order, orderMetadata.orderStatus) })); });\n                    ordersMetadataWithAdjustedFills = sanitizedOrdersMetadata.map(function (orderMetadata) { return (__assign(__assign({}, orderMetadata), { \n                        // If we are supplying units to fill, we adjust the order by the minimum of the amount to fill and\n                        // the remaining order left to be fulfilled\n                        order: orderMetadata.unitsToFill\n                            ? (0, order_1.mapOrderAmountsFromUnitsToFill)(orderMetadata.order, {\n                                unitsToFill: orderMetadata.unitsToFill,\n                                totalSize: orderMetadata.orderStatus.totalSize,\n                            })\n                            : // Else, we adjust the order by the remaining order left to be fulfilled\n                                (0, order_1.mapOrderAmountsFromFilledStatus)(orderMetadata.order, {\n                                    totalFilled: orderMetadata.orderStatus.totalFilled,\n                                    totalSize: orderMetadata.orderStatus.totalSize,\n                                }) })); });\n                    totalNativeAmount = ethers_1.BigNumber.from(0);\n                    totalInsufficientApprovals = [];\n                    criteriaOffersAndConsiderations = sanitizedOrdersMetadata\n                        .flatMap(function (orderMetadata) { return [\n                        orderMetadata.order.parameters.offer,\n                        orderMetadata.order.parameters.consideration,\n                    ]; })\n                        .flat()\n                        .filter(function (_a) {\n                        var itemType = _a.itemType;\n                        return (0, item_1.isCriteriaItem)(itemType);\n                    });\n                    hasCriteriaItems = criteriaOffersAndConsiderations.length > 0;\n                    addApprovalIfNeeded = function (orderInsufficientApprovals) {\n                        orderInsufficientApprovals.forEach(function (insufficientApproval) {\n                            if (!totalInsufficientApprovals.find(function (approval) { return approval.token === insufficientApproval.token; })) {\n                                totalInsufficientApprovals.push(insufficientApproval);\n                            }\n                        });\n                    };\n                    ordersMetadataWithAdjustedFills.forEach(function (_a) {\n                        var _b, _c;\n                        var order = _a.order, tips = _a.tips, offerCriteria = _a.offerCriteria, considerationCriteria = _a.considerationCriteria, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, offererOperator = _a.offererOperator;\n                        var considerationIncludingTips = __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false);\n                        var timeBasedItemParams = {\n                            startTime: order.parameters.startTime,\n                            endTime: order.parameters.endTime,\n                            currentBlockTimestamp: currentBlockTimestamp,\n                            ascendingAmountTimestampBuffer: ascendingAmountTimestampBuffer,\n                            isConsiderationItem: true,\n                        };\n                        totalNativeAmount = totalNativeAmount.add((_c = (_b = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n                            items: considerationIncludingTips,\n                            criterias: considerationCriteria,\n                            timeBasedItemParams: timeBasedItemParams,\n                        })[ethers_1.ethers.constants.AddressZero]) === null || _b === void 0 ? void 0 : _b[\"0\"]) !== null && _c !== void 0 ? _c : ethers_1.BigNumber.from(0));\n                        var insufficientApprovals = (0, balanceAndApprovalCheck_1.validateStandardFulfillBalancesAndApprovals)({\n                            offer: order.parameters.offer,\n                            consideration: considerationIncludingTips,\n                            offerCriteria: offerCriteria,\n                            considerationCriteria: considerationCriteria,\n                            offererBalancesAndApprovals: offererBalancesAndApprovals,\n                            fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                            timeBasedItemParams: timeBasedItemParams,\n                            offererOperator: offererOperator,\n                            fulfillerOperator: fulfillerOperator,\n                        });\n                        var offerCriteriaItems = order.parameters.offer.filter(function (_a) {\n                            var itemType = _a.itemType;\n                            return (0, item_1.isCriteriaItem)(itemType);\n                        });\n                        var considerationCriteriaItems = considerationIncludingTips.filter(function (_a) {\n                            var itemType = _a.itemType;\n                            return (0, item_1.isCriteriaItem)(itemType);\n                        });\n                        if (offerCriteriaItems.length !== offerCriteria.length ||\n                            considerationCriteriaItems.length !== considerationCriteria.length) {\n                            throw new Error(\"You must supply the appropriate criterias for criteria based items\");\n                        }\n                        addApprovalIfNeeded(insufficientApprovals);\n                    });\n                    payableOverrides = { value: totalNativeAmount };\n                    return [4 /*yield*/, (0, approval_1.getApprovalActions)(totalInsufficientApprovals, exactApproval, signer)];\n                case 1:\n                    approvalActions = _c.sent();\n                    advancedOrdersWithTips = sanitizedOrdersMetadata.map(function (_a) {\n                        var order = _a.order, _b = _a.unitsToFill, unitsToFill = _b === void 0 ? 0 : _b, tips = _a.tips, extraData = _a.extraData;\n                        var _c = (0, exports.getAdvancedOrderNumeratorDenominator)(order, unitsToFill), numerator = _c.numerator, denominator = _c.denominator;\n                        var considerationIncludingTips = __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false);\n                        return __assign(__assign({}, order), { parameters: __assign(__assign({}, order.parameters), { consideration: considerationIncludingTips, totalOriginalConsiderationItems: order.parameters.consideration.length }), numerator: numerator, denominator: denominator, extraData: extraData });\n                    });\n                    _b = generateFulfillOrdersFulfillments(ordersMetadata), offerFulfillments = _b.offerFulfillments, considerationFulfillments = _b.considerationFulfillments;\n                    exchangeAction = {\n                        type: \"exchange\",\n                        transactionMethods: (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillAvailableAdvancedOrders\", [\n                            advancedOrdersWithTips,\n                            hasCriteriaItems\n                                ? (0, criteria_1.generateCriteriaResolvers)({\n                                    orders: ordersMetadata.map(function (_a) {\n                                        var order = _a.order;\n                                        return order;\n                                    }),\n                                    offerCriterias: ordersMetadata.map(function (_a) {\n                                        var offerCriteria = _a.offerCriteria;\n                                        return offerCriteria;\n                                    }),\n                                    considerationCriterias: ordersMetadata.map(function (_a) {\n                                        var considerationCriteria = _a.considerationCriteria;\n                                        return considerationCriteria;\n                                    }),\n                                })\n                                : [],\n                            offerFulfillments,\n                            considerationFulfillments,\n                            conduitKey,\n                            recipientAddress,\n                            advancedOrdersWithTips.length,\n                            payableOverrides,\n                        ], domain),\n                    };\n                    actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n                    return [2 /*return*/, {\n                            actions: actions,\n                            executeAllActions: function () {\n                                return (0, usecase_1.executeAllActions)(actions);\n                            },\n                        }];\n            }\n        });\n    });\n}\nexports.fulfillAvailableOrders = fulfillAvailableOrders;\nfunction generateFulfillOrdersFulfillments(ordersMetadata) {\n    var hashAggregateKey = function (_a) {\n        var sourceOrDestination = _a.sourceOrDestination, _b = _a.operator, operator = _b === void 0 ? \"\" : _b, token = _a.token, identifier = _a.identifier;\n        return \"\".concat(sourceOrDestination, \"-\").concat(operator, \"-\").concat(token, \"-\").concat(identifier);\n    };\n    var offerAggregatedFulfillments = {};\n    var considerationAggregatedFulfillments = {};\n    ordersMetadata.forEach(function (_a, orderIndex) {\n        var order = _a.order, offererOperator = _a.offererOperator, offerCriteria = _a.offerCriteria;\n        var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(order.parameters.offer, offerCriteria);\n        return order.parameters.offer.forEach(function (item, itemIndex) {\n            var _a, _b, _c;\n            var aggregateKey = \"\".concat(hashAggregateKey({\n                sourceOrDestination: order.parameters.offerer,\n                operator: offererOperator,\n                token: item.token,\n                identifier: (_b = (_a = itemToCriteria.get(item)) === null || _a === void 0 ? void 0 : _a.identifier) !== null && _b !== void 0 ? _b : item.identifierOrCriteria,\n                // We tack on the index to ensure that erc721s can never be aggregated and instead must be in separate arrays\n            })).concat((0, item_1.isErc721Item)(item.itemType) ? itemIndex : \"\");\n            offerAggregatedFulfillments[aggregateKey] = __spreadArray(__spreadArray([], __read(((_c = offerAggregatedFulfillments[aggregateKey]) !== null && _c !== void 0 ? _c : [])), false), [\n                { orderIndex: orderIndex, itemIndex: itemIndex },\n            ], false);\n        });\n    });\n    ordersMetadata.forEach(function (_a, orderIndex) {\n        var order = _a.order, considerationCriteria = _a.considerationCriteria, tips = _a.tips;\n        var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(order.parameters.consideration, considerationCriteria);\n        return __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false).forEach(function (item, itemIndex) {\n            var _a, _b, _c;\n            var aggregateKey = \"\".concat(hashAggregateKey({\n                sourceOrDestination: item.recipient,\n                token: item.token,\n                identifier: (_b = (_a = itemToCriteria.get(item)) === null || _a === void 0 ? void 0 : _a.identifier) !== null && _b !== void 0 ? _b : item.identifierOrCriteria,\n                // We tack on the index to ensure that erc721s can never be aggregated and instead must be in separate arrays\n            })).concat((0, item_1.isErc721Item)(item.itemType) ? itemIndex : \"\");\n            considerationAggregatedFulfillments[aggregateKey] = __spreadArray(__spreadArray([], __read(((_c = considerationAggregatedFulfillments[aggregateKey]) !== null && _c !== void 0 ? _c : [])), false), [\n                { orderIndex: orderIndex, itemIndex: itemIndex },\n            ], false);\n        });\n    });\n    return {\n        offerFulfillments: Object.values(offerAggregatedFulfillments),\n        considerationFulfillments: Object.values(considerationAggregatedFulfillments),\n    };\n}\nexports.generateFulfillOrdersFulfillments = generateFulfillOrdersFulfillments;\nvar getAdvancedOrderNumeratorDenominator = function (order, unitsToFill) {\n    // Used for advanced order cases\n    var maxUnits = (0, item_1.getMaximumSizeForOrder)(order);\n    var unitsToFillBn = ethers_1.BigNumber.from(unitsToFill);\n    // Reduce the numerator/denominator as optimization\n    var unitsGcd = (0, gcd_1.gcd)(unitsToFillBn, maxUnits);\n    var numerator = unitsToFill\n        ? unitsToFillBn.div(unitsGcd)\n        : ethers_1.BigNumber.from(1);\n    var denominator = unitsToFill ? maxUnits.div(unitsGcd) : ethers_1.BigNumber.from(1);\n    return { numerator: numerator, denominator: denominator };\n};\nexports.getAdvancedOrderNumeratorDenominator = getAdvancedOrderNumeratorDenominator;\n//# sourceMappingURL=fulfill.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findGcd = exports.gcd = void 0;\nvar ethers_1 = require(\"ethers\");\nvar gcd = function (a, b) {\n    var bnA = ethers_1.BigNumber.from(a);\n    var bnB = ethers_1.BigNumber.from(b);\n    if (bnA.eq(0)) {\n        return bnB;\n    }\n    return (0, exports.gcd)(bnB.mod(a), bnA);\n};\nexports.gcd = gcd;\nvar findGcd = function (elements) {\n    var result = ethers_1.BigNumber.from(elements[0]);\n    for (var i = 1; i < elements.length; i++) {\n        result = (0, exports.gcd)(elements[i], result);\n        if (result.eq(1)) {\n            return result;\n        }\n    }\n    return result;\n};\nexports.findGcd = findGcd;\n//# sourceMappingURL=gcd.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMaximumSizeForOrder = exports.getSummedTokenAndIdentifierAmounts = exports.getPresentItemAmount = exports.isCriteriaItem = exports.isErc1155Item = exports.isErc721Item = exports.isErc20Item = exports.isNativeCurrencyItem = exports.isCurrencyItem = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar criteria_1 = require(\"./criteria\");\nvar gcd_1 = require(\"./gcd\");\nvar isCurrencyItem = function (_a) {\n    var itemType = _a.itemType;\n    return [constants_1.ItemType.NATIVE, constants_1.ItemType.ERC20].includes(itemType);\n};\nexports.isCurrencyItem = isCurrencyItem;\nvar isNativeCurrencyItem = function (_a) {\n    var itemType = _a.itemType;\n    return itemType === constants_1.ItemType.NATIVE;\n};\nexports.isNativeCurrencyItem = isNativeCurrencyItem;\nvar isErc20Item = function (itemType) {\n    return itemType === constants_1.ItemType.ERC20;\n};\nexports.isErc20Item = isErc20Item;\nvar isErc721Item = function (itemType) {\n    return [constants_1.ItemType.ERC721, constants_1.ItemType.ERC721_WITH_CRITERIA].includes(itemType);\n};\nexports.isErc721Item = isErc721Item;\nvar isErc1155Item = function (itemType) {\n    return [constants_1.ItemType.ERC1155, constants_1.ItemType.ERC1155_WITH_CRITERIA].includes(itemType);\n};\nexports.isErc1155Item = isErc1155Item;\nvar isCriteriaItem = function (itemType) {\n    return [constants_1.ItemType.ERC721_WITH_CRITERIA, constants_1.ItemType.ERC1155_WITH_CRITERIA].includes(itemType);\n};\nexports.isCriteriaItem = isCriteriaItem;\nvar getPresentItemAmount = function (_a) {\n    var startAmount = _a.startAmount, endAmount = _a.endAmount, timeBasedItemParams = _a.timeBasedItemParams;\n    var startAmountBn = ethers_1.BigNumber.from(startAmount);\n    var endAmountBn = ethers_1.BigNumber.from(endAmount);\n    if (!timeBasedItemParams) {\n        return startAmountBn.gt(endAmountBn) ? startAmountBn : endAmountBn;\n    }\n    var isConsiderationItem = timeBasedItemParams.isConsiderationItem, currentBlockTimestamp = timeBasedItemParams.currentBlockTimestamp, ascendingAmountTimestampBuffer = timeBasedItemParams.ascendingAmountTimestampBuffer, startTime = timeBasedItemParams.startTime, endTime = timeBasedItemParams.endTime;\n    var duration = ethers_1.BigNumber.from(endTime).sub(startTime);\n    var isAscending = endAmountBn.gt(startAmount);\n    var adjustedBlockTimestamp = ethers_1.BigNumber.from(isAscending\n        ? currentBlockTimestamp + ascendingAmountTimestampBuffer\n        : currentBlockTimestamp);\n    if (adjustedBlockTimestamp.lt(startTime)) {\n        return startAmountBn;\n    }\n    var elapsed = (adjustedBlockTimestamp.gt(endTime)\n        ? ethers_1.BigNumber.from(endTime)\n        : adjustedBlockTimestamp).sub(startTime);\n    var remaining = duration.sub(elapsed);\n    // Adjust amounts based on current time\n    // For offer items, we round down\n    // For consideration items, we round up\n    return startAmountBn\n        .mul(remaining)\n        .add(endAmountBn.mul(elapsed))\n        .add(isConsiderationItem ? duration.sub(1) : 0)\n        .div(duration);\n};\nexports.getPresentItemAmount = getPresentItemAmount;\nvar getSummedTokenAndIdentifierAmounts = function (_a) {\n    var items = _a.items, criterias = _a.criterias, timeBasedItemParams = _a.timeBasedItemParams;\n    var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(items, criterias);\n    var tokenAndIdentifierToSummedAmount = items.reduce(function (map, item) {\n        var _a, _b;\n        var _c, _d, _e, _f;\n        var identifierOrCriteria = (_d = (_c = itemToCriteria.get(item)) === null || _c === void 0 ? void 0 : _c.identifier) !== null && _d !== void 0 ? _d : item.identifierOrCriteria;\n        return __assign(__assign({}, map), (_a = {}, _a[item.token] = __assign(__assign({}, map[item.token]), (_b = {}, _b[identifierOrCriteria] = ((_f = (_e = map[item.token]) === null || _e === void 0 ? void 0 : _e[identifierOrCriteria]) !== null && _f !== void 0 ? _f : ethers_1.BigNumber.from(0)).add((0, exports.getPresentItemAmount)({\n            startAmount: item.startAmount,\n            endAmount: item.endAmount,\n            timeBasedItemParams: timeBasedItemParams,\n        })), _b)), _a));\n    }, {});\n    return tokenAndIdentifierToSummedAmount;\n};\nexports.getSummedTokenAndIdentifierAmounts = getSummedTokenAndIdentifierAmounts;\n/**\n * Returns the maximum size of units possible for the order\n * If any of the items on a partially fillable order specify a different \"startAmount\" and \"endAmount\n * (e.g. they are ascending-amount or descending-amount items), the fraction will be applied to both amounts\n * prior to determining the current price. This ensures that cleanly divisible amounts can be chosen when\n * constructing the order without a dependency on the time when the order is ultimately fulfilled.\n */\nvar getMaximumSizeForOrder = function (_a) {\n    var _b = _a.parameters, offer = _b.offer, consideration = _b.consideration;\n    var allItems = __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false);\n    var amounts = allItems.flatMap(function (_a) {\n        var startAmount = _a.startAmount, endAmount = _a.endAmount;\n        return [\n            startAmount,\n            endAmount,\n        ];\n    });\n    return (0, gcd_1.findGcd)(amounts);\n};\nexports.getMaximumSizeForOrder = getMaximumSizeForOrder;\n//# sourceMappingURL=item.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleTree = void 0;\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar merkletreejs_1 = __importDefault(require(\"merkletreejs\"));\nvar hashIdentifier = function (identifier) {\n    return (0, utils_1.keccak256)(Buffer.from(ethers_1.BigNumber.from(identifier).toHexString().slice(2).padStart(64, \"0\"), \"hex\"));\n};\n/**\n * Simple wrapper over the MerkleTree in merkletreejs.\n * Handles hashing identifiers to be compatible with Seaport.\n */\nvar MerkleTree = /** @class */ (function () {\n    function MerkleTree(identifiers) {\n        this.tree = new merkletreejs_1.default(identifiers.map(hashIdentifier), utils_1.keccak256, {\n            sort: true,\n        });\n    }\n    MerkleTree.prototype.getProof = function (identifier) {\n        return this.tree.getHexProof(hashIdentifier(identifier));\n    };\n    MerkleTree.prototype.getRoot = function () {\n        return this.tree.getRoot().toString(\"hex\") ? this.tree.getHexRoot() : \"0\";\n    };\n    return MerkleTree;\n}());\nexports.MerkleTree = MerkleTree;\n//# sourceMappingURL=merkletree.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldUseMatchForFulfill = exports.generateRandomSaltWithDomain = exports.generateRandomSalt = exports.mapOrderAmountsFromUnitsToFill = exports.mapOrderAmountsFromFilledStatus = exports.totalItemsAmount = exports.areAllCurrenciesSame = exports.mapInputItemToOfferItem = exports.deductFees = exports.feeToConsiderationItem = void 0;\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar constants_1 = require(\"../constants\");\nvar item_1 = require(\"./item\");\nvar merkletree_1 = require(\"./merkletree\");\nvar multiplyBasisPoints = function (amount, basisPoints) {\n    return ethers_1.BigNumber.from(amount)\n        .mul(ethers_1.BigNumber.from(basisPoints))\n        .div(constants_1.ONE_HUNDRED_PERCENT_BP);\n};\nvar feeToConsiderationItem = function (_a) {\n    var fee = _a.fee, token = _a.token, baseAmount = _a.baseAmount, _b = _a.baseEndAmount, baseEndAmount = _b === void 0 ? baseAmount : _b;\n    return {\n        itemType: token === ethers_1.ethers.constants.AddressZero ? constants_1.ItemType.NATIVE : constants_1.ItemType.ERC20,\n        token: token,\n        identifierOrCriteria: \"0\",\n        startAmount: multiplyBasisPoints(baseAmount, fee.basisPoints).toString(),\n        endAmount: multiplyBasisPoints(baseEndAmount, fee.basisPoints).toString(),\n        recipient: fee.recipient,\n    };\n};\nexports.feeToConsiderationItem = feeToConsiderationItem;\nvar deductFees = function (items, fees) {\n    if (!fees) {\n        return items;\n    }\n    var totalBasisPoints = fees.reduce(function (accBasisPoints, fee) { return accBasisPoints + fee.basisPoints; }, 0);\n    return items.map(function (item) { return (__assign(__assign({}, item), { startAmount: (0, item_1.isCurrencyItem)(item)\n            ? ethers_1.BigNumber.from(item.startAmount)\n                .sub(multiplyBasisPoints(item.startAmount, totalBasisPoints))\n                .toString()\n            : item.startAmount, endAmount: (0, item_1.isCurrencyItem)(item)\n            ? ethers_1.BigNumber.from(item.endAmount)\n                .sub(multiplyBasisPoints(item.endAmount, totalBasisPoints))\n                .toString()\n            : item.endAmount })); });\n};\nexports.deductFees = deductFees;\nvar mapInputItemToOfferItem = function (item) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    // Item is an NFT\n    if (\"itemType\" in item) {\n        // Convert this to a criteria based item\n        if (\"identifiers\" in item || \"criteria\" in item) {\n            var root = \"criteria\" in item\n                ? item.criteria\n                : new merkletree_1.MerkleTree(item.identifiers).getRoot();\n            return {\n                itemType: item.itemType === constants_1.ItemType.ERC721\n                    ? constants_1.ItemType.ERC721_WITH_CRITERIA\n                    : constants_1.ItemType.ERC1155_WITH_CRITERIA,\n                token: item.token,\n                identifierOrCriteria: root,\n                startAmount: (_a = item.amount) !== null && _a !== void 0 ? _a : \"1\",\n                endAmount: (_c = (_b = item.endAmount) !== null && _b !== void 0 ? _b : item.amount) !== null && _c !== void 0 ? _c : \"1\",\n            };\n        }\n        if (\"amount\" in item || \"endAmount\" in item) {\n            return {\n                itemType: item.itemType,\n                token: item.token,\n                identifierOrCriteria: item.identifier,\n                // @ts-ignore\n                startAmount: item.amount,\n                // @ts-ignore\n                endAmount: (_e = (_d = item.endAmount) !== null && _d !== void 0 ? _d : item.amount) !== null && _e !== void 0 ? _e : \"1\",\n            };\n        }\n        return {\n            itemType: item.itemType,\n            token: item.token,\n            identifierOrCriteria: item.identifier,\n            startAmount: \"1\",\n            endAmount: \"1\",\n        };\n    }\n    // Item is a currency\n    return {\n        itemType: item.token && item.token !== ethers_1.ethers.constants.AddressZero\n            ? constants_1.ItemType.ERC20\n            : constants_1.ItemType.NATIVE,\n        token: (_f = item.token) !== null && _f !== void 0 ? _f : ethers_1.ethers.constants.AddressZero,\n        identifierOrCriteria: \"0\",\n        startAmount: item.amount,\n        endAmount: (_g = item.endAmount) !== null && _g !== void 0 ? _g : item.amount,\n    };\n};\nexports.mapInputItemToOfferItem = mapInputItemToOfferItem;\nvar areAllCurrenciesSame = function (_a) {\n    var offer = _a.offer, consideration = _a.consideration;\n    var allItems = __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false);\n    var currencies = allItems.filter(item_1.isCurrencyItem);\n    return currencies.every(function (_a) {\n        var itemType = _a.itemType, token = _a.token;\n        return itemType === currencies[0].itemType &&\n            token.toLowerCase() === currencies[0].token.toLowerCase();\n    });\n};\nexports.areAllCurrenciesSame = areAllCurrenciesSame;\nvar totalItemsAmount = function (items) {\n    var initialValues = {\n        startAmount: ethers_1.BigNumber.from(0),\n        endAmount: ethers_1.BigNumber.from(0),\n    };\n    return items\n        .map(function (_a) {\n        var startAmount = _a.startAmount, endAmount = _a.endAmount;\n        return ({\n            startAmount: startAmount,\n            endAmount: endAmount,\n        });\n    })\n        .reduce(function (_a, _b) {\n        var totalStartAmount = _a.startAmount, totalEndAmount = _a.endAmount;\n        var startAmount = _b.startAmount, endAmount = _b.endAmount;\n        return ({\n            startAmount: totalStartAmount.add(startAmount),\n            endAmount: totalEndAmount.add(endAmount),\n        });\n    }, {\n        startAmount: ethers_1.BigNumber.from(0),\n        endAmount: ethers_1.BigNumber.from(0),\n    });\n};\nexports.totalItemsAmount = totalItemsAmount;\n/**\n * Maps order offer and consideration item amounts based on the order's filled status\n * After applying the fraction, we can view this order as the \"canonical\" order for which we\n * check approvals and balances\n */\nvar mapOrderAmountsFromFilledStatus = function (order, _a) {\n    var totalFilled = _a.totalFilled, totalSize = _a.totalSize;\n    if (totalFilled.eq(0) || totalSize.eq(0)) {\n        return order;\n    }\n    // i.e if totalFilled is 3 and totalSize is 4, there are 1 / 4 order amounts left to fill.\n    var basisPoints = totalSize\n        .sub(totalFilled)\n        .mul(constants_1.ONE_HUNDRED_PERCENT_BP)\n        .div(totalSize);\n    return {\n        parameters: __assign(__assign({}, order.parameters), { offer: order.parameters.offer.map(function (item) { return (__assign(__assign({}, item), { startAmount: multiplyBasisPoints(item.startAmount, basisPoints).toString(), endAmount: multiplyBasisPoints(item.endAmount, basisPoints).toString() })); }), consideration: order.parameters.consideration.map(function (item) { return (__assign(__assign({}, item), { startAmount: multiplyBasisPoints(item.startAmount, basisPoints).toString(), endAmount: multiplyBasisPoints(item.endAmount, basisPoints).toString() })); }) }),\n        signature: order.signature,\n    };\n};\nexports.mapOrderAmountsFromFilledStatus = mapOrderAmountsFromFilledStatus;\nvar multiplyDivision = function (amount, numerator, denominator) { return ethers_1.BigNumber.from(amount).mul(ethers_1.BigNumber.from(numerator)).div(denominator); };\n/**\n * Maps order offer and consideration item amounts based on the units needed to fulfill\n * After applying the fraction, we can view this order as the \"canonical\" order for which we\n * check approvals and balances\n * Returns the numerator and denominator as well, converting this to an AdvancedOrder\n */\nvar mapOrderAmountsFromUnitsToFill = function (order, _a) {\n    var unitsToFill = _a.unitsToFill, totalSize = _a.totalSize;\n    var unitsToFillBn = ethers_1.BigNumber.from(unitsToFill);\n    if (unitsToFillBn.lte(0)) {\n        throw new Error(\"Units to fill must be greater than 1\");\n    }\n    var maxUnits = (0, item_1.getMaximumSizeForOrder)(order);\n    if (totalSize.eq(0)) {\n        totalSize = maxUnits;\n    }\n    return {\n        parameters: __assign(__assign({}, order.parameters), { offer: order.parameters.offer.map(function (item) { return (__assign(__assign({}, item), { startAmount: multiplyDivision(item.startAmount, unitsToFillBn, totalSize).toString(), endAmount: multiplyDivision(item.endAmount, unitsToFillBn, totalSize).toString() })); }), consideration: order.parameters.consideration.map(function (item) { return (__assign(__assign({}, item), { startAmount: multiplyDivision(item.startAmount, unitsToFillBn, totalSize).toString(), endAmount: multiplyDivision(item.endAmount, unitsToFillBn, totalSize).toString() })); }) }),\n        signature: order.signature,\n    };\n};\nexports.mapOrderAmountsFromUnitsToFill = mapOrderAmountsFromUnitsToFill;\nvar generateRandomSalt = function () {\n    return \"0x\".concat(Buffer.from((0, utils_1.randomBytes)(8)).toString(\"hex\").padStart(24, \"0\"));\n};\nexports.generateRandomSalt = generateRandomSalt;\nvar generateRandomSaltWithDomain = function (domain) {\n    return \"0x\".concat(Buffer.from((0, utils_1.concat)([\n        (0, utils_1.keccak256)((0, utils_1.toUtf8Bytes)(domain)).slice(0, 10),\n        Uint8Array.from(Array(20).fill(0)),\n        (0, utils_1.randomBytes)(8),\n    ])).toString(\"hex\"));\n};\nexports.generateRandomSaltWithDomain = generateRandomSaltWithDomain;\nvar shouldUseMatchForFulfill = function () { return true; };\nexports.shouldUseMatchForFulfill = shouldUseMatchForFulfill;\n//# sourceMappingURL=order.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTagFromDomain = exports.getTransactionMethods = exports.executeAllActions = void 0;\nvar utils_1 = require(\"ethers/lib/utils\");\nvar executeAllActions = function (actions) { return __awaiter(void 0, void 0, void 0, function () {\n    var i, action, tx, finalAction;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                i = 0;\n                _a.label = 1;\n            case 1:\n                if (!(i < actions.length - 1)) return [3 /*break*/, 5];\n                action = actions[i];\n                if (!(action.type === \"approval\")) return [3 /*break*/, 4];\n                return [4 /*yield*/, action.transactionMethods.transact()];\n            case 2:\n                tx = _a.sent();\n                return [4 /*yield*/, tx.wait()];\n            case 3:\n                _a.sent();\n                _a.label = 4;\n            case 4:\n                i++;\n                return [3 /*break*/, 1];\n            case 5:\n                finalAction = actions[actions.length - 1];\n                switch (finalAction.type) {\n                    case \"create\":\n                        return [2 /*return*/, finalAction.createOrder()];\n                    case \"createBulk\":\n                        return [2 /*return*/, finalAction.createBulkOrders()];\n                    default:\n                        return [2 /*return*/, finalAction.transactionMethods.transact()];\n                }\n                return [2 /*return*/];\n        }\n    });\n}); };\nexports.executeAllActions = executeAllActions;\nvar instanceOfOverrides = function (obj) {\n    var validKeys = [\n        \"gasLimit\",\n        \"gasPrice\",\n        \"maxFeePerGas\",\n        \"maxPriorityFeePerGas\",\n        \"nonce\",\n        \"type\",\n        \"accessList\",\n        \"customData\",\n        \"ccipReadEnabled\",\n        \"value\",\n        \"blockTag\",\n        \"CallOverrides\",\n    ];\n    return (obj === undefined ||\n        Object.keys(obj).every(function (key) { return validKeys.includes(key); }));\n};\nvar getTransactionMethods = function (contract, method, args, domain) {\n    if (domain === void 0) { domain = \"\"; }\n    var lastArg = args[args.length - 1];\n    var initialOverrides;\n    if (instanceOfOverrides(lastArg)) {\n        initialOverrides = lastArg;\n        args.pop();\n    }\n    var buildTransaction = function (overrides) { return __awaiter(void 0, void 0, void 0, function () {\n        var mergedOverrides, populatedTransaction, tag;\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    mergedOverrides = __assign(__assign({}, initialOverrides), overrides);\n                    return [4 /*yield*/, (_a = contract.populateTransaction)[method].apply(_a, __spreadArray([], __read(__spreadArray(__spreadArray([], __read(args), false), [mergedOverrides], false)), false))];\n                case 1:\n                    populatedTransaction = _b.sent();\n                    tag = (0, exports.getTagFromDomain)(domain);\n                    populatedTransaction.data = populatedTransaction.data + tag;\n                    return [2 /*return*/, populatedTransaction];\n            }\n        });\n    }); };\n    return {\n        callStatic: function (overrides) {\n            var _a;\n            var mergedOverrides = __assign(__assign({}, initialOverrides), overrides);\n            return (_a = contract.callStatic)[method].apply(_a, __spreadArray([], __read(__spreadArray(__spreadArray([], __read(args), false), [mergedOverrides], false)), false));\n        },\n        estimateGas: function (overrides) {\n            var _a;\n            var mergedOverrides = __assign(__assign({}, initialOverrides), overrides);\n            return (_a = contract.estimateGas)[method].apply(_a, __spreadArray([], __read(__spreadArray(__spreadArray([], __read(args), false), [mergedOverrides], false)), false));\n        },\n        transact: function (overrides) { return __awaiter(void 0, void 0, void 0, function () {\n            var mergedOverrides, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        mergedOverrides = __assign(__assign({}, initialOverrides), overrides);\n                        return [4 /*yield*/, buildTransaction(mergedOverrides)];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, contract.signer.sendTransaction(data)];\n                }\n            });\n        }); },\n        buildTransaction: buildTransaction,\n    };\n};\nexports.getTransactionMethods = getTransactionMethods;\nvar getTagFromDomain = function (domain) {\n    return (0, utils_1.keccak256)((0, utils_1.toUtf8Bytes)(domain)).slice(2, 10);\n};\nexports.getTagFromDomain = getTagFromDomain;\n//# sourceMappingURL=usecase.js.map","module.exports = function reverse (src) {\n  var buffer = new Buffer(src.length)\n\n  for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {\n    buffer[i] = src[j]\n    buffer[j] = src[i]\n  }\n\n  return buffer\n}\n",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                var block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t            i--;\n\t        }\n\t        data.sigBytes = i + 1;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn't affect the cipher's security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384('message');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    var Wil = gamma0l + Wi7l;\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + gamma1l;\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + Wi16l;\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Base = void 0;\nconst buffer_1 = require(\"buffer\");\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\nclass Base {\n    /**\n     * print\n     * @desc Prints out a visual representation of the merkle tree.\n     * @example\n     *```js\n     *tree.print()\n     *```\n     */\n    print() {\n        Base.print(this);\n    }\n    /**\n     * bufferIndexOf\n     * @desc Returns the first index of which given buffer is found in array.\n     * @param {Buffer[]} haystack - Array of buffers.\n     * @param {Buffer} needle - Buffer to find.\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.bufferIndexOf(haystack, needle)\n     *```\n     */\n    bufferIndexOf(array, element, isSorted = false) {\n        if (isSorted) {\n            return this.binarySearch(array, element, buffer_1.Buffer.compare);\n        }\n        const eqChecker = (buffer1, buffer2) => buffer1.equals(buffer2);\n        return this.linearSearch(array, element, eqChecker);\n    }\n    /**\n     * binarySearch\n     * @desc Returns the first index of which given item is found in array using binary search.\n     * @param {Buffer[]} array - Array of items.\n     * @param {Buffer} element - Item to find.\n     * @param {Function} compareFunction\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = MerkleTree.binarySearch(array, element, Buffer.compare)\n     *```\n     */\n    static binarySearch(array, element, compareFunction) {\n        let start = 0;\n        let end = array.length - 1;\n        // Iterate while start not meets end\n        while (start <= end) {\n            // Find the mid index\n            const mid = Math.floor((start + end) / 2);\n            // Check if the mid value is greater than, equal to, or less than search element.\n            const ordering = compareFunction(array[mid], element);\n            // If element is present at mid, start iterating for searching first appearance.\n            if (ordering === 0) {\n                // Linear reverse iteration until the first matching item index is found.\n                for (let i = mid - 1; i >= 0; i--) {\n                    if (compareFunction(array[i], element) === 0)\n                        continue;\n                    return i + 1;\n                }\n                return 0;\n            } /* Else look in left or right half accordingly */\n            else if (ordering < 0) {\n                start = mid + 1;\n            }\n            else {\n                end = mid - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * binarySearch\n     * @desc Returns the first index of which given item is found in array using binary search.\n     * @param {Buffer[]} array - Array of items.\n     * @param {Buffer} element - Item to find.\n     * @param {Function} compareFunction\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.binarySearch(array, element, Buffer.compare)\n     *```\n     */\n    binarySearch(array, element, compareFunction) {\n        return Base.binarySearch(array, element, compareFunction);\n    }\n    /**\n     * linearSearch\n     * @desc Returns the first index of which given item is found in array using linear search.\n     * @param {Buffer[]} array - Array of items.\n     * @param {Buffer} element - Item to find.\n     * @param {Function} eqChecker\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = MerkleTree.linearSearch(array, element, (a, b) => a === b)\n     *```\n     */\n    static linearSearch(array, element, eqChecker) {\n        for (let i = 0; i < array.length; i++) {\n            if (eqChecker(array[i], element)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * linearSearch\n     * @desc Returns the first index of which given item is found in array using linear search.\n     * @param {Buffer[]} array - Array of items.\n     * @param {Buffer} element - Item to find.\n     * @param {Function} eqChecker\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.linearSearch(array, element, (a, b) => a === b)\n     *```\n     */\n    linearSearch(array, element, eqChecker) {\n        return Base.linearSearch(array, element, eqChecker);\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer|ArrayBuffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = MerkleTree.bufferify('0x1234')\n     *```\n     */\n    static bufferify(value) {\n        if (!buffer_1.Buffer.isBuffer(value)) {\n            // crypto-js support\n            if (typeof value === 'object' && value.words) {\n                return buffer_1.Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n            }\n            else if (Base.isHexString(value)) {\n                return buffer_1.Buffer.from(value.replace(/^0x/, ''), 'hex');\n            }\n            else if (typeof value === 'string') {\n                return buffer_1.Buffer.from(value);\n            }\n            else if (typeof value === 'bigint') {\n                return buffer_1.Buffer.from(value.toString(16), 'hex');\n            }\n            else if (value instanceof Uint8Array) {\n                return buffer_1.Buffer.from(value.buffer);\n            }\n            else if (typeof value === 'number') {\n                let s = value.toString();\n                if (s.length % 2) {\n                    s = `0${s}`;\n                }\n                return buffer_1.Buffer.from(s, 'hex');\n            }\n            else if (ArrayBuffer.isView(value)) {\n                return buffer_1.Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n            }\n        }\n        return value;\n    }\n    bigNumberify(value) {\n        return Base.bigNumberify(value);\n    }\n    static bigNumberify(value) {\n        if (typeof value === 'bigint') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            if (value.startsWith('0x') && Base.isHexString(value)) {\n                return BigInt('0x' + value.replace('0x', '').toString());\n            }\n            return BigInt(value);\n        }\n        if (buffer_1.Buffer.isBuffer(value)) {\n            return BigInt('0x' + value.toString('hex'));\n        }\n        if (value instanceof Uint8Array) {\n            return BigInt(value);\n        }\n        if (typeof value === 'number') {\n            return BigInt(value);\n        }\n        throw new Error('cannot bigNumberify');\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    static isHexString(v) {\n        return typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n    }\n    /**\n     * print\n     * @desc Prints out a visual representation of the given merkle tree.\n     * @param {Object} tree - Merkle tree instance.\n     * @return {String}\n     * @example\n     *```js\n     *MerkleTree.print(tree)\n     *```\n     */\n    static print(tree) {\n        console.log(tree.toString());\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = tree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    bufferToHex(value, withPrefix = true) {\n        return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    static bufferToHex(value, withPrefix = true) {\n        return `${withPrefix ? '0x' : ''}${(value || buffer_1.Buffer.alloc(0)).toString('hex')}`;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = tree.bufferify('0x1234')\n     *```\n     */\n    bufferify(value) {\n        return Base.bufferify(value);\n    }\n    /**\n     * bufferifyFn\n     * @desc Returns a function that will bufferify the return value.\n     * @param {Function}\n     * @return {Function}\n     *\n     * @example\n     * ```js\n     *const fn = tree.bufferifyFn((value) => sha256(value))\n     *```\n     */\n    bufferifyFn(f) {\n        return (value) => {\n            const v = f(value);\n            if (buffer_1.Buffer.isBuffer(v)) {\n                return v;\n            }\n            if (this.isHexString(v)) {\n                return buffer_1.Buffer.from(v.replace('0x', ''), 'hex');\n            }\n            if (typeof v === 'string') {\n                return buffer_1.Buffer.from(v);\n            }\n            if (typeof v === 'bigint') {\n                return buffer_1.Buffer.from(value.toString(16), 'hex');\n            }\n            if (ArrayBuffer.isView(v)) {\n                return buffer_1.Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n            }\n            // crypto-js support\n            return buffer_1.Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n        };\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    isHexString(value) {\n        return Base.isHexString(value);\n    }\n    /**\n     * log2\n     * @desc Returns the log2 of number.\n     * @param {Number} value\n     * @return {Number}\n     */\n    log2(n) {\n        return n === 1 ? 0 : 1 + this.log2((n / 2) | 0);\n    }\n    /**\n     * zip\n     * @desc Returns true if value is a hex string.\n     * @param {String[]|Number[]|Buffer[]} a - first array\n     * @param {String[]|Number[]|Buffer[]} b -  second array\n     * @return {String[][]|Number[][]|Buffer[][]}\n     *\n     * @example\n     * ```js\n     *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n     *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n     *```\n     */\n    zip(a, b) {\n        return a.map((e, i) => [e, b[i]]);\n    }\n    static hexZeroPad(hexStr, length) {\n        return '0x' + hexStr.replace('0x', '').padStart(length, '0');\n    }\n}\nexports.Base = Base;\nexports.default = Base;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IncrementalMerkleTree = void 0;\nconst Base_1 = __importDefault(require(\"./Base\"));\nconst treeify_1 = __importDefault(require(\"treeify\"));\nclass IncrementalMerkleTree extends Base_1.default {\n    constructor(hashFn, options) {\n        super();\n        this.hashFn = hashFn;\n        if (options.depth) {\n            this.depth = options.depth;\n        }\n        if (options.arity) {\n            this.arity = options.arity;\n        }\n        if (this.depth < 1) {\n            throw new Error('depth must be greater than 0');\n        }\n        if (this.arity < 1) {\n            throw new Error('arity must be greater than 0');\n        }\n        const nodes = [];\n        let zeroValue = options.zeroValue;\n        this.zeroValue = zeroValue;\n        this.zeroes = [];\n        if (this.depth) {\n            for (let i = 0; i < this.depth; i++) {\n                this.zeroes.push(zeroValue);\n                nodes[i] = [];\n                zeroValue = this.hashFn(Array(this.arity).fill(zeroValue));\n            }\n        }\n        this.nodes = nodes;\n        this.root = zeroValue;\n    }\n    getRoot() {\n        return this.root;\n    }\n    getHexRoot() {\n        return this.bufferToHex(this.bufferify(this.getRoot()));\n    }\n    insert(leaf) {\n        if (this.depth && this.arity) {\n            if (this.nodes[0].length >= this.getMaxLeaves()) {\n                throw new Error('tree is full');\n            }\n        }\n        let node = leaf;\n        let index = this.nodes[0].length;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            const children = [];\n            this.nodes[level][index] = node;\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i < this.nodes[level].length) {\n                    children.push(this.nodes[level][i]);\n                }\n                else {\n                    children.push(this.zeroes[level]);\n                }\n            }\n            node = this.hashFn(children);\n            index = Math.floor(index / this.arity);\n        }\n        this.root = node;\n    }\n    delete(index) {\n        this.update(index, this.zeroValue);\n    }\n    update(index, newLeaf) {\n        if (index < 0 || index >= this.nodes[0].length) {\n            throw new Error('out of bounds');\n        }\n        let node = newLeaf;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            const children = [];\n            this.nodes[level][index] = node;\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i < this.nodes[level].length) {\n                    children.push(this.nodes[level][i]);\n                }\n                else {\n                    children.push(this.zeroes[level]);\n                }\n            }\n            node = this.hashFn(children);\n            index = Math.floor(index / this.arity);\n        }\n        this.root = node;\n    }\n    getDepth() {\n        return this.depth;\n    }\n    getArity() {\n        return this.arity;\n    }\n    getMaxLeaves() {\n        return Math.pow(this.depth, this.arity);\n    }\n    indexOf(leaf) {\n        return this.nodes[0].indexOf(leaf);\n    }\n    getLeaves() {\n        const leaves = this.copyList(this.nodes[0]);\n        const index = this.nodes[0].length;\n        for (let i = index; i < this.getMaxLeaves(); i++) {\n            leaves[i] = this.zeroValue;\n        }\n        return leaves;\n    }\n    copyList(list) {\n        return list.map((x) => BigInt(x));\n    }\n    getLayers() {\n        const layers = [];\n        for (const list of this.nodes) {\n            layers.push(this.copyList(list));\n        }\n        if (layers[0].length < this.getMaxLeaves()) {\n            let index = layers[0].length;\n            for (let i = index; i < this.getMaxLeaves(); i++) {\n                layers[0][i] = this.zeroValue;\n            }\n            for (let level = 0; level < this.depth; level++) {\n                const position = index % this.arity;\n                const levelStartIndex = index - position;\n                const levelEndIndex = levelStartIndex + this.arity;\n                for (let i = levelStartIndex; i < levelEndIndex; i++) {\n                    if (i >= layers[level].length) {\n                        layers[level][i] = this.zeroes[level];\n                    }\n                }\n                index = Math.floor(index / this.arity);\n            }\n        }\n        layers.push([this.root]);\n        return layers;\n    }\n    getHexLayers() {\n        return this.getLayers().reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.push(item.map(layer => this.bufferToHex(this.bufferify(layer))));\n            }\n            else {\n                acc.push(item);\n            }\n            return acc;\n        }, []);\n    }\n    getLayersAsObject() {\n        const layers = this.getLayers().map((layer) => layer.map((value) => this.bufferToHex(this.bufferify(value), false)));\n        const objs = [];\n        for (let i = 0; i < layers.length; i++) {\n            const arr = [];\n            for (let j = 0; j < layers[i].length; j++) {\n                const obj = { [layers[i][j]]: null };\n                if (objs.length) {\n                    obj[layers[i][j]] = {};\n                    const a = objs.shift();\n                    const akey = Object.keys(a)[0];\n                    obj[layers[i][j]][akey] = a[akey];\n                    if (objs.length) {\n                        const b = objs.shift();\n                        const bkey = Object.keys(b)[0];\n                        obj[layers[i][j]][bkey] = b[bkey];\n                    }\n                }\n                arr.push(obj);\n            }\n            objs.push(...arr);\n        }\n        return objs[0];\n    }\n    computeRoot() {\n        let node;\n        let index = this.nodes[0].length;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            const children = [];\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i < this.nodes[level].length) {\n                    children.push(this.nodes[level][i]);\n                }\n                else {\n                    children.push(this.zeroes[level]);\n                }\n            }\n            node = this.hashFn(children);\n            index = Math.floor(index / this.arity);\n        }\n        return node;\n    }\n    getProof(index) {\n        if (index < 0 || index >= this.nodes[0].length) {\n            throw new Error('The leaf does not exist in this tree');\n        }\n        const siblings = [];\n        const pathIndices = [];\n        const leafIndex = index;\n        for (let level = 0; level < this.depth; level += 1) {\n            const position = index % this.arity;\n            const levelStartIndex = index - position;\n            const levelEndIndex = levelStartIndex + this.arity;\n            pathIndices[level] = position;\n            siblings[level] = [];\n            for (let i = levelStartIndex; i < levelEndIndex; i += 1) {\n                if (i !== index) {\n                    if (i < this.nodes[level].length) {\n                        siblings[level].push(this.nodes[level][i]);\n                    }\n                    else {\n                        siblings[level].push(this.zeroes[level]);\n                    }\n                }\n            }\n            index = Math.floor(index / this.arity);\n        }\n        return { root: this.root, leaf: this.nodes[0][leafIndex], pathIndices, siblings };\n    }\n    verify(proof) {\n        let node = proof.leaf;\n        for (let i = 0; i < proof.siblings.length; i += 1) {\n            const children = proof.siblings[i].slice();\n            children.splice(proof.pathIndices[i], 0, node);\n            node = this.hashFn(children);\n        }\n        return proof.root === node;\n    }\n    toString() {\n        return this.toTreeString();\n    }\n    toTreeString() {\n        const obj = this.getLayersAsObject();\n        return treeify_1.default.asTree(obj, true);\n    }\n}\nexports.IncrementalMerkleTree = IncrementalMerkleTree;\nif (typeof window !== 'undefined') {\n    ;\n    window.IncrementalMerkleTree = IncrementalMerkleTree;\n}\nexports.default = IncrementalMerkleTree;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleMountainRange = void 0;\nconst buffer_1 = require(\"buffer\");\nconst sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nconst Base_1 = __importDefault(require(\"./Base\"));\n// @credit: https://github.com/wanseob/solidity-mmr\n/**\n * @desc The index of this MMR implementation starts from 1 not 0.\n */\nclass MerkleMountainRange extends Base_1.default {\n    constructor(hashFn = sha256_1.default, leaves = [], hashLeafFn, peakBaggingFn, hashBranchFn) {\n        super();\n        this.root = buffer_1.Buffer.alloc(0);\n        this.size = 0;\n        this.width = 0;\n        this.hashes = {};\n        this.data = {};\n        leaves = leaves.map(this.bufferify);\n        this.hashFn = this.bufferifyFn(hashFn);\n        this.hashLeafFn = hashLeafFn;\n        this.peakBaggingFn = peakBaggingFn;\n        this.hashBranchFn = hashBranchFn;\n        for (const leaf of leaves) {\n            this.append(leaf);\n        }\n    }\n    /**\n     * @desc This only stores the hashed value of the leaf.\n     * If you need to retrieve the detail data later, use a map to store them.\n     */\n    append(data) {\n        data = this.bufferify(data);\n        const dataHash = this.hashFn(data);\n        const dataHashHex = this.bufferToHex(dataHash);\n        if (!this.data[dataHashHex] || this.bufferToHex(this.hashFn(this.data[dataHashHex])) !== dataHashHex) {\n            this.data[dataHashHex] = data;\n        }\n        const leaf = this.hashLeaf(this.size + 1, dataHash);\n        this.hashes[this.size + 1] = leaf;\n        this.width += 1;\n        // find peaks for enlarged tree\n        const peakIndexes = this.getPeakIndexes(this.width);\n        // the right most peak's value is the new size of the updated tree\n        this.size = this.getSize(this.width);\n        // starting from the left-most peak, get all peak hashes\n        const peaks = [];\n        for (let i = 0; i < peakIndexes.length; i++) {\n            peaks[i] = this._getOrCreateNode(peakIndexes[i]);\n        }\n        // update the tree root hash\n        this.root = this.peakBagging(this.width, peaks);\n    }\n    /**\n     * @desc It returns the hash of a leaf node with hash(M | DATA )\n     *       M is the index of the node.\n     */\n    hashLeaf(index, dataHash) {\n        dataHash = this.bufferify(dataHash);\n        if (this.hashLeafFn) {\n            return this.bufferify(this.hashLeafFn(index, dataHash));\n        }\n        return this.hashFn(buffer_1.Buffer.concat([this.bufferify(index), dataHash]));\n    }\n    /**\n     * @desc It returns the hash a parent node with hash(M | Left child | Right child)\n     *       M is the index of the node.\n     */\n    hashBranch(index, left, right) {\n        if (this.hashBranchFn) {\n            return this.bufferify(this.hashBranchFn(index, left, right));\n        }\n        return this.hashFn(buffer_1.Buffer.concat([this.bufferify(index), this.bufferify(left), this.bufferify(right)]));\n    }\n    getPeaks() {\n        const peakIndexes = this.getPeakIndexes(this.width);\n        const peaks = [];\n        for (let i = 0; i < peakIndexes.length; i++) {\n            peaks[i] = this.hashes[peakIndexes[i]];\n        }\n        return peaks;\n    }\n    getLeafIndex(width) {\n        if (width % 2 === 1) {\n            return this.getSize(width);\n        }\n        return this.getSize(width - 1) + 1;\n    }\n    /**\n     * @desc It returns all peaks of the smallest merkle mountain range tree which includes\n     *       the given index(size).\n     */\n    getPeakIndexes(width) {\n        const numPeaks = this.numOfPeaks(width);\n        const peakIndexes = [];\n        let count = 0;\n        let size = 0;\n        for (let i = 255; i > 0; i--) {\n            if ((width & (1 << (i - 1))) !== 0) {\n                // peak exists\n                size = size + (1 << i) - 1;\n                peakIndexes[count++] = size;\n                if (peakIndexes.length >= numPeaks) {\n                    break;\n                }\n            }\n        }\n        if (count !== peakIndexes.length) {\n            throw new Error('invalid bit calculation');\n        }\n        return peakIndexes;\n    }\n    numOfPeaks(width) {\n        let bits = width;\n        let num = 0;\n        while (bits > 0) {\n            if (bits % 2 === 1) {\n                num++;\n            }\n            bits = bits >> 1;\n        }\n        return num;\n    }\n    peakBagging(width, peaks) {\n        const size = this.getSize(width);\n        if (this.numOfPeaks(width) !== peaks.length) {\n            throw new Error('received invalid number of peaks');\n        }\n        if (width === 0 && !peaks.length) {\n            return buffer_1.Buffer.alloc(0);\n        }\n        if (this.peakBaggingFn) {\n            return this.bufferify(this.peakBaggingFn(size, peaks));\n        }\n        return this.hashFn(buffer_1.Buffer.concat([this.bufferify(size), ...peaks.map(this.bufferify)]));\n    }\n    /**\n     * @desc It returns the size of the tree.\n     */\n    getSize(width) {\n        return (width << 1) - this.numOfPeaks(width);\n    }\n    /**\n     * @desc It returns the root value of the tree.\n     */\n    getRoot() {\n        return this.root;\n    }\n    getHexRoot() {\n        return this.bufferToHex(this.getRoot());\n    }\n    /**\n     * @dev It returns the hash value of a node for the given position. Note that the index starts from 1.\n     */\n    getNode(index) {\n        return this.hashes[index];\n    }\n    /**\n     * @desc It returns the height of the highest peak.\n     */\n    mountainHeight(size) {\n        let height = 1;\n        while (1 << height <= size + height) {\n            height++;\n        }\n        return height - 1;\n    }\n    /**\n     * @desc It returns the height of the index.\n     */\n    heightAt(index) {\n        let reducedIndex = index;\n        let peakIndex = 0;\n        let height = 0;\n        // if an index has a left mountain then subtract the mountain\n        while (reducedIndex > peakIndex) {\n            reducedIndex -= (1 << height) - 1;\n            height = this.mountainHeight(reducedIndex);\n            peakIndex = (1 << height) - 1;\n        }\n        // index is on the right slope\n        return height - (peakIndex - reducedIndex);\n    }\n    /**\n     * @desc It returns whether the index is the leaf node or not\n     */\n    isLeaf(index) {\n        return this.heightAt(index) === 1;\n    }\n    /**\n     * @desc It returns the children when it is a parent node.\n     */\n    getChildren(index) {\n        const left = index - (1 << (this.heightAt(index) - 1));\n        const right = index - 1;\n        if (left === right) {\n            throw new Error('not a parent');\n        }\n        return [left, right];\n    }\n    /**\n     * @desc It returns a merkle proof for a leaf. Note that the index starts from 1.\n     */\n    getMerkleProof(index) {\n        if (index > this.size) {\n            throw new Error('out of range');\n        }\n        if (!this.isLeaf(index)) {\n            throw new Error('not a leaf');\n        }\n        const root = this.root;\n        const width = this.width;\n        // find all peaks for bagging\n        const peaks = this.getPeakIndexes(this.width);\n        const peakBagging = [];\n        let cursor = 0;\n        for (let i = 0; i < peaks.length; i++) {\n            // collect the hash of all peaks\n            peakBagging[i] = this.hashes[peaks[i]];\n            // find the peak which includes the target index\n            if (peaks[i] >= index && cursor === 0) {\n                cursor = peaks[i];\n            }\n        }\n        let left = 0;\n        let right = 0;\n        // get hashes of the siblings in the mountain which the index belgons to.\n        // it moves the cursor from the summit of the mountain down to the target index\n        let height = this.heightAt(cursor);\n        const siblings = [];\n        while (cursor !== index) {\n            height--;\n            ([left, right] = this.getChildren(cursor));\n            // move the cursor down to the left size or right size\n            cursor = index <= left ? left : right;\n            // remaining node is the sibling\n            siblings[height - 1] = this.hashes[index <= left ? right : left];\n        }\n        return {\n            root,\n            width,\n            peakBagging,\n            siblings\n        };\n    }\n    /**\n     * @desc It returns true when the given params verifies that the given value exists in the tree or reverts the transaction.\n     */\n    verify(root, width, index, value, peaks, siblings) {\n        value = this.bufferify(value);\n        const size = this.getSize(width);\n        if (size < index) {\n            throw new Error('index is out of range');\n        }\n        // check the root equals the peak bagging hash\n        if (!root.equals(this.peakBagging(width, peaks))) {\n            throw new Error('invalid root hash from the peaks');\n        }\n        // find the mountain where the target index belongs to\n        let cursor = 0;\n        let targetPeak;\n        const peakIndexes = this.getPeakIndexes(width);\n        for (let i = 0; i < peakIndexes.length; i++) {\n            if (peakIndexes[i] >= index) {\n                targetPeak = peaks[i];\n                cursor = peakIndexes[i];\n                break;\n            }\n        }\n        if (!targetPeak) {\n            throw new Error('target not found');\n        }\n        // find the path climbing down\n        let height = siblings.length + 1;\n        const path = new Array(height);\n        let left = 0;\n        let right = 0;\n        while (height > 0) {\n            // record the current cursor and climb down\n            path[--height] = cursor;\n            if (cursor === index) {\n                // on the leaf node. Stop climbing down\n                break;\n            }\n            else {\n                // on the parent node. Go left or right\n                ([left, right] = this.getChildren(cursor));\n                cursor = index > left ? right : left;\n                continue;\n            }\n        }\n        // calculate the summit hash climbing up again\n        let node;\n        while (height < path.length) {\n            // move cursor\n            cursor = path[height];\n            if (height === 0) {\n                // cusor is on the leaf\n                node = this.hashLeaf(cursor, this.hashFn(value));\n            }\n            else if (cursor - 1 === path[height - 1]) {\n                // cursor is on a parent and a siblings is on the left\n                node = this.hashBranch(cursor, siblings[height - 1], node);\n            }\n            else {\n                // cursor is on a parent and a siblings is on the right\n                node = this.hashBranch(cursor, node, siblings[height - 1]);\n            }\n            // climb up\n            height++;\n        }\n        // computed hash value of the summit should equal to the target peak hash\n        if (!node.equals(targetPeak)) {\n            throw new Error('hashed peak is invalid');\n        }\n        return true;\n    }\n    peaksToPeakMap(width, peaks) {\n        const peakMap = {};\n        let bitIndex = 0;\n        let peakRef = 0;\n        let count = peaks.length;\n        for (let height = 1; height <= 32; height++) {\n            // index starts from the right most bit\n            bitIndex = 32 - height;\n            peakRef = 1 << (height - 1);\n            if ((width & peakRef) !== 0) {\n                peakMap[bitIndex] = peaks[--count];\n            }\n            else {\n                peakMap[bitIndex] = 0;\n            }\n        }\n        if (count !== 0) {\n            throw new Error('invalid number of peaks');\n        }\n        return peakMap;\n    }\n    peakMapToPeaks(width, peakMap) {\n        const arrLength = this.numOfPeaks(width);\n        const peaks = new Array(arrLength);\n        let count = 0;\n        for (let i = 0; i < 32; i++) {\n            if (peakMap[i] !== 0) {\n                peaks[count++] = peakMap[i];\n            }\n        }\n        if (count !== arrLength) {\n            throw new Error('invalid number of peaks');\n        }\n        return peaks;\n    }\n    peakUpdate(width, prevPeakMap, itemHash) {\n        const nextPeakMap = {};\n        const newWidth = width + 1;\n        let cursorIndex = this.getLeafIndex(newWidth);\n        let cursorNode = this.hashLeaf(cursorIndex, itemHash);\n        let bitIndex = 0;\n        let peakRef = 0;\n        let prevPeakExist = false;\n        let nextPeakExist = false;\n        let obtained = false;\n        for (let height = 1; height <= 32; height++) {\n            // index starts from the right most bit\n            bitIndex = 32 - height;\n            if (obtained) {\n                nextPeakMap[bitIndex] = prevPeakMap[bitIndex];\n            }\n            else {\n                peakRef = 1 << (height - 1);\n                prevPeakExist = (width & peakRef) !== 0;\n                nextPeakExist = (newWidth & peakRef) !== 0;\n                // get new cursor node with hashing the peak and the current cursor\n                cursorIndex++;\n                if (prevPeakExist) {\n                    cursorNode = this.hashBranch(cursorIndex, prevPeakMap[bitIndex], cursorNode);\n                }\n                // if new peak exists for the bit index\n                if (nextPeakExist) {\n                    // if prev peak exists for the bit index\n                    if (prevPeakExist) {\n                        nextPeakMap[bitIndex] = prevPeakMap[bitIndex];\n                    }\n                    else {\n                        nextPeakMap[bitIndex] = cursorNode;\n                    }\n                    obtained = true;\n                }\n                else {\n                    nextPeakMap[bitIndex] = 0;\n                }\n            }\n        }\n        return nextPeakMap;\n    }\n    rollUp(root, width, peaks, itemHashes) {\n        // check the root equals the peak bagging hash\n        if (!root.equals(this.peakBagging(width, peaks))) {\n            throw new Error('invalid root hash from the peaks');\n        }\n        let tmpWidth = width;\n        let tmpPeakMap = this.peaksToPeakMap(width, peaks);\n        for (let i = 0; i < itemHashes.length; i++) {\n            tmpPeakMap = this.peakUpdate(tmpWidth, tmpPeakMap, itemHashes[i]);\n            tmpWidth++;\n        }\n        return this.peakBagging(tmpWidth, this.peakMapToPeaks(tmpWidth, tmpPeakMap));\n    }\n    /**\n     * @desc It returns the hash value of the node for the index.\n     *      If the hash already exists it simply returns the stored value. On the other hand,\n     *      it computes hashes recursively downward.\n     *      Only appending an item calls this function.\n     */\n    _getOrCreateNode(index) {\n        if (index > this.size) {\n            throw new Error('out of range');\n        }\n        if (!this.hashes[index]) {\n            const [leftIndex, rightIndex] = this.getChildren(index);\n            const leftHash = this._getOrCreateNode(leftIndex);\n            const rightHash = this._getOrCreateNode(rightIndex);\n            this.hashes[index] = this.hashBranch(index, leftHash, rightHash);\n        }\n        return this.hashes[index];\n    }\n}\nexports.MerkleMountainRange = MerkleMountainRange;\nif (typeof window !== 'undefined') {\n    ;\n    window.MerkleMountainRange = MerkleMountainRange;\n}\nexports.default = MerkleMountainRange;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleSumTree = exports.ProofStep = exports.Leaf = exports.Bucket = void 0;\nconst Base_1 = require(\"./Base\");\nclass Bucket {\n    constructor(size, hashed) {\n        this.size = BigInt(size);\n        this.hashed = hashed;\n        // each node in the tree can have a parent, and a left or right sibling\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexports.Bucket = Bucket;\nclass Leaf {\n    constructor(hashFn, rng, data) {\n        this.hashFn = hashFn;\n        this.rng = rng.map(x => BigInt(x));\n        this.data = data;\n    }\n    getBucket() {\n        let hashed;\n        if (this.data) {\n            hashed = this.hashFn(this.data);\n        }\n        else {\n            hashed = Buffer.alloc(32);\n        }\n        return new Bucket(BigInt(this.rng[1]) - BigInt(this.rng[0]), hashed);\n    }\n}\nexports.Leaf = Leaf;\nclass ProofStep {\n    constructor(bucket, right) {\n        this.bucket = bucket;\n        this.right = right; // whether the bucket hash should be appeded on the right side in this step (default is left\n    }\n}\nexports.ProofStep = ProofStep;\nclass MerkleSumTree extends Base_1.Base {\n    constructor(leaves, hashFn) {\n        super();\n        this.leaves = leaves;\n        this.hashFn = hashFn;\n        MerkleSumTree.checkConsecutive(leaves);\n        this.buckets = [];\n        for (const l of leaves) {\n            this.buckets.push(l.getBucket());\n        }\n        let buckets = [];\n        for (const bucket of this.buckets) {\n            buckets.push(bucket);\n        }\n        while (buckets.length !== 1) {\n            const newBuckets = [];\n            while (buckets.length) {\n                if (buckets.length >= 2) {\n                    const b1 = buckets.shift();\n                    const b2 = buckets.shift();\n                    const size = b1.size + b2.size;\n                    const hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(b1.size), this.bufferify(b1.hashed), this.sizeToBuffer(b2.size), this.bufferify(b2.hashed)]));\n                    const b = new Bucket(size, hashed);\n                    b2.parent = b;\n                    b1.parent = b2.parent;\n                    b1.right = b2;\n                    b2.left = b1;\n                    newBuckets.push(b);\n                }\n                else {\n                    newBuckets.push(buckets.shift());\n                }\n            }\n            buckets = newBuckets;\n        }\n        this.root = buckets[0];\n    }\n    sizeToBuffer(size) {\n        const buf = Buffer.alloc(8);\n        const view = new DataView(buf.buffer);\n        view.setBigInt64(0, BigInt(size), false); // true when little endian\n        return buf;\n    }\n    static checkConsecutive(leaves) {\n        let curr = BigInt(0);\n        for (const leaf of leaves) {\n            if (leaf.rng[0] !== curr) {\n                throw new Error('leaf ranges are invalid');\n            }\n            curr = BigInt(leaf.rng[1]);\n        }\n    }\n    // gets inclusion/exclusion proof of a bucket in the specified index\n    getProof(index) {\n        let curr = this.buckets[Number(index)];\n        const proof = [];\n        while (curr && curr.parent) {\n            const right = !!curr.right;\n            const bucket = curr.right ? curr.right : curr.left;\n            curr = curr.parent;\n            proof.push(new ProofStep(bucket, right));\n        }\n        return proof;\n    }\n    sum(arr) {\n        let total = BigInt(0);\n        for (const value of arr) {\n            total += BigInt(value);\n        }\n        return total;\n    }\n    // validates the suppplied proof for a specified leaf according to the root bucket\n    verifyProof(root, leaf, proof) {\n        const rng = [this.sum(proof.filter(x => !x.right).map(x => x.bucket.size)), BigInt(root.size) - this.sum(proof.filter(x => x.right).map(x => x.bucket.size))];\n        if (!(rng[0] === leaf.rng[0] && rng[1] === leaf.rng[1])) {\n            // supplied steps are not routing to the range specified\n            return false;\n        }\n        let curr = leaf.getBucket();\n        let hashed;\n        for (const step of proof) {\n            if (step.right) {\n                hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(curr.size), this.bufferify(curr.hashed), this.sizeToBuffer(step.bucket.size), this.bufferify(step.bucket.hashed)]));\n            }\n            else {\n                hashed = this.hashFn(Buffer.concat([this.sizeToBuffer(step.bucket.size), this.bufferify(step.bucket.hashed), this.sizeToBuffer(curr.size), this.bufferify(curr.hashed)]));\n            }\n            curr = new Bucket(BigInt(curr.size) + BigInt(step.bucket.size), hashed);\n        }\n        return curr.size === root.size && curr.hashed.toString('hex') === root.hashed.toString('hex');\n    }\n}\nexports.MerkleSumTree = MerkleSumTree;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleTree = void 0;\nconst buffer_1 = require(\"buffer\");\nconst buffer_reverse_1 = __importDefault(require(\"buffer-reverse\"));\nconst sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nconst treeify_1 = __importDefault(require(\"treeify\"));\nconst Base_1 = __importDefault(require(\"./Base\"));\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\nclass MerkleTree extends Base_1.default {\n    /**\n     * @desc Constructs a Merkle Tree.\n     * All nodes and leaves are stored as Buffers.\n     * Lonely leaf nodes are promoted to the next level up without being hashed again.\n     * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n     * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @example\n     *```js\n     *const MerkleTree = require('merkletreejs')\n     *const crypto = require('crypto')\n     *\n     *function sha256(data) {\n     *  // returns Buffer\n     *  return crypto.createHash('sha256').update(data).digest()\n     *}\n     *\n     *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n     *\n     *const tree = new MerkleTree(leaves, sha256)\n     *```\n     */\n    constructor(leaves, hashFn = sha256_1.default, options = {}) {\n        super();\n        this.duplicateOdd = false;\n        this.concatenator = buffer_1.Buffer.concat;\n        this.hashLeaves = false;\n        this.isBitcoinTree = false;\n        this.leaves = [];\n        this.layers = [];\n        this.sortLeaves = false;\n        this.sortPairs = false;\n        this.sort = false;\n        this.fillDefaultHash = null;\n        this.complete = false;\n        if (options.complete) {\n            if (options.isBitcoinTree) {\n                throw new Error('option \"complete\" is incompatible with \"isBitcoinTree\"');\n            }\n            if (options.duplicateOdd) {\n                throw new Error('option \"complete\" is incompatible with \"duplicateOdd\"');\n            }\n        }\n        this.isBitcoinTree = !!options.isBitcoinTree;\n        this.hashLeaves = !!options.hashLeaves;\n        this.sortLeaves = !!options.sortLeaves;\n        this.sortPairs = !!options.sortPairs;\n        this.complete = !!options.complete;\n        if (options.fillDefaultHash) {\n            if (typeof options.fillDefaultHash === 'function') {\n                this.fillDefaultHash = options.fillDefaultHash;\n            }\n            else if (buffer_1.Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === 'string') {\n                this.fillDefaultHash = (idx, hashFn) => options.fillDefaultHash;\n            }\n            else {\n                throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n            }\n        }\n        this.sort = !!options.sort;\n        if (this.sort) {\n            this.sortLeaves = true;\n            this.sortPairs = true;\n        }\n        this.duplicateOdd = !!options.duplicateOdd;\n        if (options.concatenator) {\n            this.concatenator = options.concatenator;\n        }\n        this.hashFn = this.bufferifyFn(hashFn);\n        this.processLeaves(leaves);\n    }\n    getOptions() {\n        var _a, _b;\n        return {\n            complete: this.complete,\n            isBitcoinTree: this.isBitcoinTree,\n            hashLeaves: this.hashLeaves,\n            sortLeaves: this.sortLeaves,\n            sortPairs: this.sortPairs,\n            sort: this.sort,\n            fillDefaultHash: (_b = (_a = this.fillDefaultHash) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null,\n            duplicateOdd: this.duplicateOdd\n        };\n    }\n    processLeaves(leaves) {\n        if (this.hashLeaves) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.leaves = leaves.map(this.bufferify);\n        if (this.sortLeaves) {\n            this.leaves = this.leaves.sort(buffer_1.Buffer.compare);\n        }\n        if (this.fillDefaultHash) {\n            for (let i = 0; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n                if (i >= this.leaves.length) {\n                    this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n                }\n            }\n        }\n        this.createHashes(this.leaves);\n    }\n    createHashes(nodes) {\n        this.layers = [nodes];\n        while (nodes.length > 1) {\n            const layerIndex = this.layers.length;\n            this.layers.push([]);\n            const layerLimit = this.complete && layerIndex === 1 && !Number.isInteger(Math.log2(nodes.length))\n                ? (2 * nodes.length) - (Math.pow(2, Math.ceil(Math.log2(nodes.length))))\n                : nodes.length;\n            for (let i = 0; i < nodes.length; i += 2) {\n                if (i >= layerLimit) {\n                    this.layers[layerIndex].push(...nodes.slice(layerLimit));\n                    break;\n                }\n                else if (i + 1 === nodes.length) {\n                    if (nodes.length % 2 === 1) {\n                        const data = nodes[nodes.length - 1];\n                        let hash = data;\n                        // is bitcoin tree\n                        if (this.isBitcoinTree) {\n                            // Bitcoin method of duplicating the odd ending nodes\n                            hash = this.hashFn(this.concatenator([buffer_reverse_1.default(data), buffer_reverse_1.default(data)]));\n                            hash = buffer_reverse_1.default(this.hashFn(hash));\n                            this.layers[layerIndex].push(hash);\n                            continue;\n                        }\n                        else {\n                            if (this.duplicateOdd) {\n                                // continue with creating layer\n                            }\n                            else {\n                                // push copy of hash and continue iteration\n                                this.layers[layerIndex].push(nodes[i]);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                const left = nodes[i];\n                const right = i + 1 === nodes.length ? left : nodes[i + 1];\n                let combined = null;\n                if (this.isBitcoinTree) {\n                    combined = [buffer_reverse_1.default(left), buffer_reverse_1.default(right)];\n                }\n                else {\n                    combined = [left, right];\n                }\n                if (this.sortPairs) {\n                    combined.sort(buffer_1.Buffer.compare);\n                }\n                let hash = this.hashFn(this.concatenator(combined));\n                // double hash if bitcoin tree\n                if (this.isBitcoinTree) {\n                    hash = buffer_reverse_1.default(this.hashFn(hash));\n                }\n                this.layers[layerIndex].push(hash);\n            }\n            nodes = this.layers[layerIndex];\n        }\n    }\n    /**\n     * addLeaf\n     * @desc Adds a leaf to the tree and re-calculates layers.\n     * @param {String|Buffer} - Leaf\n     * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaf(newLeaf)\n     *```\n     */\n    addLeaf(leaf, shouldHash = false) {\n        if (shouldHash) {\n            leaf = this.hashFn(leaf);\n        }\n        this.processLeaves(this.leaves.concat(leaf));\n    }\n    /**\n     * addLeaves\n     * @desc Adds multiple leaves to the tree and re-calculates layers.\n     * @param {String[]|Buffer[]} - Array of leaves\n     * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaves(newLeaves)\n     *```\n     */\n    addLeaves(leaves, shouldHash = false) {\n        if (shouldHash) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.processLeaves(this.leaves.concat(leaves));\n    }\n    /**\n     * getLeaves\n     * @desc Returns array of leaves of Merkle Tree.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *```\n     */\n    getLeaves(values) {\n        if (Array.isArray(values)) {\n            if (this.hashLeaves) {\n                values = values.map(this.hashFn);\n                if (this.sortLeaves) {\n                    values = values.sort(buffer_1.Buffer.compare);\n                }\n            }\n            return this.leaves.filter(leaf => this.bufferIndexOf(values, leaf, this.sortLeaves) !== -1);\n        }\n        return this.leaves;\n    }\n    /**\n     * getLeaf\n     * @desc Returns the leaf at the given index.\n     * @param {Number} - Index number\n     * @return {Buffer}\n     * @example\n     *```js\n     *const leaf = tree.getLeaf(1)\n     *```\n     */\n    getLeaf(index) {\n        if (index < 0 || index > this.leaves.length - 1) {\n            return buffer_1.Buffer.from([]);\n        }\n        return this.leaves[index];\n    }\n    /**\n     * getLeafIndex\n     * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n     * @param {String|Buffer} - Target leaf\n     * @return {number}\n     * @example\n     *```js\n     *const leaf = Buffer.from('abc')\n     *const index = tree.getLeafIndex(leaf)\n     *```\n     */\n    getLeafIndex(target) {\n        target = this.bufferify(target);\n        const leaves = this.getLeaves();\n        for (let i = 0; i < leaves.length; i++) {\n            const leaf = leaves[i];\n            if (leaf.equals(target)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * getLeafCount\n     * @desc Returns the total number of leaves.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLeafCount()\n     *```\n     */\n    getLeafCount() {\n        return this.leaves.length;\n    }\n    /**\n     * getHexLeaves\n     * @desc Returns array of leaves of Merkle Tree as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const leaves = tree.getHexLeaves()\n     *```\n     */\n    getHexLeaves() {\n        return this.leaves.map(leaf => this.bufferToHex(leaf));\n    }\n    /**\n     * marshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a JSON string.\n     * @param {String[]|Buffer[]} - Merkle tree leaves\n     * @return {String} - List of leaves as JSON string\n     * @example\n     *```js\n     *const jsonStr = MerkleTree.marshalLeaves(leaves)\n     *```\n     */\n    static marshalLeaves(leaves) {\n        return JSON.stringify(leaves.map(leaf => MerkleTree.bufferToHex(leaf)), null, 2);\n    }\n    /**\n     * unmarshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a Buffers.\n     * @param {String|Object} - JSON stringified leaves\n     * @return {Buffer[]} - Unmarshalled list of leaves\n     * @example\n     *```js\n     *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n     *```\n     */\n    static unmarshalLeaves(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error('Expected JSON string to be array');\n        }\n        return parsed.map(MerkleTree.bufferify);\n    }\n    /**\n     * getLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayers()\n     *```\n     */\n    getLayers() {\n        return this.layers;\n    }\n    /**\n     * getHexLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayers()\n     *```\n     */\n    getHexLayers() {\n        return this.layers.reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.push(item.map(layer => this.bufferToHex(layer)));\n            }\n            else {\n                acc.push(item);\n            }\n            return acc;\n        }, []);\n    }\n    /**\n     * getLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayersFlat()\n     *```\n     */\n    getLayersFlat() {\n        const layers = this.layers.reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.unshift(...item);\n            }\n            else {\n                acc.unshift(item);\n            }\n            return acc;\n        }, []);\n        layers.unshift(buffer_1.Buffer.from([0]));\n        return layers;\n    }\n    /**\n     * getHexLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayersFlat()\n     *```\n     */\n    getHexLayersFlat() {\n        return this.getLayersFlat().map(layer => this.bufferToHex(layer));\n    }\n    /**\n     * getLayerCount\n     * @desc Returns the total number of layers.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLayerCount()\n     *```\n     */\n    getLayerCount() {\n        return this.getLayers().length;\n    }\n    /**\n     * getRoot\n     * @desc Returns the Merkle root hash as a Buffer.\n     * @return {Buffer}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *```\n     */\n    getRoot() {\n        if (this.layers.length === 0) {\n            return buffer_1.Buffer.from([]);\n        }\n        return this.layers[this.layers.length - 1][0] || buffer_1.Buffer.from([]);\n    }\n    /**\n     * getHexRoot\n     * @desc Returns the Merkle root hash as a hex string.\n     * @return {String}\n     * @example\n     *```js\n     *const root = tree.getHexRoot()\n     *```\n     */\n    getHexRoot() {\n        return this.bufferToHex(this.getRoot());\n    }\n    /**\n     * getProof\n     * @desc Returns the proof for a target leaf.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {Object[]} - Array of objects containing a position property of type string\n     * with values of 'left' or 'right' and a data property of type Buffer.\n     * @example\n     * ```js\n     *const proof = tree.getProof(leaves[2])\n     *```\n     *\n     * @example\n     *```js\n     *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n     *const tree = new MerkleTree(leaves, keccak)\n     *const proof = tree.getProof(leaves[2], 2)\n     *```\n     */\n    getProof(leaf, index) {\n        if (typeof leaf === 'undefined') {\n            throw new Error('leaf is required');\n        }\n        leaf = this.bufferify(leaf);\n        const proof = [];\n        if (!Number.isInteger(index)) {\n            index = -1;\n            for (let i = 0; i < this.leaves.length; i++) {\n                if (buffer_1.Buffer.compare(leaf, this.leaves[i]) === 0) {\n                    index = i;\n                }\n            }\n        }\n        if (index <= -1) {\n            return [];\n        }\n        for (let i = 0; i < this.layers.length; i++) {\n            const layer = this.layers[i];\n            const isRightNode = index % 2;\n            const pairIndex = (isRightNode ? index - 1\n                : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1\n                    // Proof Generation for Bitcoin Trees\n                    ? index\n                    // Proof Generation for Non-Bitcoin Trees\n                    : index + 1);\n            if (pairIndex < layer.length) {\n                proof.push({\n                    position: isRightNode ? 'left' : 'right',\n                    data: layer[pairIndex]\n                });\n            }\n            // set index to parent index\n            index = (index / 2) | 0;\n        }\n        return proof;\n    }\n    /**\n     * getHexProof\n     * @desc Returns the proof for a target leaf as hex strings.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {String[]} - Proof array as hex strings.\n     * @example\n     * ```js\n     *const proof = tree.getHexProof(leaves[2])\n     *```\n     */\n    getHexProof(leaf, index) {\n        return this.getProof(leaf, index).map(item => this.bufferToHex(item.data));\n    }\n    /**\n     * getProofs\n     * @desc Returns the proofs for all leaves.\n     * @return {Object[]} - Array of objects containing a position property of type string\n     * with values of 'left' or 'right' and a data property of type Buffer for all leaves.\n     * @example\n     * ```js\n     *const proofs = tree.getProofs()\n     *```\n     *\n     * @example\n     *```js\n     *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n     *const tree = new MerkleTree(leaves, keccak)\n     *const proofs = tree.getProofs()\n     *```\n     */\n    getProofs() {\n        const proof = [];\n        const proofs = [];\n        this.getProofsDFS(this.layers.length - 1, 0, proof, proofs);\n        return proofs;\n    }\n    /**\n     * getProofsDFS\n     * @desc Get all proofs through single traverse\n     * @param {Number} currentLayer - Current layer index in traverse.\n     * @param {Number} index - Current tarvese node index in traverse.\n     * @param {Object[]} proof - Proof chain for single leaf.\n     * @param {Object[]} proofs - Proofs for all leaves\n     * @example\n     * ```js\n     *const layers = tree.getLayers()\n     *const index = 0;\n     *let proof = [];\n     *let proofs = [];\n     *const proof = tree.getProofsDFS(layers, index, proof, proofs)\n     *```\n     */\n    getProofsDFS(currentLayer, index, proof, proofs) {\n        const isRightNode = index % 2;\n        if (currentLayer === -1) {\n            if (!isRightNode)\n                proofs.push([...proof].reverse());\n            return;\n        }\n        if (index >= this.layers[currentLayer].length)\n            return;\n        const layer = this.layers[currentLayer];\n        const pairIndex = isRightNode ? index - 1 : index + 1;\n        let pushed = false;\n        if (pairIndex < layer.length) {\n            pushed = true;\n            proof.push({\n                position: isRightNode ? 'left' : 'right',\n                data: layer[pairIndex]\n            });\n        }\n        const leftchildIndex = index * 2;\n        const rightchildIndex = index * 2 + 1;\n        this.getProofsDFS(currentLayer - 1, leftchildIndex, proof, proofs);\n        this.getProofsDFS(currentLayer - 1, rightchildIndex, proof, proofs);\n        if (pushed)\n            proof.splice(proof.length - 1, 1);\n    }\n    /**\n     * getHexProofs\n     * @desc Returns the proofs for all leaves as hex strings.\n     * @return {String[]} - Proofs array as hex strings.\n     * @example\n     * ```js\n     *const proofs = tree.getHexProofs()\n     *```\n     */\n    getHexProofs() {\n        return this.getProofs().map(item => this.bufferToHex(item.data));\n    }\n    /**\n    * getPositionalHexProof\n    * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n    * @param {Buffer} leaf - Target leaf\n    * @param {Number} [index] - Target leaf index in leaves array.\n    * Use if there are leaves containing duplicate data in order to distinguish it.\n    * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n    * @example\n    * ```js\n    *const proof = tree.getPositionalHexProof(leaves[2])\n    *```\n    */\n    getPositionalHexProof(leaf, index) {\n        return this.getProof(leaf, index).map(item => {\n            return [\n                item.position === 'left' ? 0 : 1,\n                this.bufferToHex(item.data)\n            ];\n        });\n    }\n    /**\n     * marshalProof\n     * @desc Returns proof array as JSON string.\n     * @param {String[]|Object[]} proof - Merkle tree proof array\n     * @return {String} - Proof array as JSON string.\n     * @example\n     * ```js\n     *const jsonStr = MerkleTree.marshalProof(proof)\n     *```\n     */\n    static marshalProof(proof) {\n        const json = proof.map(item => {\n            if (typeof item === 'string') {\n                return item;\n            }\n            if (buffer_1.Buffer.isBuffer(item)) {\n                return MerkleTree.bufferToHex(item);\n            }\n            return {\n                position: item.position,\n                data: MerkleTree.bufferToHex(item.data)\n            };\n        });\n        return JSON.stringify(json, null, 2);\n    }\n    /**\n     * unmarshalProof\n     * @desc Returns the proof for a target leaf as a list of Buffers.\n     * @param {String|Object} - Merkle tree leaves\n     * @return {String|Object} - Marshalled proof\n     * @example\n     * ```js\n     *const proof = MerkleTree.unmarshalProof(jsonStr)\n     *```\n     */\n    static unmarshalProof(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error('Expected JSON string to be array');\n        }\n        return parsed.map(item => {\n            if (typeof item === 'string') {\n                return MerkleTree.bufferify(item);\n            }\n            else if (item instanceof Object) {\n                return {\n                    position: item.position,\n                    data: MerkleTree.bufferify(item.data)\n                };\n            }\n            else {\n                throw new Error('Expected item to be of type string or object');\n            }\n        });\n    }\n    static marshalTree(tree) {\n        const root = tree.getHexRoot();\n        const leaves = tree.leaves.map(leaf => MerkleTree.bufferToHex(leaf));\n        const layers = tree.getHexLayers();\n        const options = tree.getOptions();\n        return JSON.stringify({\n            options,\n            root,\n            layers,\n            leaves\n        }, null, 2);\n    }\n    static unmarshalTree(jsonStr, hashFn = sha256_1.default, options = {}) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            throw new Error('could not parse json');\n        }\n        options = Object.assign({}, parsed.options || {}, options);\n        return new MerkleTree(parsed.leaves, hashFn, options);\n    }\n    /**\n     * getProofIndices\n     * @desc Returns the proof indices for given tree indices.\n     * @param {Number[]} treeIndices - Tree indices\n     * @param {Number} depth - Tree depth; number of layers.\n     * @return {Number[]} - Proof indices\n     * @example\n     * ```js\n     *const proofIndices = tree.getProofIndices([2,5,6], 4)\n     *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n     *```\n     */\n    getProofIndices(treeIndices, depth) {\n        const leafCount = Math.pow(2, depth);\n        let maximalIndices = new Set();\n        for (const index of treeIndices) {\n            let x = leafCount + index;\n            while (x > 1) {\n                maximalIndices.add(x ^ 1);\n                x = (x / 2) | 0;\n            }\n        }\n        const a = treeIndices.map(index => leafCount + index);\n        const b = Array.from(maximalIndices).sort((a, b) => a - b).reverse();\n        maximalIndices = a.concat(b);\n        const redundantIndices = new Set();\n        const proof = [];\n        for (let index of maximalIndices) {\n            if (!redundantIndices.has(index)) {\n                proof.push(index);\n                while (index > 1) {\n                    redundantIndices.add(index);\n                    if (!redundantIndices.has(index ^ 1))\n                        break;\n                    index = (index / 2) | 0;\n                }\n            }\n        }\n        return proof.filter(index => {\n            return !treeIndices.includes(index - leafCount);\n        });\n    }\n    getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n        const depth = Math.ceil(Math.log2(leavesCount));\n        const unevenLayers = [];\n        for (let index = 0; index < depth; index++) {\n            const unevenLayer = leavesCount % 2 !== 0;\n            if (unevenLayer) {\n                unevenLayers.push({ index, leavesCount });\n            }\n            leavesCount = Math.ceil(leavesCount / 2);\n        }\n        const proofIndices = [];\n        let layerNodes = sortedLeafIndices;\n        for (let layerIndex = 0; layerIndex < depth; layerIndex++) {\n            const siblingIndices = layerNodes.map((index) => {\n                if (index % 2 === 0) {\n                    return index + 1;\n                }\n                return index - 1;\n            });\n            let proofNodeIndices = siblingIndices.filter((index) => !layerNodes.includes(index));\n            const unevenLayer = unevenLayers.find(({ index }) => index === layerIndex);\n            if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n                proofNodeIndices = proofNodeIndices.slice(0, -1);\n            }\n            proofIndices.push(proofNodeIndices);\n            layerNodes = [...new Set(layerNodes.map((index) => {\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))];\n        }\n        return proofIndices;\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *```\n     */\n    getMultiProof(tree, indices) {\n        if (!this.complete) {\n            console.warn('Warning: For correct multiProofs it\\'s strongly recommended to set complete: true');\n        }\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayersFlat();\n        }\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            if (indices.every(Number.isInteger)) {\n                return this.getMultiProofForUnevenTree(indices);\n            }\n        }\n        if (!indices.every(Number.isInteger)) {\n            let els = indices;\n            if (this.sortPairs) {\n                els = els.sort(buffer_1.Buffer.compare);\n            }\n            let ids = els.map((el) => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n            if (!ids.every((idx) => idx !== -1)) {\n                throw new Error('Element does not exist in Merkle tree');\n            }\n            const hashes = [];\n            const proof = [];\n            let nextIds = [];\n            for (let i = 0; i < this.layers.length; i++) {\n                const layer = this.layers[i];\n                for (let j = 0; j < ids.length; j++) {\n                    const idx = ids[j];\n                    const pairElement = this.getPairNode(layer, idx);\n                    hashes.push(layer[idx]);\n                    if (pairElement) {\n                        proof.push(pairElement);\n                    }\n                    nextIds.push((idx / 2) | 0);\n                }\n                ids = nextIds.filter((value, i, self) => self.indexOf(value) === i);\n                nextIds = [];\n            }\n            return proof.filter((value) => !hashes.includes(value));\n        }\n        return this.getProofIndices(indices, Math.log2((tree.length / 2) | 0)).map(index => tree[index]);\n    }\n    getMultiProofForUnevenTree(tree, indices) {\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayers();\n        }\n        let proofHashes = [];\n        let currentLayerIndices = indices;\n        for (const treeLayer of tree) {\n            const siblings = [];\n            for (const index of currentLayerIndices) {\n                if (index % 2 === 0) {\n                    const idx = index + 1;\n                    if (!currentLayerIndices.includes(idx)) {\n                        if (treeLayer[idx]) {\n                            siblings.push(treeLayer[idx]);\n                            continue;\n                        }\n                    }\n                }\n                const idx = index - 1;\n                if (!currentLayerIndices.includes(idx)) {\n                    if (treeLayer[idx]) {\n                        siblings.push(treeLayer[idx]);\n                        continue;\n                    }\n                }\n            }\n            proofHashes = proofHashes.concat(siblings);\n            const uniqueIndices = new Set();\n            for (const index of currentLayerIndices) {\n                if (index % 2 === 0) {\n                    uniqueIndices.add(index / 2);\n                    continue;\n                }\n                if (index % 2 === 0) {\n                    uniqueIndices.add((index + 1) / 2);\n                    continue;\n                }\n                uniqueIndices.add((index - 1) / 2);\n            }\n            currentLayerIndices = Array.from(uniqueIndices);\n        }\n        return proofHashes;\n    }\n    /**\n     * getHexMultiProof\n     * @desc Returns the multiproof for given tree indices as hex strings.\n     * @param {Number[]} indices - Tree indices.\n     * @return {String[]} - Multiproofs as hex strings.\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getHexMultiProof(indices)\n     *```\n     */\n    getHexMultiProof(tree, indices) {\n        return this.getMultiProof(tree, indices).map((x) => this.bufferToHex(x));\n    }\n    /**\n     * getProofFlags\n     * @desc Returns list of booleans where proofs should be used instead of hashing.\n     * Proof flags are used in the Solidity multiproof verifiers.\n     * @param {Number[]|Buffer[]} leaves\n     * @param {Buffer[]} proofs\n     * @return {Boolean[]} - Boolean flags\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *const proofFlags = tree.getProofFlags(leaves, proof)\n     *```\n     */\n    getProofFlags(leaves, proofs) {\n        if (!Array.isArray(leaves) || leaves.length <= 0) {\n            throw new Error('Invalid Inputs!');\n        }\n        let ids;\n        if (leaves.every(Number.isInteger)) {\n            ids = [...leaves].sort((a, b) => a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n        }\n        else {\n            ids = leaves.map((el) => this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n        }\n        if (!ids.every((idx) => idx !== -1)) {\n            throw new Error('Element does not exist in Merkle tree');\n        }\n        const _proofs = proofs.map(item => this.bufferify(item));\n        const tested = [];\n        const flags = [];\n        for (let index = 0; index < this.layers.length; index++) {\n            const layer = this.layers[index];\n            ids = ids.reduce((ids, idx) => {\n                const skipped = tested.includes(layer[idx]);\n                if (!skipped) {\n                    const pairElement = this.getPairNode(layer, idx);\n                    const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n                    pairElement && flags.push(!proofUsed);\n                    tested.push(layer[idx]);\n                    tested.push(pairElement);\n                }\n                ids.push((idx / 2) | 0);\n                return ids;\n            }, []);\n        }\n        return flags;\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @return {Boolean}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *const proof = tree.getProof(leaves[2])\n     *const verified = tree.verify(proof, leaves[2], root)\n     *```\n     */\n    verify(proof, targetNode, root) {\n        let hash = this.bufferify(targetNode);\n        root = this.bufferify(root);\n        if (!Array.isArray(proof) ||\n            !targetNode ||\n            !root) {\n            return false;\n        }\n        for (let i = 0; i < proof.length; i++) {\n            const node = proof[i];\n            let data = null;\n            let isLeftNode = null;\n            // case for when proof is hex values only\n            if (typeof node === 'string') {\n                data = this.bufferify(node);\n                isLeftNode = true;\n            }\n            else if (Array.isArray(node)) {\n                isLeftNode = (node[0] === 0);\n                data = this.bufferify(node[1]);\n            }\n            else if (buffer_1.Buffer.isBuffer(node)) {\n                data = node;\n                isLeftNode = true;\n            }\n            else if (node instanceof Object) {\n                data = this.bufferify(node.data);\n                isLeftNode = (node.position === 'left');\n            }\n            else {\n                throw new Error('Expected node to be of type string or object');\n            }\n            const buffers = [];\n            if (this.isBitcoinTree) {\n                buffers.push(buffer_reverse_1.default(hash));\n                buffers[isLeftNode ? 'unshift' : 'push'](buffer_reverse_1.default(data));\n                hash = this.hashFn(this.concatenator(buffers));\n                hash = buffer_reverse_1.default(this.hashFn(hash));\n            }\n            else {\n                if (this.sortPairs) {\n                    if (buffer_1.Buffer.compare(hash, data) === -1) {\n                        buffers.push(hash, data);\n                        hash = this.hashFn(this.concatenator(buffers));\n                    }\n                    else {\n                        buffers.push(data, hash);\n                        hash = this.hashFn(this.concatenator(buffers));\n                    }\n                }\n                else {\n                    buffers.push(hash);\n                    buffers[isLeftNode ? 'unshift' : 'push'](data);\n                    hash = this.hashFn(this.concatenator(buffers));\n                }\n            }\n        }\n        return buffer_1.Buffer.compare(hash, root) === 0;\n    }\n    /**\n     * verifyMultiProof\n     * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n     * @param {Buffer} root - Merkle tree root\n     * @param {Number[]} proofIndices - Leave indices for proof\n     * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n     * @param {Number} leavesCount - Count of original leaves\n     * @param {Buffer[]} proof - Multiproofs given indices\n     * @return {Boolean}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *const root = tree.getRoot()\n     *const treeFlat = tree.getLayersFlat()\n     *const leavesCount = leaves.length\n     *const proofIndices = [2, 5, 6]\n     *const proofLeaves = proofIndices.map(i => leaves[i])\n     *const proof = tree.getMultiProof(treeFlat, indices)\n     *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n     *```\n     */\n    verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            // TODO: combine these functions and simplify\n            return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n        }\n        const depth = Math.ceil(Math.log2(leavesCount));\n        root = this.bufferify(root);\n        proofLeaves = proofLeaves.map(leaf => this.bufferify(leaf));\n        proof = proof.map(leaf => this.bufferify(leaf));\n        const tree = {};\n        for (const [index, leaf] of this.zip(proofIndices, proofLeaves)) {\n            tree[(Math.pow(2, depth)) + index] = leaf;\n        }\n        for (const [index, proofitem] of this.zip(this.getProofIndices(proofIndices, depth), proof)) {\n            tree[index] = proofitem;\n        }\n        let indexqueue = Object.keys(tree).map(value => +value).sort((a, b) => a - b);\n        indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n        let i = 0;\n        while (i < indexqueue.length) {\n            const index = indexqueue[i];\n            if (index >= 2 && ({}).hasOwnProperty.call(tree, index ^ 1)) {\n                let pair = [tree[index - (index % 2)], tree[index - (index % 2) + 1]];\n                if (this.sortPairs) {\n                    pair = pair.sort(buffer_1.Buffer.compare);\n                }\n                const hash = pair[1] ? this.hashFn(this.concatenator(pair)) : pair[0];\n                tree[(index / 2) | 0] = hash;\n                indexqueue.push((index / 2) | 0);\n            }\n            i += 1;\n        }\n        return !proofIndices.length || (({}).hasOwnProperty.call(tree, 1) && tree[1].equals(root));\n    }\n    verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n        root = this.bufferify(root);\n        leaves = leaves.map(this.bufferify);\n        proofs = proofs.map(this.bufferify);\n        const leavesLen = leaves.length;\n        const totalHashes = proofFlag.length;\n        const hashes = [];\n        let leafPos = 0;\n        let hashPos = 0;\n        let proofPos = 0;\n        for (let i = 0; i < totalHashes; i++) {\n            const bufA = proofFlag[i] ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]) : proofs[proofPos++];\n            const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            const buffers = [bufA, bufB].sort(buffer_1.Buffer.compare);\n            hashes[i] = this.hashFn(this.concatenator(buffers));\n        }\n        return buffer_1.Buffer.compare(hashes[totalHashes - 1], root) === 0;\n    }\n    verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n        root = this.bufferify(root);\n        leaves = leaves.map(leaf => this.bufferify(leaf));\n        proof = proof.map(leaf => this.bufferify(leaf));\n        const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n        return root.equals(computedRoot);\n    }\n    /**\n     * getDepth\n     * @desc Returns the tree depth (number of layers)\n     * @return {Number}\n     * @example\n     *```js\n     *const depth = tree.getDepth()\n     *```\n     */\n    getDepth() {\n        return this.getLayers().length - 1;\n    }\n    /**\n     * getLayersAsObject\n     * @desc Returns the layers as nested objects instead of an array.\n     * @example\n     *```js\n     *const layersObj = tree.getLayersAsObject()\n     *```\n     */\n    getLayersAsObject() {\n        const layers = this.getLayers().map((layer) => layer.map((value) => this.bufferToHex(value, false)));\n        const objs = [];\n        for (let i = 0; i < layers.length; i++) {\n            const arr = [];\n            for (let j = 0; j < layers[i].length; j++) {\n                const obj = { [layers[i][j]]: null };\n                if (objs.length) {\n                    obj[layers[i][j]] = {};\n                    const a = objs.shift();\n                    const akey = Object.keys(a)[0];\n                    obj[layers[i][j]][akey] = a[akey];\n                    if (objs.length) {\n                        const b = objs.shift();\n                        const bkey = Object.keys(b)[0];\n                        obj[layers[i][j]][bkey] = b[bkey];\n                    }\n                }\n                arr.push(obj);\n            }\n            objs.push(...arr);\n        }\n        return objs[0];\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @param {Function} hashFunction - Hash function for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @return {Boolean}\n     * @example\n     *```js\n     *const verified = MerkleTree.verify(proof, leaf, root, sha256, options)\n     *```\n     */\n    static verify(proof, targetNode, root, hashFn = sha256_1.default, options = {}) {\n        const tree = new MerkleTree([], hashFn, options);\n        return tree.verify(proof, targetNode, root);\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Buffer[]} tree - Tree as a flat array.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     *\n     *@example\n     * ```js\n     *const flatTree = tree.getLayersFlat()\n     *const indices = [2, 5, 6]\n     *const proof = MerkleTree.getMultiProof(flatTree, indices)\n     *```\n     */\n    static getMultiProof(tree, indices) {\n        const t = new MerkleTree([]);\n        return t.getMultiProof(tree, indices);\n    }\n    /**\n     * resetTree\n     * @desc Resets the tree by clearing the leaves and layers.\n     * @example\n     *```js\n     *tree.resetTree()\n     *```\n     */\n    resetTree() {\n        this.leaves = [];\n        this.layers = [];\n    }\n    /**\n     * getPairNode\n     * @desc Returns the node at the index for given layer.\n     * @param {Buffer[]} layer - Tree layer\n     * @param {Number} index - Index at layer.\n     * @return {Buffer} - Node\n     *\n     *@example\n     * ```js\n     *const node = tree.getPairNode(layer, index)\n     *```\n     */\n    getPairNode(layer, idx) {\n        const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n        if (pairIdx < layer.length) {\n            return layer[pairIdx];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * toTreeString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @return {String}\n     * @example\n     *```js\n     *console.log(tree.toTreeString())\n     *```\n     */\n    toTreeString() {\n        const obj = this.getLayersAsObject();\n        return treeify_1.default.asTree(obj, true);\n    }\n    /**\n     * toString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @example\n     *```js\n     *console.log(tree.toString())\n     *```\n     */\n    toString() {\n        return this.toTreeString();\n    }\n    isUnevenTree(treeLayers) {\n        const depth = (treeLayers === null || treeLayers === void 0 ? void 0 : treeLayers.length) || this.getDepth();\n        return !this.isPowOf2(depth);\n    }\n    isPowOf2(v) {\n        return v && !(v & (v - 1));\n    }\n    calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n        const leafTuples = this.zip(leafIndices, leafHashes).sort(([indexA], [indexB]) => indexA - indexB);\n        const leafTupleIndices = leafTuples.map(([index]) => index);\n        const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n        let nextSliceStart = 0;\n        const proofTuplesByLayers = [];\n        for (let i = 0; i < proofIndices.length; i++) {\n            const indices = proofIndices[i];\n            const sliceStart = nextSliceStart;\n            nextSliceStart += indices.length;\n            proofTuplesByLayers[i] = this.zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n        }\n        const tree = [leafTuples];\n        for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n            const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex]).sort(([indexA], [indexB]) => indexA - indexB)\n                .map(([, hash]) => hash);\n            const s = tree[layerIndex].map(([layerIndex]) => layerIndex);\n            const parentIndices = [...new Set(s.map((index) => {\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))];\n            const parentLayer = [];\n            for (let i = 0; i < parentIndices.length; i++) {\n                const parentNodeTreeIndex = parentIndices[i];\n                const bufA = currentLayer[i * 2];\n                const bufB = currentLayer[i * 2 + 1];\n                const hash = bufB ? this.hashFn(this.concatenator([bufA, bufB])) : bufA;\n                parentLayer.push([parentNodeTreeIndex, hash]);\n            }\n            tree.push(parentLayer);\n        }\n        return tree[tree.length - 1][0][1];\n    }\n}\nexports.MerkleTree = MerkleTree;\nif (typeof window !== 'undefined') {\n    ;\n    window.MerkleTree = MerkleTree;\n}\nexports.default = MerkleTree;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleTree = void 0;\nconst MerkleTree_1 = __importDefault(require(\"./MerkleTree\"));\nexports.MerkleTree = MerkleTree_1.default;\nvar MerkleMountainRange_1 = require(\"./MerkleMountainRange\");\nObject.defineProperty(exports, \"MerkleMountainRange\", { enumerable: true, get: function () { return MerkleMountainRange_1.MerkleMountainRange; } });\nvar IncrementalMerkleTree_1 = require(\"./IncrementalMerkleTree\");\nObject.defineProperty(exports, \"IncrementalMerkleTree\", { enumerable: true, get: function () { return IncrementalMerkleTree_1.IncrementalMerkleTree; } });\nvar MerkleSumTree_1 = require(\"./MerkleSumTree\");\nObject.defineProperty(exports, \"MerkleSumTree\", { enumerable: true, get: function () { return MerkleSumTree_1.MerkleSumTree; } });\nexports.default = MerkleTree_1.default;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Link = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\n  }));\n});\nLink.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nLink.displayName = 'Link';\nexport default Link;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Trash2 = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"3 6 5 6 21 6\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"10\",\n    y1: \"11\",\n    x2: \"10\",\n    y2: \"17\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"14\",\n    y1: \"11\",\n    x2: \"14\",\n    y2: \"17\"\n  }));\n});\nTrash2.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTrash2.displayName = 'Trash2';\nexport default Trash2;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Twitter = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"\n  }));\n});\nTwitter.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTwitter.displayName = 'Twitter';\nexport default Twitter;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar XOctagon = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"9\",\n    y1: \"9\",\n    x2: \"15\",\n    y2: \"15\"\n  }));\n});\nXOctagon.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nXOctagon.displayName = 'XOctagon';\nexport default XOctagon;","import { PureComponent } from 'react';\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n\nfunction isRangeVisible(_ref) {\n  var lastRenderedStartIndex = _ref.lastRenderedStartIndex,\n      lastRenderedStopIndex = _ref.lastRenderedStopIndex,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);\n}\n\nfunction scanForUnloadedRanges(_ref) {\n  var isItemLoaded = _ref.isItemLoaded,\n      itemCount = _ref.itemCount,\n      minimumBatchSize = _ref.minimumBatchSize,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  var unloadedRanges = [];\n\n  var rangeStartIndex = null;\n  var rangeStopIndex = null;\n\n  for (var _index = startIndex; _index <= stopIndex; _index++) {\n    var loaded = isItemLoaded(_index);\n\n    if (!loaded) {\n      rangeStopIndex = _index;\n      if (rangeStartIndex === null) {\n        rangeStartIndex = _index;\n      }\n    } else if (rangeStopIndex !== null) {\n      unloadedRanges.push(rangeStartIndex, rangeStopIndex);\n\n      rangeStartIndex = rangeStopIndex = null;\n    }\n  }\n\n  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.\n  // Scan forward to try filling our :minimumBatchSize.\n  if (rangeStopIndex !== null) {\n    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), itemCount - 1);\n\n    for (var _index2 = rangeStopIndex + 1; _index2 <= potentialStopIndex; _index2++) {\n      if (!isItemLoaded(_index2)) {\n        rangeStopIndex = _index2;\n      } else {\n        break;\n      }\n    }\n\n    unloadedRanges.push(rangeStartIndex, rangeStopIndex);\n  }\n\n  // Check to see if our first range ended prematurely.\n  // In this case we should scan backwards to try filling our :minimumBatchSize.\n  if (unloadedRanges.length) {\n    while (unloadedRanges[1] - unloadedRanges[0] + 1 < minimumBatchSize && unloadedRanges[0] > 0) {\n      var _index3 = unloadedRanges[0] - 1;\n\n      if (!isItemLoaded(_index3)) {\n        unloadedRanges[0] = _index3;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return unloadedRanges;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar InfiniteLoader = function (_PureComponent) {\n  inherits(InfiniteLoader, _PureComponent);\n\n  function InfiniteLoader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, InfiniteLoader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InfiniteLoader.__proto__ || Object.getPrototypeOf(InfiniteLoader)).call.apply(_ref, [this].concat(args))), _this), _this._lastRenderedStartIndex = -1, _this._lastRenderedStopIndex = -1, _this._memoizedUnloadedRanges = [], _this._onItemsRendered = function (_ref2) {\n      var visibleStartIndex = _ref2.visibleStartIndex,\n          visibleStopIndex = _ref2.visibleStopIndex;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!isInteger(visibleStartIndex) || !isInteger(visibleStopIndex)) {\n          console.warn('Invalid onItemsRendered signature; please refer to InfiniteLoader documentation.');\n        }\n\n        if (typeof _this.props.loadMoreRows === 'function') {\n          console.warn('InfiniteLoader \"loadMoreRows\" prop has been renamed to \"loadMoreItems\".');\n        }\n      }\n\n      _this._lastRenderedStartIndex = visibleStartIndex;\n      _this._lastRenderedStopIndex = visibleStopIndex;\n\n      _this._ensureRowsLoaded(visibleStartIndex, visibleStopIndex);\n    }, _this._setRef = function (listRef) {\n      _this._listRef = listRef;\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(InfiniteLoader, [{\n    key: 'resetloadMoreItemsCache',\n    value: function resetloadMoreItemsCache() {\n      var autoReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      this._memoizedUnloadedRanges = [];\n\n      if (autoReload) {\n        this._ensureRowsLoaded(this._lastRenderedStartIndex, this._lastRenderedStopIndex);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._listRef == null) {\n          console.warn('Invalid list ref; please refer to InfiniteLoader documentation.');\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n\n\n      return children({\n        onItemsRendered: this._onItemsRendered,\n        ref: this._setRef\n      });\n    }\n  }, {\n    key: '_ensureRowsLoaded',\n    value: function _ensureRowsLoaded(startIndex, stopIndex) {\n      var _props = this.props,\n          isItemLoaded = _props.isItemLoaded,\n          itemCount = _props.itemCount,\n          _props$minimumBatchSi = _props.minimumBatchSize,\n          minimumBatchSize = _props$minimumBatchSi === undefined ? 10 : _props$minimumBatchSi,\n          _props$threshold = _props.threshold,\n          threshold = _props$threshold === undefined ? 15 : _props$threshold;\n\n\n      var unloadedRanges = scanForUnloadedRanges({\n        isItemLoaded: isItemLoaded,\n        itemCount: itemCount,\n        minimumBatchSize: minimumBatchSize,\n        startIndex: Math.max(0, startIndex - threshold),\n        stopIndex: Math.min(itemCount - 1, stopIndex + threshold)\n      });\n\n      // Avoid calling load-rows unless range has changed.\n      // This shouldn't be strictly necessary, but is maybe nice to do.\n      if (this._memoizedUnloadedRanges.length !== unloadedRanges.length || this._memoizedUnloadedRanges.some(function (startOrStop, index) {\n        return unloadedRanges[index] !== startOrStop;\n      })) {\n        this._memoizedUnloadedRanges = unloadedRanges;\n        this._loadUnloadedRanges(unloadedRanges);\n      }\n    }\n  }, {\n    key: '_loadUnloadedRanges',\n    value: function _loadUnloadedRanges(unloadedRanges) {\n      var _this2 = this;\n\n      // loadMoreRows was renamed to loadMoreItems in v1.0.3; will be removed in v2.0\n      var loadMoreItems = this.props.loadMoreItems || this.props.loadMoreRows;\n\n      var _loop = function _loop(i) {\n        var startIndex = unloadedRanges[i];\n        var stopIndex = unloadedRanges[i + 1];\n        var promise = loadMoreItems(startIndex, stopIndex);\n        if (promise != null) {\n          promise.then(function () {\n            // Refresh the visible rows if any of them have just been loaded.\n            // Otherwise they will remain in their unloaded visual state.\n            if (isRangeVisible({\n              lastRenderedStartIndex: _this2._lastRenderedStartIndex,\n              lastRenderedStopIndex: _this2._lastRenderedStopIndex,\n              startIndex: startIndex,\n              stopIndex: stopIndex\n            })) {\n              // Handle an unmount while promises are still in flight.\n              if (_this2._listRef == null) {\n                return;\n              }\n\n              // Resize cached row sizes for VariableSizeList,\n              // otherwise just re-render the list.\n              if (typeof _this2._listRef.resetAfterIndex === 'function') {\n                _this2._listRef.resetAfterIndex(startIndex, true);\n              } else {\n                // HACK reset temporarily cached item styles to force PureComponent to re-render.\n                // This is pretty gross, but I'm okay with it for now.\n                // Don't judge me.\n                if (typeof _this2._listRef._getItemStyleCache === 'function') {\n                  _this2._listRef._getItemStyleCache(-1);\n                }\n                _this2._listRef.forceUpdate();\n              }\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < unloadedRanges.length; i += 2) {\n        _loop(i);\n      }\n    }\n  }]);\n  return InfiniteLoader;\n}(PureComponent);\n\nexport default InfiniteLoader;\n","//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n\n// do the universal module definition dance\n(function (root, factory) {\n\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.treeify = factory();\n  }\n\n}(this, function() {\n\n  function makePrefix(key, last) {\n    var str = (last ? '└' : '├');\n    if (key) {\n      str += '─ ';\n    } else {\n      str += '──┐';\n    }\n    return str;\n  }\n\n  function filterKeys(obj, hideFunctions) {\n    var keys = [];\n    for (var branch in obj) {\n      // always exclude anything in the object's prototype\n      if (!obj.hasOwnProperty(branch)) {\n        continue;\n      }\n      // ... and hide any keys mapped to functions if we've been told to\n      if (hideFunctions && ((typeof obj[branch])===\"function\")) {\n        continue;\n      }\n      keys.push(branch);\n    }\n    return keys;\n  }\n\n  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n    var line = '', index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);\n\n    if (lastStatesCopy.push([ root, last ]) && lastStates.length > 0) {\n      // based on the \"was last element\" states of whatever we're nested within,\n      // we need to append either blankness or a branch to our line\n      lastStates.forEach(function(lastState, idx) {\n        if (idx > 0) {\n          line += (lastState[1] ? ' ' : '│') + '  ';\n        }\n        if ( ! circular && lastState[0] === root) {\n          circular = true;\n        }\n      });\n\n      // the prefix varies based on whether the key contains something to show and\n      // whether we're dealing with the last element in this collection\n      line += makePrefix(key, last) + key;\n\n      // append values and the circular reference indicator\n      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);\n      circular && (line += ' (circular ref.)');\n\n      callback(line);\n    }\n\n    // can we descend into the next item?\n    if ( ! circular && typeof root === 'object') {\n      var keys = filterKeys(root, hideFunctions);\n      keys.forEach(function(branch){\n        // the last key is always printed with a different prefix, so we'll need to know if we have it\n        lastKey = ++index === keys.length;\n\n        // hold your breath for recursive action\n        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n      });\n    }\n  };\n\n  // --------------------\n\n  var Treeify = {};\n\n  // Treeify.asLines\n  // --------------------\n  // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n\n  Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {\n    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */\n    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;\n    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n  };\n\n  // Treeify.asTree\n  // --------------------\n  // Outputs the entire tree, returning it as a string with line breaks.\n\n  Treeify.asTree = function(obj, showValues, hideFunctions) {\n    var tree = '';\n    growBranch('.', obj, false, [], showValues, hideFunctions, function(line) {\n      tree += line + '\\n';\n    });\n    return tree;\n  };\n\n  // --------------------\n\n  return Treeify;\n\n}));\n"],"names":["abi$5","b64chs","TextDecoder","TextEncoder","Array","prototype","slice","call","a","tab","forEach","c","i","String","fromCharCode","bind","Uint8Array","from","type","module","exports","reverse","root","CryptoJS","_extends"],"sourceRoot":""}