{"version":3,"file":"static/js/624.3d488bd5.chunk.js","mappings":"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","sources":["pages/AppBody.tsx","components/PositionCard/Sushi.tsx","components/PositionCard/V2.tsx","pages/MigrateV2/index.tsx"],"sourcesContent":["import { PropsWithChildren } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\ninterface BodyWrapperProps {\n  $margin?: string\n  $maxWidth?: string\n}\n\nexport const BodyWrapper = styled.main<BodyWrapperProps>`\n  position: relative;\n  margin-top: ${({ $margin }) => $margin ?? '0px'};\n  max-width: ${({ $maxWidth }) => $maxWidth ?? '420px'};\n  width: 100%;\n  background: ${({ theme }) => theme.surface1};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  margin-top: 1rem;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: ${Z_INDEX.default};\n`\n\n/**\n * The styled container element that wraps the content of most pages and the tabs.\n */\nexport default function AppBody(props: PropsWithChildren<BodyWrapperProps>) {\n  return <BodyWrapper {...props} />\n}\n","import { Trans } from '@lingui/macro'\nimport { Token } from '@uniswap/sdk-core'\nimport Badge, { BadgeVariant } from 'components/Badge'\nimport { transparentize } from 'polished'\nimport { Link } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\n\nimport { useColor } from '../../hooks/useColor'\nimport { unwrappedToken } from '../../utils/unwrappedToken'\nimport { ButtonEmpty } from '../Button'\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Column'\nimport DoubleCurrencyLogo from '../DoubleLogo'\nimport { CardNoise } from '../earn/styled'\nimport { AutoRow, RowFixed } from '../Row'\nimport { Dots } from '../swap/styled'\nimport { FixedHeightRow } from '.'\n\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\n  border: none;\n  background: ${({ theme, bgColor }) =>\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\n  position: relative;\n  overflow: hidden;\n`\n\ninterface PositionCardProps {\n  tokenA: Token\n  tokenB: Token\n  liquidityToken: Token\n  border?: string\n}\n\nexport default function SushiPositionCard({ tokenA, tokenB, liquidityToken, border }: PositionCardProps) {\n  const currency0 = unwrappedToken(tokenA)\n  const currency1 = unwrappedToken(tokenB)\n\n  const backgroundColor = useColor(tokenA)\n\n  return (\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\n      <CardNoise />\n      <AutoColumn gap=\"md\">\n        <FixedHeightRow>\n          <AutoRow gap=\"8px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text fontWeight={535} fontSize={20}>\n              {!currency0 || !currency1 ? (\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              ) : (\n                `${currency0.symbol}/${currency1.symbol}`\n              )}\n            </Text>\n\n            <Badge variant={BadgeVariant.WARNING}>Sushi</Badge>\n          </AutoRow>\n          <RowFixed gap=\"8px\">\n            <ButtonEmpty\n              padding=\"0px 35px 0px 0px\"\n              $borderRadius=\"12px\"\n              width=\"fit-content\"\n              as={Link}\n              to={`/migrate/v2/${liquidityToken.address}`}\n            >\n              <Trans>Migrate</Trans>\n            </ButtonEmpty>\n          </RowFixed>\n        </FixedHeightRow>\n      </AutoColumn>\n    </StyledPositionCard>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { CurrencyAmount, Percent, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { transparentize } from 'polished'\nimport { useState } from 'react'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\n\nimport { BIG_INT_ZERO } from '../../constants/misc'\nimport { useColor } from '../../hooks/useColor'\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { useTokenBalance } from '../../state/connection/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/unwrappedToken'\nimport { ButtonEmpty, ButtonPrimary, ButtonSecondary } from '../Button'\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Column'\nimport DoubleCurrencyLogo from '../DoubleLogo'\nimport { CardNoise } from '../earn/styled'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\nimport { Dots } from '../swap/styled'\nimport { FixedHeightRow } from '.'\n\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\n  border: none;\n  background: ${({ theme, bgColor }) =>\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\n  position: relative;\n  overflow: hidden;\n`\n\ninterface PositionCardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n  border?: string\n  stakedBalance?: CurrencyAmount<Token> // optional balance to indicate that liquidity is deposited in mining pool\n}\n\nexport default function V2PositionCard({ pair, border, stakedBalance }: PositionCardProps) {\n  const { account } = useWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userDefaultPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  // if staked balance balance provided, add to standard liquidity amount\n  const userPoolBalance = stakedBalance ? userDefaultPoolBalance?.add(stakedBalance) : userDefaultPoolBalance\n\n  const poolTokenPercentage =\n    !!userPoolBalance &&\n    !!totalPoolTokens &&\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n      ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  const backgroundColor = useColor(pair?.token0)\n\n  return (\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\n      <CardNoise />\n      <AutoColumn gap=\"md\">\n        <FixedHeightRow>\n          <AutoRow gap=\"8px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text fontWeight={535} fontSize={20}>\n              {!currency0 || !currency1 ? (\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              ) : (\n                `${currency0.symbol}/${currency1.symbol}`\n              )}\n            </Text>\n          </AutoRow>\n          <RowFixed gap=\"8px\">\n            <ButtonEmpty\n              padding=\"6px 8px\"\n              $borderRadius=\"12px\"\n              width=\"fit-content\"\n              onClick={() => setShowMore(!showMore)}\n            >\n              {showMore ? (\n                <>\n                  <Trans>Manage</Trans>\n                  <ChevronUp size=\"20\" style={{ marginLeft: '10px' }} />\n                </>\n              ) : (\n                <>\n                  <Trans>Manage</Trans>\n                  <ChevronDown size=\"20\" style={{ marginLeft: '10px' }} />\n                </>\n              )}\n            </ButtonEmpty>\n          </RowFixed>\n        </FixedHeightRow>\n\n        {showMore && (\n          <AutoColumn gap=\"sm\">\n            <FixedHeightRow>\n              <Text fontSize={16} fontWeight={535}>\n                <Trans>Your total pool tokens:</Trans>\n              </Text>\n              <Text fontSize={16} fontWeight={535}>\n                {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\n              </Text>\n            </FixedHeightRow>\n            {stakedBalance && (\n              <FixedHeightRow>\n                <Text fontSize={16} fontWeight={535}>\n                  <Trans>Pool tokens in rewards pool:</Trans>\n                </Text>\n                <Text fontSize={16} fontWeight={535}>\n                  {stakedBalance.toSignificant(4)}\n                </Text>\n              </FixedHeightRow>\n            )}\n            <FixedHeightRow>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={535}>\n                  <Trans>Pooled {currency0.symbol}:</Trans>\n                </Text>\n              </RowFixed>\n              {token0Deposited ? (\n                <RowFixed>\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\n                    {token0Deposited?.toSignificant(6)}\n                  </Text>\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency0} />\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n\n            <FixedHeightRow>\n              <RowFixed>\n                <Text fontSize={16} fontWeight={535}>\n                  <Trans>Pooled {currency1.symbol}:</Trans>\n                </Text>\n              </RowFixed>\n              {token1Deposited ? (\n                <RowFixed>\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\n                    {token1Deposited?.toSignificant(6)}\n                  </Text>\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency1} />\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n\n            <FixedHeightRow>\n              <Text fontSize={16} fontWeight={535}>\n                <Trans>Your pool share:</Trans>\n              </Text>\n              <Text fontSize={16} fontWeight={535}>\n                {poolTokenPercentage\n                  ? (poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)) + '%'\n                  : '-'}\n              </Text>\n            </FixedHeightRow>\n\n            {userDefaultPoolBalance && JSBI.greaterThan(userDefaultPoolBalance.quotient, BIG_INT_ZERO) && (\n              <RowBetween marginTop=\"10px\">\n                <ButtonPrimary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  as={Link}\n                  to={`/migrate/v2/${pair.liquidityToken.address}`}\n                  width=\"64%\"\n                >\n                  <Trans>Migrate</Trans>\n                </ButtonPrimary>\n                <ButtonSecondary\n                  padding=\"8px\"\n                  $borderRadius=\"8px\"\n                  as={Link}\n                  width=\"32%\"\n                  to={`/remove/v2/${currencyId(currency0)}/${currencyId(currency1)}`}\n                >\n                  <Trans>Remove</Trans>\n                </ButtonSecondary>\n              </RowBetween>\n            )}\n          </AutoColumn>\n        )}\n      </AutoColumn>\n    </StyledPositionCard>\n  )\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { Trans } from '@lingui/macro'\nimport { Token, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport MigrateSushiPositionCard from 'components/PositionCard/Sushi'\nimport MigrateV2PositionCard from 'components/PositionCard/V2'\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\nimport { V2Unsupported } from 'components/V2Unsupported'\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\nimport { PairState, useV2Pairs } from 'hooks/useV2Pairs'\nimport { ReactNode, useMemo } from 'react'\nimport { Text } from 'rebass'\nimport { useTheme } from 'styled-components'\nimport { BackArrowLink, StyledInternalLink, ThemedText } from 'theme/components'\n\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport { AutoRow } from '../../components/Row'\nimport { Dots } from '../../components/swap/styled'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport { BodyWrapper } from '../AppBody'\n\nfunction EmptyState({ message }: { message: ReactNode }) {\n  return (\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\n    </AutoColumn>\n  )\n}\n\n// quick hack because sushi init code hash is different\nconst computeSushiPairAddress = ({ tokenA, tokenB }: { tokenA: Token; tokenB: Token }): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  )\n}\n\n/**\n * Given two tokens return the sushiswap liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nfunction toSushiLiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(tokenA.chainId, computeSushiPairAddress({ tokenA, tokenB }), 18, 'SLP', 'SushiSwap LP Token')\n}\n\nexport default function MigrateV2() {\n  const theme = useTheme()\n  const { account, chainId } = useWeb3React()\n\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n\n  // calculate v2 + sushi pair contract addresses for all token pairs\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () =>\n      trackedTokenPairs.map((tokens) => {\n        // sushi liquidity token or null\n        const sushiLiquidityToken = chainId === 1 ? toSushiLiquidityToken(tokens) : null\n        return {\n          v2liquidityToken: v2FactoryAddress ? toV2LiquidityToken(tokens) : undefined,\n          sushiLiquidityToken,\n          tokens,\n        }\n      }),\n    [trackedTokenPairs, chainId, v2FactoryAddress]\n  )\n\n  //  get pair liquidity token addresses for balance-fetching purposes\n  const allLiquidityTokens = useMemo(() => {\n    const v2 = tokenPairsWithLiquidityTokens.map(({ v2liquidityToken }) => v2liquidityToken)\n    const sushi = tokenPairsWithLiquidityTokens\n      .map(({ sushiLiquidityToken }) => sushiLiquidityToken)\n      .filter((token): token is Token => !!token)\n\n    return [...v2, ...sushi]\n  }, [tokenPairsWithLiquidityTokens])\n\n  // fetch pair balances\n  const [pairBalances, fetchingPairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    allLiquidityTokens\n  )\n\n  // filter for v2 liquidity tokens that the user has a balance in\n  const tokenPairsWithV2Balance = useMemo(() => {\n    if (fetchingPairBalances) return []\n\n    return tokenPairsWithLiquidityTokens\n      .filter(({ v2liquidityToken }) => v2liquidityToken && pairBalances[v2liquidityToken.address]?.greaterThan(0))\n      .map((tokenPairsWithLiquidityTokens) => tokenPairsWithLiquidityTokens.tokens)\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\n\n  // filter for v2 liquidity tokens that the user has a balance in\n  const tokenPairsWithSushiBalance = useMemo(() => {\n    if (fetchingPairBalances) return []\n\n    return tokenPairsWithLiquidityTokens.filter(\n      ({ sushiLiquidityToken }) => !!sushiLiquidityToken && pairBalances[sushiLiquidityToken.address]?.greaterThan(0)\n    )\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\n\n  const v2Pairs = useV2Pairs(tokenPairsWithV2Balance)\n  const v2IsLoading = fetchingPairBalances || v2Pairs.some(([pairState]) => pairState === PairState.LOADING)\n\n  const networkSupportsV2 = useNetworkSupportsV2()\n  if (!networkSupportsV2) return <V2Unsupported />\n\n  return (\n    <>\n      <BodyWrapper style={{ padding: 24 }}>\n        <AutoColumn gap=\"16px\">\n          <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n            <BackArrowLink to=\"/pools\" />\n            <ThemedText.DeprecatedMediumHeader>\n              <Trans>Migrate V2 liquidity</Trans>\n            </ThemedText.DeprecatedMediumHeader>\n            <div>\n              <QuestionHelper text={<Trans>Migrate your liquidity tokens from Uniswap V2 to Uniswap V3.</Trans>} />\n            </div>\n          </AutoRow>\n\n          <ThemedText.DeprecatedBody style={{ marginBottom: 8, fontWeight: 485 }}>\n            <Trans>\n              For each pool shown below, click migrate to remove your liquidity from Uniswap V2 and deposit it into\n              Uniswap V3.\n            </Trans>\n          </ThemedText.DeprecatedBody>\n\n          {!account ? (\n            <LightCard padding=\"40px\">\n              <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                <Trans>Connect to a wallet to view your V2 liquidity.</Trans>\n              </ThemedText.DeprecatedBody>\n            </LightCard>\n          ) : v2IsLoading ? (\n            <LightCard padding=\"40px\">\n              <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\n                <Dots>\n                  <Trans>Loading</Trans>\n                </Dots>\n              </ThemedText.DeprecatedBody>\n            </LightCard>\n          ) : v2Pairs.filter(([, pair]) => !!pair).length > 0 ? (\n            <>\n              {v2Pairs\n                .filter(([, pair]) => !!pair)\n                .map(([, pair]) => (\n                  <MigrateV2PositionCard key={(pair as Pair).liquidityToken.address} pair={pair as Pair} />\n                ))}\n\n              {tokenPairsWithSushiBalance.map(({ sushiLiquidityToken, tokens }) => {\n                return (\n                  <MigrateSushiPositionCard\n                    key={(sushiLiquidityToken as Token).address}\n                    tokenA={tokens[0]}\n                    tokenB={tokens[1]}\n                    liquidityToken={sushiLiquidityToken as Token}\n                  />\n                )\n              })}\n            </>\n          ) : (\n            <EmptyState message={<Trans>No V2 liquidity found.</Trans>} />\n          )}\n\n          <AutoColumn justify=\"center\" gap=\"md\">\n            <Text textAlign=\"center\" fontSize={14} style={{ padding: '.5rem 0 .5rem 0' }}>\n              <Trans>\n                Don’t see one of your v2 positions?{' '}\n                <StyledInternalLink id=\"import-pool-link\" to=\"/pools/v2/find\">\n                  Import it.\n                </StyledInternalLink>\n              </Trans>\n            </Text>\n          </AutoColumn>\n        </AutoColumn>\n      </BodyWrapper>\n      <SwitchLocaleLink />\n    </>\n  )\n}\n"],"names":["BodyWrapper","styled","main","$margin","$maxWidth","theme","surface1","surface3","Z_INDEX","default","AppBody","props","StyledPositionCard","LightCard","bgColor","transparentize","surface2","SushiPositionCard","tokenA","tokenB","liquidityToken","border","currency0","unwrappedToken","currency1","backgroundColor","useColor","CardNoise","AutoColumn","gap","FixedHeightRow","AutoRow","DoubleCurrencyLogo","size","Text","fontWeight","fontSize","symbol","Dots","Badge","variant","BadgeVariant","WARNING","RowFixed","ButtonEmpty","padding","$borderRadius","width","as","Link","to","address","V2PositionCard","pair","stakedBalance","account","useWeb3React","token0","token1","showMore","setShowMore","useState","userDefaultPoolBalance","useTokenBalance","undefined","totalPoolTokens","useTotalSupply","userPoolBalance","add","poolTokenPercentage","JSBI","quotient","Percent","token0Deposited","token1Deposited","getLiquidityValue","onClick","ChevronUp","style","marginLeft","ChevronDown","toSignificant","CurrencyLogo","currency","toFixed","BIG_INT_ZERO","RowBetween","marginTop","ButtonPrimary","ButtonSecondary","currencyId","EmptyState","message","minHeight","justifyContent","alignItems","ThemedText","DeprecatedBody","computeSushiPairAddress","sortsBefore","getCreate2Address","keccak256","pack","MigrateV2","useTheme","chainId","v2FactoryAddress","V2_FACTORY_ADDRESSES","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","sushiLiquidityToken","Token","toSushiLiquidityToken","v2liquidityToken","toV2LiquidityToken","allLiquidityTokens","filter","token","pairBalances","fetchingPairBalances","useTokenBalancesWithLoadingIndicator","tokenPairsWithV2Balance","greaterThan","tokenPairsWithSushiBalance","v2Pairs","useV2Pairs","v2IsLoading","some","pairState","PairState","LOADING","useNetworkSupportsV2","BackArrowLink","DeprecatedMediumHeader","div","QuestionHelper","text","marginBottom","color","neutral3","textAlign","length","MigrateV2PositionCard","MigrateSushiPositionCard","justify","StyledInternalLink","id","SwitchLocaleLink","V2Unsupported"],"sourceRoot":""}